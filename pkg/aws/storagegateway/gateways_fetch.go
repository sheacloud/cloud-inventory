//AUTOGENERATED CODE DO NOT EDIT
package storagegateway

import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway"
	"github.com/google/uuid"
	"github.com/jinzhu/copier"
	localAws "github.com/sheacloud/cloud-inventory/pkg/aws"
	"github.com/sheacloud/cloud-inventory/pkg/meta"
)

func FetchGateways(ctx context.Context, params *localAws.AwsFetchInput) ([]*Gateway, *localAws.AwsFetchOutputMetadata) {
	fetchingErrors := []error{}
	var fetchedResources int
	var failedResources int
	inventoryResults := &meta.InventoryResults{
		Cloud:      "aws",
		Service:    "storagegateway",
		Resource:   "gateways",
		AccountId:  params.AccountId,
		Region:     params.Region,
		ReportTime: params.ReportTime,
	}
	resources := []*Gateway{}

	awsClient := params.RegionalClients[params.Region]
	client := awsClient.StorageGateway()

	paginator := storagegateway.NewListGatewaysPaginator(client, &storagegateway.ListGatewaysInput{
		Limit: aws.Int32(100),
	})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)

		if err != nil {
			fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling ListGateways in %s/%s: %w", params.AccountId, params.Region, err))
			break
		}

		for _, gatewayInfo := range output.Gateways {
			result, err := client.DescribeGatewayInformation(ctx, &storagegateway.DescribeGatewayInformationInput{
				GatewayARN: gatewayInfo.GatewayARN,
			})
			if err != nil {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling DescribeGatewayInformation on %s in %s/%s: %w", *gatewayInfo.GatewayARN, params.AccountId, params.Region, err))
				continue
			}
			model := new(Gateway)
			copier.CopyWithOption(&model, &result, localAws.CopyOption)

			model.Tags = ConvertTags(result.Tags)
			model.AccountId = params.AccountId
			model.Region = params.Region
			model.ReportTime = params.ReportTime
			model.InventoryUUID = uuid.New().String()

			resources = append(resources, model)
			fetchedResources++
		}
	}

	inventoryResults.FetchedResources = fetchedResources
	inventoryResults.FailedResources = failedResources
	inventoryResults.HadErrors = len(fetchingErrors) > 0

	return resources, &localAws.AwsFetchOutputMetadata{
		FetchingErrors:   fetchingErrors,
		InventoryResults: inventoryResults,
	}
}

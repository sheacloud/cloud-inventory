// AUTOGENERATED, DO NOT EDIT
package efs

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/efs"
	"sync"
)

var customFileSystemDescriptionModelPostprocessingFuncs []func(ctx context.Context, client *efs.Client, cfg aws.Config, x *FileSystemDescriptionModel) = []func(ctx context.Context, client *efs.Client, cfg aws.Config, x *FileSystemDescriptionModel){}
var customFileSystemDescriptionModelFuncsLock sync.Mutex

func registerCustomFileSystemDescriptionModelPostprocessingFunc(f func(ctx context.Context, client *efs.Client, cfg aws.Config, x *FileSystemDescriptionModel)) {
	customFileSystemDescriptionModelFuncsLock.Lock()
	defer customFileSystemDescriptionModelFuncsLock.Unlock()

	customFileSystemDescriptionModelPostprocessingFuncs = append(customFileSystemDescriptionModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("filesystems", FileSystemDescriptionDataSource)
}

type FileSystemDescriptionModel struct {
	CreationTime                 *time.Time
	CreationTimeMilli            int64                                     `parquet:"name=creation_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
	CreationToken                string                                    `parquet:"name=creation_token,type=BYTE_ARRAY,convertedtype=UTF8"`
	FileSystemId                 string                                    `parquet:"name=file_system_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	LifeCycleState               string                                    `parquet:"name=life_cycle_state,type=BYTE_ARRAY,convertedtype=UTF8"`
	NumberOfMountTargets         int32                                     `parquet:"name=number_of_mount_targets,type=INT32"`
	OwnerId                      string                                    `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	PerformanceMode              string                                    `parquet:"name=performance_mode,type=BYTE_ARRAY,convertedtype=UTF8"`
	SizeInBytes                  *FileSystemSizeFileSystemDescriptionModel `parquet:"name=size_in_bytes"`
	Tags                         map[string]string                         `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	AvailabilityZoneId           string                                    `parquet:"name=availability_zone_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	AvailabilityZoneName         string                                    `parquet:"name=availability_zone_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Encrypted                    bool                                      `parquet:"name=encrypted,type=BOOLEAN"`
	FileSystemArn                string                                    `parquet:"name=file_system_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	KmsKeyId                     string                                    `parquet:"name=kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Name                         string                                    `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8"`
	ProvisionedThroughputInMibps float64                                   `parquet:"name=provisioned_throughput_in_mibps,type=DOUBLE"`
	ThroughputMode               string                                    `parquet:"name=throughput_mode,type=BYTE_ARRAY,convertedtype=UTF8"`
	AccountId                    string                                    `parquet:"name=account_id, type=BYTE_ARRAY, convertedtype=UTF8"`
	Region                       string                                    `parquet:"name=region, type=BYTE_ARRAY, convertedtype=UTF8"`
	ReportTime                   int64                                     `parquet:"name=report_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
}

type FileSystemSizeFileSystemDescriptionModel struct {
	Value           int64 `parquet:"name=value,type=INT64"`
	Timestamp       *time.Time
	TimestampMilli  int64 `parquet:"name=timestamp, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
	ValueInIA       int64 `parquet:"name=value_in_ia,type=INT64"`
	ValueInStandard int64 `parquet:"name=value_in_standard,type=INT64"`
}

type TagFileSystemDescriptionModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func FileSystemDescriptionDataSource(ctx context.Context, client *efs.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(FileSystemDescriptionModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := efs.NewDescribeFileSystemsPaginator(client, &efs.DescribeFileSystemsInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeFileSystems")
			return err
		}

		for _, var0 := range output.FileSystems {

			model := new(FileSystemDescriptionModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customFileSystemDescriptionModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing FileSystemDescriptionModel: %v", err))
			}
		}

	}

	return nil
}

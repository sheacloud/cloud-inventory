// AUTOGENERATED, DO NOT EDIT
package iam

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	"sync"
)

var customRoleModelPostprocessingFuncs []func(ctx context.Context, client *iam.Client, cfg aws.Config, x *RoleModel) = []func(ctx context.Context, client *iam.Client, cfg aws.Config, x *RoleModel){}
var customRoleModelFuncsLock sync.Mutex

func registerCustomRoleModelPostprocessingFunc(f func(ctx context.Context, client *iam.Client, cfg aws.Config, x *RoleModel)) {
	customRoleModelFuncsLock.Lock()
	defer customRoleModelFuncsLock.Unlock()

	customRoleModelPostprocessingFuncs = append(customRoleModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("roles", RoleDataSource)
}

type RoleModel struct {
	Arn                      string `parquet:"name=arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	CreateDate               *time.Time
	CreateDateMilli          int64                                 `parquet:"name=create_date, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
	Path                     string                                `parquet:"name=path,type=BYTE_ARRAY,convertedtype=UTF8"`
	RoleId                   string                                `parquet:"name=role_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	RoleName                 string                                `parquet:"name=role_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	AssumeRolePolicyDocument string                                `parquet:"name=assume_role_policy_document,type=BYTE_ARRAY,convertedtype=UTF8"`
	Description              string                                `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8"`
	MaxSessionDuration       int32                                 `parquet:"name=max_session_duration,type=INT32"`
	PermissionsBoundary      *AttachedPermissionsBoundaryRoleModel `parquet:"name=permissions_boundary"`
	RoleLastUsed             *RoleLastUsedRoleModel                `parquet:"name=role_last_used"`
	Tags                     map[string]string                     `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	AccountId                string                                `parquet:"name=account_id, type=BYTE_ARRAY, convertedtype=UTF8"`
	Region                   string                                `parquet:"name=region, type=BYTE_ARRAY, convertedtype=UTF8"`
	ReportTime               int64                                 `parquet:"name=report_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
	AttachedPolicies         []*AttachedPolicyRoleModel            `parquet:"name=attached_policies,type=LIST"`
	InlinePolicies           []string                              `parquet:"name=inline_policies,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
}

type AttachedPermissionsBoundaryRoleModel struct {
	PermissionsBoundaryArn  string `parquet:"name=permissions_boundary_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	PermissionsBoundaryType string `parquet:"name=permissions_boundary_type,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type RoleLastUsedRoleModel struct {
	LastUsedDate      *time.Time
	LastUsedDateMilli int64  `parquet:"name=last_used_date, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
	Region            string `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TagRoleModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type AttachedPolicyRoleModel struct {
	PolicyArn  string `parquet:"name=policy_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	PolicyName string `parquet:"name=policy_name,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func RoleDataSource(ctx context.Context, client *iam.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(RoleModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := iam.NewListRolesPaginator(client, &iam.ListRolesInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling ListRoles")
			return err
		}

		for _, var0 := range output.Roles {

			model := new(RoleModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customRoleModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing RoleModel: %v", err))
			}
		}

	}

	return nil
}

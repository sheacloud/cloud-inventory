// AUTOGENERATED, DO NOT EDIT
package iam

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	"sync"
)

var customPolicyModelPostprocessingFuncs []func(ctx context.Context, client *iam.Client, cfg aws.Config, x *PolicyModel) = []func(ctx context.Context, client *iam.Client, cfg aws.Config, x *PolicyModel){}
var customPolicyModelFuncsLock sync.Mutex

func registerCustomPolicyModelPostprocessingFunc(f func(ctx context.Context, client *iam.Client, cfg aws.Config, x *PolicyModel)) {
	customPolicyModelFuncsLock.Lock()
	defer customPolicyModelFuncsLock.Unlock()

	customPolicyModelPostprocessingFuncs = append(customPolicyModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("policies", PolicyDataSource)
}

type PolicyModel struct {
	Arn                           string `parquet:"name=arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	AttachmentCount               int32  `parquet:"name=attachment_count,type=INT32"`
	CreateDate                    *time.Time
	DefaultVersionId              string `parquet:"name=default_version_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Description                   string `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8"`
	IsAttachable                  bool   `parquet:"name=is_attachable,type=BOOLEAN"`
	Path                          string `parquet:"name=path,type=BYTE_ARRAY,convertedtype=UTF8"`
	PermissionsBoundaryUsageCount int32  `parquet:"name=permissions_boundary_usage_count,type=INT32"`
	PolicyId                      string `parquet:"name=policy_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	PolicyName                    string `parquet:"name=policy_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	TagsOld                       []*TagPolicyModel
	UpdateDate                    *time.Time
	CreateDateMilli               int64             `parquet:"name=create_date_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	Tags                          map[string]string `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	UpdateDateMilli               int64             `parquet:"name=update_date_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	AccountId                     string            `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Region                        string            `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReportTime                    int64             `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type TagPolicyModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func PolicyDataSource(ctx context.Context, client *iam.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(PolicyModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := iam.NewListPoliciesPaginator(client, &iam.ListPoliciesInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling ListPolicies")
			return err
		}

		for _, var0 := range output.Policies {

			model := new(PolicyModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customPolicyModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing PolicyModel: %v", err))
			}
		}

	}

	return nil
}

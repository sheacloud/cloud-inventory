//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_referenced_resource_file.tmpl
package cloudfront

type DistributionConfig struct {
	CallerReference      string                `bson:"caller_reference,omitempty" ion:"caller_reference" dynamodbav:"caller_reference,omitempty" parquet:"name=caller_reference,type=BYTE_ARRAY,convertedtype=UTF8" json:"caller_reference,omitempty" diff:"caller_reference"`
	Comment              string                `bson:"comment,omitempty" ion:"comment" dynamodbav:"comment,omitempty" parquet:"name=comment,type=BYTE_ARRAY,convertedtype=UTF8" json:"comment,omitempty" diff:"comment"`
	DefaultCacheBehavior *DefaultCacheBehavior `bson:"default_cache_behavior,omitempty" ion:"default_cache_behavior" dynamodbav:"default_cache_behavior,omitempty" parquet:"name=default_cache_behavior" json:"default_cache_behavior,omitempty" diff:"default_cache_behavior"`
	Enabled              bool                  `bson:"enabled,omitempty" ion:"enabled" dynamodbav:"enabled" parquet:"name=enabled,type=BOOLEAN" json:"enabled,omitempty" diff:"enabled"`
	Origins              *Origins              `bson:"origins,omitempty" ion:"origins" dynamodbav:"origins,omitempty" parquet:"name=origins" json:"origins,omitempty" diff:"origins"`
	Aliases              *Aliases              `bson:"aliases,omitempty" ion:"aliases" dynamodbav:"aliases,omitempty" parquet:"name=aliases" json:"aliases,omitempty" diff:"aliases"`
	CacheBehaviors       *CacheBehaviors       `bson:"cache_behaviors,omitempty" ion:"cache_behaviors" dynamodbav:"cache_behaviors,omitempty" parquet:"name=cache_behaviors" json:"cache_behaviors,omitempty" diff:"cache_behaviors"`
	CustomErrorResponses *CustomErrorResponses `bson:"custom_error_responses,omitempty" ion:"custom_error_responses" dynamodbav:"custom_error_responses,omitempty" parquet:"name=custom_error_responses" json:"custom_error_responses,omitempty" diff:"custom_error_responses"`
	DefaultRootObject    string                `bson:"default_root_object,omitempty" ion:"default_root_object" dynamodbav:"default_root_object,omitempty" parquet:"name=default_root_object,type=BYTE_ARRAY,convertedtype=UTF8" json:"default_root_object,omitempty" diff:"default_root_object"`
	HttpVersion          string                `bson:"http_version,omitempty" ion:"http_version" dynamodbav:"http_version,omitempty" parquet:"name=http_version,type=BYTE_ARRAY,convertedtype=UTF8" json:"http_version,omitempty" diff:"http_version"`
	IsIPV6Enabled        bool                  `bson:"is_ipv6_enabled,omitempty" ion:"is_ipv6_enabled" dynamodbav:"is_ipv6_enabled" parquet:"name=is_ipv6_enabled,type=BOOLEAN" json:"is_ipv6_enabled,omitempty" diff:"is_ipv6_enabled"`
	Logging              *LoggingConfig        `bson:"logging,omitempty" ion:"logging" dynamodbav:"logging,omitempty" parquet:"name=logging" json:"logging,omitempty" diff:"logging"`
	OriginGroups         *OriginGroups         `bson:"origin_groups,omitempty" ion:"origin_groups" dynamodbav:"origin_groups,omitempty" parquet:"name=origin_groups" json:"origin_groups,omitempty" diff:"origin_groups"`
	PriceClass           string                `bson:"price_class,omitempty" ion:"price_class" dynamodbav:"price_class,omitempty" parquet:"name=price_class,type=BYTE_ARRAY,convertedtype=UTF8" json:"price_class,omitempty" diff:"price_class"`
	Restrictions         *Restrictions         `bson:"restrictions,omitempty" ion:"restrictions" dynamodbav:"restrictions,omitempty" parquet:"name=restrictions" json:"restrictions,omitempty" diff:"restrictions"`
	ViewerCertificate    *ViewerCertificate    `bson:"viewer_certificate,omitempty" ion:"viewer_certificate" dynamodbav:"viewer_certificate,omitempty" parquet:"name=viewer_certificate" json:"viewer_certificate,omitempty" diff:"viewer_certificate"`
	WebACLId             string                `bson:"web_acl_id,omitempty" ion:"web_acl_id" dynamodbav:"web_acl_id,omitempty" parquet:"name=web_acl_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"web_acl_id,omitempty" diff:"web_acl_id"`
}

type DefaultCacheBehavior struct {
	TargetOriginId             string                      `bson:"target_origin_id,omitempty" ion:"target_origin_id" dynamodbav:"target_origin_id,omitempty" parquet:"name=target_origin_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"target_origin_id,omitempty" diff:"target_origin_id"`
	ViewerProtocolPolicy       string                      `bson:"viewer_protocol_policy,omitempty" ion:"viewer_protocol_policy" dynamodbav:"viewer_protocol_policy,omitempty" parquet:"name=viewer_protocol_policy,type=BYTE_ARRAY,convertedtype=UTF8" json:"viewer_protocol_policy,omitempty" diff:"viewer_protocol_policy"`
	AllowedMethods             *AllowedMethods             `bson:"allowed_methods,omitempty" ion:"allowed_methods" dynamodbav:"allowed_methods,omitempty" parquet:"name=allowed_methods" json:"allowed_methods,omitempty" diff:"allowed_methods"`
	CachePolicyId              string                      `bson:"cache_policy_id,omitempty" ion:"cache_policy_id" dynamodbav:"cache_policy_id,omitempty" parquet:"name=cache_policy_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_policy_id,omitempty" diff:"cache_policy_id"`
	Compress                   bool                        `bson:"compress,omitempty" ion:"compress" dynamodbav:"compress" parquet:"name=compress,type=BOOLEAN" json:"compress,omitempty" diff:"compress"`
	DefaultTTL                 int64                       `bson:"default_ttl,omitempty" ion:"default_ttl" dynamodbav:"default_ttl,omitempty" parquet:"name=default_ttl,type=INT64" json:"default_ttl,omitempty" diff:"default_ttl"`
	FieldLevelEncryptionId     string                      `bson:"field_level_encryption_id,omitempty" ion:"field_level_encryption_id" dynamodbav:"field_level_encryption_id,omitempty" parquet:"name=field_level_encryption_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"field_level_encryption_id,omitempty" diff:"field_level_encryption_id"`
	ForwardedValues            *ForwardedValues            `bson:"forwarded_values,omitempty" ion:"forwarded_values" dynamodbav:"forwarded_values,omitempty" parquet:"name=forwarded_values" json:"forwarded_values,omitempty" diff:"forwarded_values"`
	FunctionAssociations       *FunctionAssociations       `bson:"function_associations,omitempty" ion:"function_associations" dynamodbav:"function_associations,omitempty" parquet:"name=function_associations" json:"function_associations,omitempty" diff:"function_associations"`
	LambdaFunctionAssociations *LambdaFunctionAssociations `bson:"lambda_function_associations,omitempty" ion:"lambda_function_associations" dynamodbav:"lambda_function_associations,omitempty" parquet:"name=lambda_function_associations" json:"lambda_function_associations,omitempty" diff:"lambda_function_associations"`
	MaxTTL                     int64                       `bson:"max_ttl,omitempty" ion:"max_ttl" dynamodbav:"max_ttl,omitempty" parquet:"name=max_ttl,type=INT64" json:"max_ttl,omitempty" diff:"max_ttl"`
	MinTTL                     int64                       `bson:"min_ttl,omitempty" ion:"min_ttl" dynamodbav:"min_ttl,omitempty" parquet:"name=min_ttl,type=INT64" json:"min_ttl,omitempty" diff:"min_ttl"`
	OriginRequestPolicyId      string                      `bson:"origin_request_policy_id,omitempty" ion:"origin_request_policy_id" dynamodbav:"origin_request_policy_id,omitempty" parquet:"name=origin_request_policy_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"origin_request_policy_id,omitempty" diff:"origin_request_policy_id"`
	RealtimeLogConfigArn       string                      `bson:"realtime_log_config_arn,omitempty" ion:"realtime_log_config_arn" dynamodbav:"realtime_log_config_arn,omitempty" parquet:"name=realtime_log_config_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"realtime_log_config_arn,omitempty" diff:"realtime_log_config_arn"`
	ResponseHeadersPolicyId    string                      `bson:"response_headers_policy_id,omitempty" ion:"response_headers_policy_id" dynamodbav:"response_headers_policy_id,omitempty" parquet:"name=response_headers_policy_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"response_headers_policy_id,omitempty" diff:"response_headers_policy_id"`
	SmoothStreaming            bool                        `bson:"smooth_streaming,omitempty" ion:"smooth_streaming" dynamodbav:"smooth_streaming" parquet:"name=smooth_streaming,type=BOOLEAN" json:"smooth_streaming,omitempty" diff:"smooth_streaming"`
	TrustedKeyGroups           *TrustedKeyGroups           `bson:"trusted_key_groups,omitempty" ion:"trusted_key_groups" dynamodbav:"trusted_key_groups,omitempty" parquet:"name=trusted_key_groups" json:"trusted_key_groups,omitempty" diff:"trusted_key_groups"`
	TrustedSigners             *TrustedSigners             `bson:"trusted_signers,omitempty" ion:"trusted_signers" dynamodbav:"trusted_signers,omitempty" parquet:"name=trusted_signers" json:"trusted_signers,omitempty" diff:"trusted_signers"`
}

type AllowedMethods struct {
	Items         []string       `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
	Quantity      int32          `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	CachedMethods *CachedMethods `bson:"cached_methods,omitempty" ion:"cached_methods" dynamodbav:"cached_methods,omitempty" parquet:"name=cached_methods" json:"cached_methods,omitempty" diff:"cached_methods"`
}

type CachedMethods struct {
	Items    []string `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
	Quantity int32    `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
}

type ForwardedValues struct {
	Cookies              *CookiePreference     `bson:"cookies,omitempty" ion:"cookies" dynamodbav:"cookies,omitempty" parquet:"name=cookies" json:"cookies,omitempty" diff:"cookies"`
	QueryString          bool                  `bson:"query_string,omitempty" ion:"query_string" dynamodbav:"query_string" parquet:"name=query_string,type=BOOLEAN" json:"query_string,omitempty" diff:"query_string"`
	Headers              *Headers              `bson:"headers,omitempty" ion:"headers" dynamodbav:"headers,omitempty" parquet:"name=headers" json:"headers,omitempty" diff:"headers"`
	QueryStringCacheKeys *QueryStringCacheKeys `bson:"query_string_cache_keys,omitempty" ion:"query_string_cache_keys" dynamodbav:"query_string_cache_keys,omitempty" parquet:"name=query_string_cache_keys" json:"query_string_cache_keys,omitempty" diff:"query_string_cache_keys"`
}

type CookiePreference struct {
	Forward          string       `bson:"forward,omitempty" ion:"forward" dynamodbav:"forward,omitempty" parquet:"name=forward,type=BYTE_ARRAY,convertedtype=UTF8" json:"forward,omitempty" diff:"forward"`
	WhitelistedNames *CookieNames `bson:"whitelisted_names,omitempty" ion:"whitelisted_names" dynamodbav:"whitelisted_names,omitempty" parquet:"name=whitelisted_names" json:"whitelisted_names,omitempty" diff:"whitelisted_names"`
}

type CookieNames struct {
	Quantity int32    `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []string `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
}

type Headers struct {
	Quantity int32    `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []string `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
}

type QueryStringCacheKeys struct {
	Quantity int32    `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []string `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
}

type FunctionAssociations struct {
	Quantity int32                  `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []*FunctionAssociation `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST" json:"items,omitempty" diff:"items"`
}

type FunctionAssociation struct {
	EventType   string `bson:"event_type,omitempty" ion:"event_type" dynamodbav:"event_type,omitempty" parquet:"name=event_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"event_type,omitempty" diff:"event_type"`
	FunctionARN string `bson:"function_arn,omitempty" ion:"function_arn" dynamodbav:"function_arn,omitempty" parquet:"name=function_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"function_arn,omitempty" diff:"function_arn"`
}

type LambdaFunctionAssociations struct {
	Quantity int32                        `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []*LambdaFunctionAssociation `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST" json:"items,omitempty" diff:"items"`
}

type LambdaFunctionAssociation struct {
	EventType         string `bson:"event_type,omitempty" ion:"event_type" dynamodbav:"event_type,omitempty" parquet:"name=event_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"event_type,omitempty" diff:"event_type"`
	LambdaFunctionARN string `bson:"lambda_function_arn,omitempty" ion:"lambda_function_arn" dynamodbav:"lambda_function_arn,omitempty" parquet:"name=lambda_function_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"lambda_function_arn,omitempty" diff:"lambda_function_arn"`
	IncludeBody       bool   `bson:"include_body,omitempty" ion:"include_body" dynamodbav:"include_body" parquet:"name=include_body,type=BOOLEAN" json:"include_body,omitempty" diff:"include_body"`
}

type TrustedKeyGroups struct {
	Enabled  bool     `bson:"enabled,omitempty" ion:"enabled" dynamodbav:"enabled" parquet:"name=enabled,type=BOOLEAN" json:"enabled,omitempty" diff:"enabled"`
	Quantity int32    `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []string `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
}

type TrustedSigners struct {
	Enabled  bool     `bson:"enabled,omitempty" ion:"enabled" dynamodbav:"enabled" parquet:"name=enabled,type=BOOLEAN" json:"enabled,omitempty" diff:"enabled"`
	Quantity int32    `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []string `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
}

type Origins struct {
	Items    []*Origin `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST" json:"items,omitempty" diff:"items"`
	Quantity int32     `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
}

type Origin struct {
	DomainName         string              `bson:"domain_name,omitempty" ion:"domain_name" dynamodbav:"domain_name,omitempty" parquet:"name=domain_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"domain_name,omitempty" diff:"domain_name"`
	Id                 string              `bson:"id,omitempty" ion:"id" dynamodbav:"id,omitempty" parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" json:"id,omitempty" diff:"id"`
	ConnectionAttempts int32               `bson:"connection_attempts,omitempty" ion:"connection_attempts" dynamodbav:"connection_attempts,omitempty" parquet:"name=connection_attempts,type=INT32" json:"connection_attempts,omitempty" diff:"connection_attempts"`
	ConnectionTimeout  int32               `bson:"connection_timeout,omitempty" ion:"connection_timeout" dynamodbav:"connection_timeout,omitempty" parquet:"name=connection_timeout,type=INT32" json:"connection_timeout,omitempty" diff:"connection_timeout"`
	CustomHeaders      *CustomHeaders      `bson:"custom_headers,omitempty" ion:"custom_headers" dynamodbav:"custom_headers,omitempty" parquet:"name=custom_headers" json:"custom_headers,omitempty" diff:"custom_headers"`
	CustomOriginConfig *CustomOriginConfig `bson:"custom_origin_config,omitempty" ion:"custom_origin_config" dynamodbav:"custom_origin_config,omitempty" parquet:"name=custom_origin_config" json:"custom_origin_config,omitempty" diff:"custom_origin_config"`
	OriginPath         string              `bson:"origin_path,omitempty" ion:"origin_path" dynamodbav:"origin_path,omitempty" parquet:"name=origin_path,type=BYTE_ARRAY,convertedtype=UTF8" json:"origin_path,omitempty" diff:"origin_path"`
	OriginShield       *OriginShield       `bson:"origin_shield,omitempty" ion:"origin_shield" dynamodbav:"origin_shield,omitempty" parquet:"name=origin_shield" json:"origin_shield,omitempty" diff:"origin_shield"`
	S3OriginConfig     *S3OriginConfig     `bson:"s3_origin_config,omitempty" ion:"s3_origin_config" dynamodbav:"s3_origin_config,omitempty" parquet:"name=s3_origin_config" json:"s3_origin_config,omitempty" diff:"s3_origin_config"`
}

type CustomHeaders struct {
	Quantity int32                 `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []*OriginCustomHeader `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST" json:"items,omitempty" diff:"items"`
}

type OriginCustomHeader struct {
	HeaderName  string `bson:"header_name,omitempty" ion:"header_name" dynamodbav:"header_name,omitempty" parquet:"name=header_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"header_name,omitempty" diff:"header_name"`
	HeaderValue string `bson:"header_value,omitempty" ion:"header_value" dynamodbav:"header_value,omitempty" parquet:"name=header_value,type=BYTE_ARRAY,convertedtype=UTF8" json:"header_value,omitempty" diff:"header_value"`
}

type CustomOriginConfig struct {
	HTTPPort               int32               `bson:"http_port,omitempty" ion:"http_port" dynamodbav:"http_port,omitempty" parquet:"name=http_port,type=INT32" json:"http_port,omitempty" diff:"http_port"`
	HTTPSPort              int32               `bson:"https_port,omitempty" ion:"https_port" dynamodbav:"https_port,omitempty" parquet:"name=https_port,type=INT32" json:"https_port,omitempty" diff:"https_port"`
	OriginProtocolPolicy   string              `bson:"origin_protocol_policy,omitempty" ion:"origin_protocol_policy" dynamodbav:"origin_protocol_policy,omitempty" parquet:"name=origin_protocol_policy,type=BYTE_ARRAY,convertedtype=UTF8" json:"origin_protocol_policy,omitempty" diff:"origin_protocol_policy"`
	OriginKeepaliveTimeout int32               `bson:"origin_keepalive_timeout,omitempty" ion:"origin_keepalive_timeout" dynamodbav:"origin_keepalive_timeout,omitempty" parquet:"name=origin_keepalive_timeout,type=INT32" json:"origin_keepalive_timeout,omitempty" diff:"origin_keepalive_timeout"`
	OriginReadTimeout      int32               `bson:"origin_read_timeout,omitempty" ion:"origin_read_timeout" dynamodbav:"origin_read_timeout,omitempty" parquet:"name=origin_read_timeout,type=INT32" json:"origin_read_timeout,omitempty" diff:"origin_read_timeout"`
	OriginSslProtocols     *OriginSslProtocols `bson:"origin_ssl_protocols,omitempty" ion:"origin_ssl_protocols" dynamodbav:"origin_ssl_protocols,omitempty" parquet:"name=origin_ssl_protocols" json:"origin_ssl_protocols,omitempty" diff:"origin_ssl_protocols"`
}

type OriginSslProtocols struct {
	Items    []string `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
	Quantity int32    `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
}

type OriginShield struct {
	Enabled            bool   `bson:"enabled,omitempty" ion:"enabled" dynamodbav:"enabled" parquet:"name=enabled,type=BOOLEAN" json:"enabled,omitempty" diff:"enabled"`
	OriginShieldRegion string `bson:"origin_shield_region,omitempty" ion:"origin_shield_region" dynamodbav:"origin_shield_region,omitempty" parquet:"name=origin_shield_region,type=BYTE_ARRAY,convertedtype=UTF8" json:"origin_shield_region,omitempty" diff:"origin_shield_region"`
}

type S3OriginConfig struct {
	OriginAccessIdentity string `bson:"origin_access_identity,omitempty" ion:"origin_access_identity" dynamodbav:"origin_access_identity,omitempty" parquet:"name=origin_access_identity,type=BYTE_ARRAY,convertedtype=UTF8" json:"origin_access_identity,omitempty" diff:"origin_access_identity"`
}

type Aliases struct {
	Quantity int32    `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []string `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
}

type CacheBehaviors struct {
	Quantity int32            `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []*CacheBehavior `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST" json:"items,omitempty" diff:"items"`
}

type CacheBehavior struct {
	PathPattern                string                      `bson:"path_pattern,omitempty" ion:"path_pattern" dynamodbav:"path_pattern,omitempty" parquet:"name=path_pattern,type=BYTE_ARRAY,convertedtype=UTF8" json:"path_pattern,omitempty" diff:"path_pattern"`
	TargetOriginId             string                      `bson:"target_origin_id,omitempty" ion:"target_origin_id" dynamodbav:"target_origin_id,omitempty" parquet:"name=target_origin_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"target_origin_id,omitempty" diff:"target_origin_id"`
	ViewerProtocolPolicy       string                      `bson:"viewer_protocol_policy,omitempty" ion:"viewer_protocol_policy" dynamodbav:"viewer_protocol_policy,omitempty" parquet:"name=viewer_protocol_policy,type=BYTE_ARRAY,convertedtype=UTF8" json:"viewer_protocol_policy,omitempty" diff:"viewer_protocol_policy"`
	AllowedMethods             *AllowedMethods             `bson:"allowed_methods,omitempty" ion:"allowed_methods" dynamodbav:"allowed_methods,omitempty" parquet:"name=allowed_methods" json:"allowed_methods,omitempty" diff:"allowed_methods"`
	CachePolicyId              string                      `bson:"cache_policy_id,omitempty" ion:"cache_policy_id" dynamodbav:"cache_policy_id,omitempty" parquet:"name=cache_policy_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_policy_id,omitempty" diff:"cache_policy_id"`
	Compress                   bool                        `bson:"compress,omitempty" ion:"compress" dynamodbav:"compress" parquet:"name=compress,type=BOOLEAN" json:"compress,omitempty" diff:"compress"`
	DefaultTTL                 int64                       `bson:"default_ttl,omitempty" ion:"default_ttl" dynamodbav:"default_ttl,omitempty" parquet:"name=default_ttl,type=INT64" json:"default_ttl,omitempty" diff:"default_ttl"`
	FieldLevelEncryptionId     string                      `bson:"field_level_encryption_id,omitempty" ion:"field_level_encryption_id" dynamodbav:"field_level_encryption_id,omitempty" parquet:"name=field_level_encryption_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"field_level_encryption_id,omitempty" diff:"field_level_encryption_id"`
	ForwardedValues            *ForwardedValues            `bson:"forwarded_values,omitempty" ion:"forwarded_values" dynamodbav:"forwarded_values,omitempty" parquet:"name=forwarded_values" json:"forwarded_values,omitempty" diff:"forwarded_values"`
	FunctionAssociations       *FunctionAssociations       `bson:"function_associations,omitempty" ion:"function_associations" dynamodbav:"function_associations,omitempty" parquet:"name=function_associations" json:"function_associations,omitempty" diff:"function_associations"`
	LambdaFunctionAssociations *LambdaFunctionAssociations `bson:"lambda_function_associations,omitempty" ion:"lambda_function_associations" dynamodbav:"lambda_function_associations,omitempty" parquet:"name=lambda_function_associations" json:"lambda_function_associations,omitempty" diff:"lambda_function_associations"`
	MaxTTL                     int64                       `bson:"max_ttl,omitempty" ion:"max_ttl" dynamodbav:"max_ttl,omitempty" parquet:"name=max_ttl,type=INT64" json:"max_ttl,omitempty" diff:"max_ttl"`
	MinTTL                     int64                       `bson:"min_ttl,omitempty" ion:"min_ttl" dynamodbav:"min_ttl,omitempty" parquet:"name=min_ttl,type=INT64" json:"min_ttl,omitempty" diff:"min_ttl"`
	OriginRequestPolicyId      string                      `bson:"origin_request_policy_id,omitempty" ion:"origin_request_policy_id" dynamodbav:"origin_request_policy_id,omitempty" parquet:"name=origin_request_policy_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"origin_request_policy_id,omitempty" diff:"origin_request_policy_id"`
	RealtimeLogConfigArn       string                      `bson:"realtime_log_config_arn,omitempty" ion:"realtime_log_config_arn" dynamodbav:"realtime_log_config_arn,omitempty" parquet:"name=realtime_log_config_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"realtime_log_config_arn,omitempty" diff:"realtime_log_config_arn"`
	ResponseHeadersPolicyId    string                      `bson:"response_headers_policy_id,omitempty" ion:"response_headers_policy_id" dynamodbav:"response_headers_policy_id,omitempty" parquet:"name=response_headers_policy_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"response_headers_policy_id,omitempty" diff:"response_headers_policy_id"`
	SmoothStreaming            bool                        `bson:"smooth_streaming,omitempty" ion:"smooth_streaming" dynamodbav:"smooth_streaming" parquet:"name=smooth_streaming,type=BOOLEAN" json:"smooth_streaming,omitempty" diff:"smooth_streaming"`
	TrustedKeyGroups           *TrustedKeyGroups           `bson:"trusted_key_groups,omitempty" ion:"trusted_key_groups" dynamodbav:"trusted_key_groups,omitempty" parquet:"name=trusted_key_groups" json:"trusted_key_groups,omitempty" diff:"trusted_key_groups"`
	TrustedSigners             *TrustedSigners             `bson:"trusted_signers,omitempty" ion:"trusted_signers" dynamodbav:"trusted_signers,omitempty" parquet:"name=trusted_signers" json:"trusted_signers,omitempty" diff:"trusted_signers"`
}

type CustomErrorResponses struct {
	Quantity int32                  `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []*CustomErrorResponse `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST" json:"items,omitempty" diff:"items"`
}

type CustomErrorResponse struct {
	ErrorCode          int32  `bson:"error_code,omitempty" ion:"error_code" dynamodbav:"error_code,omitempty" parquet:"name=error_code,type=INT32" json:"error_code,omitempty" diff:"error_code"`
	ErrorCachingMinTTL int64  `bson:"error_caching_min_ttl,omitempty" ion:"error_caching_min_ttl" dynamodbav:"error_caching_min_ttl,omitempty" parquet:"name=error_caching_min_ttl,type=INT64" json:"error_caching_min_ttl,omitempty" diff:"error_caching_min_ttl"`
	ResponseCode       string `bson:"response_code,omitempty" ion:"response_code" dynamodbav:"response_code,omitempty" parquet:"name=response_code,type=BYTE_ARRAY,convertedtype=UTF8" json:"response_code,omitempty" diff:"response_code"`
	ResponsePagePath   string `bson:"response_page_path,omitempty" ion:"response_page_path" dynamodbav:"response_page_path,omitempty" parquet:"name=response_page_path,type=BYTE_ARRAY,convertedtype=UTF8" json:"response_page_path,omitempty" diff:"response_page_path"`
}

type LoggingConfig struct {
	Bucket         string `bson:"bucket,omitempty" ion:"bucket" dynamodbav:"bucket,omitempty" parquet:"name=bucket,type=BYTE_ARRAY,convertedtype=UTF8" json:"bucket,omitempty" diff:"bucket"`
	Enabled        bool   `bson:"enabled,omitempty" ion:"enabled" dynamodbav:"enabled" parquet:"name=enabled,type=BOOLEAN" json:"enabled,omitempty" diff:"enabled"`
	IncludeCookies bool   `bson:"include_cookies,omitempty" ion:"include_cookies" dynamodbav:"include_cookies" parquet:"name=include_cookies,type=BOOLEAN" json:"include_cookies,omitempty" diff:"include_cookies"`
	Prefix         string `bson:"prefix,omitempty" ion:"prefix" dynamodbav:"prefix,omitempty" parquet:"name=prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"prefix,omitempty" diff:"prefix"`
}

type OriginGroups struct {
	Quantity int32          `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []*OriginGroup `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST" json:"items,omitempty" diff:"items"`
}

type OriginGroup struct {
	FailoverCriteria *OriginGroupFailoverCriteria `bson:"failover_criteria,omitempty" ion:"failover_criteria" dynamodbav:"failover_criteria,omitempty" parquet:"name=failover_criteria" json:"failover_criteria,omitempty" diff:"failover_criteria"`
	Id               string                       `bson:"id,omitempty" ion:"id" dynamodbav:"id,omitempty" parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" json:"id,omitempty" diff:"id"`
	Members          *OriginGroupMembers          `bson:"members,omitempty" ion:"members" dynamodbav:"members,omitempty" parquet:"name=members" json:"members,omitempty" diff:"members"`
}

type OriginGroupFailoverCriteria struct {
	StatusCodes *StatusCodes `bson:"status_codes,omitempty" ion:"status_codes" dynamodbav:"status_codes,omitempty" parquet:"name=status_codes" json:"status_codes,omitempty" diff:"status_codes"`
}

type StatusCodes struct {
	Items    []int32 `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=INT32" json:"items,omitempty" diff:"items"`
	Quantity int32   `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
}

type OriginGroupMembers struct {
	Items    []*OriginGroupMember `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST" json:"items,omitempty" diff:"items"`
	Quantity int32                `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
}

type OriginGroupMember struct {
	OriginId string `bson:"origin_id,omitempty" ion:"origin_id" dynamodbav:"origin_id,omitempty" parquet:"name=origin_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"origin_id,omitempty" diff:"origin_id"`
}

type Restrictions struct {
	GeoRestriction *GeoRestriction `bson:"geo_restriction,omitempty" ion:"geo_restriction" dynamodbav:"geo_restriction,omitempty" parquet:"name=geo_restriction" json:"geo_restriction,omitempty" diff:"geo_restriction"`
}

type GeoRestriction struct {
	Quantity        int32    `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	RestrictionType string   `bson:"restriction_type,omitempty" ion:"restriction_type" dynamodbav:"restriction_type,omitempty" parquet:"name=restriction_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"restriction_type,omitempty" diff:"restriction_type"`
	Items           []string `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
}

type ViewerCertificate struct {
	ACMCertificateArn            string `bson:"acm_certificate_arn,omitempty" ion:"acm_certificate_arn" dynamodbav:"acm_certificate_arn,omitempty" parquet:"name=acm_certificate_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"acm_certificate_arn,omitempty" diff:"acm_certificate_arn"`
	Certificate                  string `bson:"certificate,omitempty" ion:"certificate" dynamodbav:"certificate,omitempty" parquet:"name=certificate,type=BYTE_ARRAY,convertedtype=UTF8" json:"certificate,omitempty" diff:"certificate"`
	CertificateSource            string `bson:"certificate_source,omitempty" ion:"certificate_source" dynamodbav:"certificate_source,omitempty" parquet:"name=certificate_source,type=BYTE_ARRAY,convertedtype=UTF8" json:"certificate_source,omitempty" diff:"certificate_source"`
	CloudFrontDefaultCertificate bool   `bson:"cloud_front_default_certificate,omitempty" ion:"cloud_front_default_certificate" dynamodbav:"cloud_front_default_certificate" parquet:"name=cloud_front_default_certificate,type=BOOLEAN" json:"cloud_front_default_certificate,omitempty" diff:"cloud_front_default_certificate"`
	IAMCertificateId             string `bson:"iam_certificate_id,omitempty" ion:"iam_certificate_id" dynamodbav:"iam_certificate_id,omitempty" parquet:"name=iam_certificate_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"iam_certificate_id,omitempty" diff:"iam_certificate_id"`
	MinimumProtocolVersion       string `bson:"minimum_protocol_version,omitempty" ion:"minimum_protocol_version" dynamodbav:"minimum_protocol_version,omitempty" parquet:"name=minimum_protocol_version,type=BYTE_ARRAY,convertedtype=UTF8" json:"minimum_protocol_version,omitempty" diff:"minimum_protocol_version"`
	SSLSupportMethod             string `bson:"ssl_support_method,omitempty" ion:"ssl_support_method" dynamodbav:"ssl_support_method,omitempty" parquet:"name=ssl_support_method,type=BYTE_ARRAY,convertedtype=UTF8" json:"ssl_support_method,omitempty" diff:"ssl_support_method"`
}

type ActiveTrustedKeyGroups struct {
	Enabled  bool            `bson:"enabled,omitempty" ion:"enabled" dynamodbav:"enabled" parquet:"name=enabled,type=BOOLEAN" json:"enabled,omitempty" diff:"enabled"`
	Quantity int32           `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []*KGKeyPairIds `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST" json:"items,omitempty" diff:"items"`
}

type KGKeyPairIds struct {
	KeyGroupId string      `bson:"key_group_id,omitempty" ion:"key_group_id" dynamodbav:"key_group_id,omitempty" parquet:"name=key_group_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"key_group_id,omitempty" diff:"key_group_id"`
	KeyPairIds *KeyPairIds `bson:"key_pair_ids,omitempty" ion:"key_pair_ids" dynamodbav:"key_pair_ids,omitempty" parquet:"name=key_pair_ids" json:"key_pair_ids,omitempty" diff:"key_pair_ids"`
}

type KeyPairIds struct {
	Quantity int32    `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []string `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"items,omitempty" diff:"items"`
}

type ActiveTrustedSigners struct {
	Enabled  bool      `bson:"enabled,omitempty" ion:"enabled" dynamodbav:"enabled" parquet:"name=enabled,type=BOOLEAN" json:"enabled,omitempty" diff:"enabled"`
	Quantity int32     `bson:"quantity,omitempty" ion:"quantity" dynamodbav:"quantity,omitempty" parquet:"name=quantity,type=INT32" json:"quantity,omitempty" diff:"quantity"`
	Items    []*Signer `bson:"items,omitempty" ion:"items" dynamodbav:"items,omitempty" parquet:"name=items,type=MAP,convertedtype=LIST" json:"items,omitempty" diff:"items"`
}

type Signer struct {
	AwsAccountNumber string      `bson:"aws_account_number,omitempty" ion:"aws_account_number" dynamodbav:"aws_account_number,omitempty" parquet:"name=aws_account_number,type=BYTE_ARRAY,convertedtype=UTF8" json:"aws_account_number,omitempty" diff:"aws_account_number"`
	KeyPairIds       *KeyPairIds `bson:"key_pair_ids,omitempty" ion:"key_pair_ids" dynamodbav:"key_pair_ids,omitempty" parquet:"name=key_pair_ids" json:"key_pair_ids,omitempty" diff:"key_pair_ids"`
}

type AliasICPRecordal struct {
	CNAME             string `bson:"cname,omitempty" ion:"cname" dynamodbav:"cname,omitempty" parquet:"name=cname,type=BYTE_ARRAY,convertedtype=UTF8" json:"cname,omitempty" diff:"cname"`
	ICPRecordalStatus string `bson:"icp_recordal_status,omitempty" ion:"icp_recordal_status" dynamodbav:"icp_recordal_status,omitempty" parquet:"name=icp_recordal_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"icp_recordal_status,omitempty" diff:"icp_recordal_status"`
}

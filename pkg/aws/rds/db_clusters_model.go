// AUTOGENERATED, DO NOT EDIT
package rds

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"sync"
)

var customDBClusterModelPostprocessingFuncs []func(ctx context.Context, client *rds.Client, cfg aws.Config, x *DBClusterModel) = []func(ctx context.Context, client *rds.Client, cfg aws.Config, x *DBClusterModel){}
var customDBClusterModelFuncsLock sync.Mutex

func registerCustomDBClusterModelPostprocessingFunc(f func(ctx context.Context, client *rds.Client, cfg aws.Config, x *DBClusterModel)) {
	customDBClusterModelFuncsLock.Lock()
	defer customDBClusterModelFuncsLock.Unlock()

	customDBClusterModelPostprocessingFuncs = append(customDBClusterModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("db_clusters", DBClusterDataSource)
}

type DBClusterModel struct {
	ActivityStreamKinesisStreamName  string                         `parquet:"name=activity_stream_kinesis_stream_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	ActivityStreamKmsKeyId           string                         `parquet:"name=activity_stream_kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	ActivityStreamMode               string                         `parquet:"name=activity_stream_mode,type=BYTE_ARRAY,convertedtype=UTF8"`
	ActivityStreamStatus             string                         `parquet:"name=activity_stream_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	AllocatedStorage                 int32                          `parquet:"name=allocated_storage,type=INT32"`
	AssociatedRoles                  []*DBClusterRoleDBClusterModel `parquet:"name=associated_roles,type=MAP,convertedtype=LIST"`
	AutomaticRestartTime             *time.Time
	AvailabilityZones                []string `parquet:"name=availability_zones,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	BacktrackConsumedChangeRecords   int64    `parquet:"name=backtrack_consumed_change_records,type=INT64"`
	BacktrackWindow                  int64    `parquet:"name=backtrack_window,type=INT64"`
	BackupRetentionPeriod            int32    `parquet:"name=backup_retention_period,type=INT32"`
	Capacity                         int32    `parquet:"name=capacity,type=INT32"`
	CharacterSetName                 string   `parquet:"name=character_set_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	CloneGroupId                     string   `parquet:"name=clone_group_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	ClusterCreateTime                *time.Time
	CopyTagsToSnapshot               bool                                        `parquet:"name=copy_tags_to_snapshot,type=BOOLEAN"`
	CrossAccountClone                bool                                        `parquet:"name=cross_account_clone,type=BOOLEAN"`
	CustomEndpoints                  []string                                    `parquet:"name=custom_endpoints,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	DBClusterArn                     string                                      `parquet:"name=db_cluster_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	DBClusterIdentifier              string                                      `parquet:"name=db_cluster_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBClusterMembers                 []*DBClusterMemberDBClusterModel            `parquet:"name=db_cluster_members,type=MAP,convertedtype=LIST"`
	DBClusterOptionGroupMemberships  []*DBClusterOptionGroupStatusDBClusterModel `parquet:"name=db_cluster_option_group_memberships,type=MAP,convertedtype=LIST"`
	DBClusterParameterGroup          string                                      `parquet:"name=db_cluster_parameter_group,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBSubnetGroup                    string                                      `parquet:"name=db_subnet_group,type=BYTE_ARRAY,convertedtype=UTF8"`
	DatabaseName                     string                                      `parquet:"name=database_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	DbClusterResourceId              string                                      `parquet:"name=db_cluster_resource_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	DeletionProtection               bool                                        `parquet:"name=deletion_protection,type=BOOLEAN"`
	DomainMemberships                []*DomainMembershipDBClusterModel           `parquet:"name=domain_memberships,type=MAP,convertedtype=LIST"`
	EarliestBacktrackTime            *time.Time
	EarliestRestorableTime           *time.Time
	EnabledCloudwatchLogsExports     []string `parquet:"name=enabled_cloudwatch_logs_exports,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	Endpoint                         string   `parquet:"name=endpoint,type=BYTE_ARRAY,convertedtype=UTF8"`
	Engine                           string   `parquet:"name=engine,type=BYTE_ARRAY,convertedtype=UTF8"`
	EngineMode                       string   `parquet:"name=engine_mode,type=BYTE_ARRAY,convertedtype=UTF8"`
	EngineVersion                    string   `parquet:"name=engine_version,type=BYTE_ARRAY,convertedtype=UTF8"`
	GlobalWriteForwardingRequested   bool     `parquet:"name=global_write_forwarding_requested,type=BOOLEAN"`
	GlobalWriteForwardingStatus      string   `parquet:"name=global_write_forwarding_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	HostedZoneId                     string   `parquet:"name=hosted_zone_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	HttpEndpointEnabled              bool     `parquet:"name=http_endpoint_enabled,type=BOOLEAN"`
	IAMDatabaseAuthenticationEnabled bool     `parquet:"name=iam_database_authentication_enabled,type=BOOLEAN"`
	KmsKeyId                         string   `parquet:"name=kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	LatestRestorableTime             *time.Time
	MasterUsername                   string                                      `parquet:"name=master_username,type=BYTE_ARRAY,convertedtype=UTF8"`
	MultiAZ                          bool                                        `parquet:"name=multi_az,type=BOOLEAN"`
	PendingModifiedValues            *ClusterPendingModifiedValuesDBClusterModel `parquet:"name=pending_modified_values"`
	PercentProgress                  string                                      `parquet:"name=percent_progress,type=BYTE_ARRAY,convertedtype=UTF8"`
	Port                             int32                                       `parquet:"name=port,type=INT32"`
	PreferredBackupWindow            string                                      `parquet:"name=preferred_backup_window,type=BYTE_ARRAY,convertedtype=UTF8"`
	PreferredMaintenanceWindow       string                                      `parquet:"name=preferred_maintenance_window,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReadReplicaIdentifiers           []string                                    `parquet:"name=read_replica_identifiers,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	ReaderEndpoint                   string                                      `parquet:"name=reader_endpoint,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReplicationSourceIdentifier      string                                      `parquet:"name=replication_source_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	ScalingConfigurationInfo         *ScalingConfigurationInfoDBClusterModel     `parquet:"name=scaling_configuration_info"`
	Status                           string                                      `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
	StorageEncrypted                 bool                                        `parquet:"name=storage_encrypted,type=BOOLEAN"`
	TagList                          []*TagDBClusterModel
	VpcSecurityGroups                []*VpcSecurityGroupMembershipDBClusterModel `parquet:"name=vpc_security_groups,type=MAP,convertedtype=LIST"`
	AutomaticRestartTimeMilli        int64                                       `parquet:"name=automatic_restart_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	ClusterCreateTimeMilli           int64                                       `parquet:"name=cluster_create_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	EarliestBacktrackTimeMilli       int64                                       `parquet:"name=earliest_backtrack_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	EarliestRestorableTimeMilli      int64                                       `parquet:"name=earliest_restorable_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	LatestRestorableTimeMilli        int64                                       `parquet:"name=latest_restorable_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	Tags                             map[string]string                           `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	AccountId                        string                                      `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Region                           string                                      `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReportTime                       int64                                       `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type DBClusterRoleDBClusterModel struct {
	FeatureName string `parquet:"name=feature_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	RoleArn     string `parquet:"name=role_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	Status      string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type DBClusterMemberDBClusterModel struct {
	DBClusterParameterGroupStatus string `parquet:"name=db_cluster_parameter_group_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBInstanceIdentifier          string `parquet:"name=db_instance_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	IsClusterWriter               bool   `parquet:"name=is_cluster_writer,type=BOOLEAN"`
	PromotionTier                 int32  `parquet:"name=promotion_tier,type=INT32"`
}

type DBClusterOptionGroupStatusDBClusterModel struct {
	DBClusterOptionGroupName string `parquet:"name=db_cluster_option_group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Status                   string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type DomainMembershipDBClusterModel struct {
	Domain      string `parquet:"name=domain,type=BYTE_ARRAY,convertedtype=UTF8"`
	FQDN        string `parquet:"name=fqdn,type=BYTE_ARRAY,convertedtype=UTF8"`
	IAMRoleName string `parquet:"name=iam_role_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Status      string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ClusterPendingModifiedValuesDBClusterModel struct {
	DBClusterIdentifier              string                                      `parquet:"name=db_cluster_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	EngineVersion                    string                                      `parquet:"name=engine_version,type=BYTE_ARRAY,convertedtype=UTF8"`
	IAMDatabaseAuthenticationEnabled bool                                        `parquet:"name=iam_database_authentication_enabled,type=BOOLEAN"`
	MasterUserPassword               string                                      `parquet:"name=master_user_password,type=BYTE_ARRAY,convertedtype=UTF8"`
	PendingCloudwatchLogsExports     *PendingCloudwatchLogsExportsDBClusterModel `parquet:"name=pending_cloudwatch_logs_exports"`
}

type PendingCloudwatchLogsExportsDBClusterModel struct {
	LogTypesToDisable []string `parquet:"name=log_types_to_disable,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	LogTypesToEnable  []string `parquet:"name=log_types_to_enable,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
}

type ScalingConfigurationInfoDBClusterModel struct {
	AutoPause             bool   `parquet:"name=auto_pause,type=BOOLEAN"`
	MaxCapacity           int32  `parquet:"name=max_capacity,type=INT32"`
	MinCapacity           int32  `parquet:"name=min_capacity,type=INT32"`
	SecondsUntilAutoPause int32  `parquet:"name=seconds_until_auto_pause,type=INT32"`
	TimeoutAction         string `parquet:"name=timeout_action,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TagDBClusterModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type VpcSecurityGroupMembershipDBClusterModel struct {
	Status             string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
	VpcSecurityGroupId string `parquet:"name=vpc_security_group_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func DBClusterDataSource(ctx context.Context, client *rds.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(DBClusterModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := rds.NewDescribeDBClustersPaginator(client, &rds.DescribeDBClustersInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeDBClusters")
			return err
		}

		for _, var0 := range output.DBClusters {

			model := new(DBClusterModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.TagList)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customDBClusterModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing DBClusterModel: %v", err))
			}
		}

	}

	return nil
}

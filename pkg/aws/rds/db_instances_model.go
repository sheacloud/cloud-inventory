// AUTOGENERATED, DO NOT EDIT
package rds

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"sync"
)

var customDBInstanceModelPostprocessingFuncs []func(ctx context.Context, client *rds.Client, cfg aws.Config, x *DBInstanceModel) = []func(ctx context.Context, client *rds.Client, cfg aws.Config, x *DBInstanceModel){}
var customDBInstanceModelFuncsLock sync.Mutex

func registerCustomDBInstanceModelPostprocessingFunc(f func(ctx context.Context, client *rds.Client, cfg aws.Config, x *DBInstanceModel)) {
	customDBInstanceModelFuncsLock.Lock()
	defer customDBInstanceModelFuncsLock.Unlock()

	customDBInstanceModelPostprocessingFuncs = append(customDBInstanceModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("db_instances", DBInstanceDataSource)
}

type DBInstanceModel struct {
	ActivityStreamEngineNativeAuditFieldsIncluded bool                             `parquet:"name=activity_stream_engine_native_audit_fields_included,type=BOOLEAN"`
	ActivityStreamKinesisStreamName               string                           `parquet:"name=activity_stream_kinesis_stream_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	ActivityStreamKmsKeyId                        string                           `parquet:"name=activity_stream_kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	ActivityStreamMode                            string                           `parquet:"name=activity_stream_mode,type=BYTE_ARRAY,convertedtype=UTF8"`
	ActivityStreamStatus                          string                           `parquet:"name=activity_stream_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	AllocatedStorage                              int32                            `parquet:"name=allocated_storage,type=INT32"`
	AssociatedRoles                               []*DBInstanceRoleDBInstanceModel `parquet:"name=associated_roles,type=MAP,convertedtype=LIST"`
	AutoMinorVersionUpgrade                       bool                             `parquet:"name=auto_minor_version_upgrade,type=BOOLEAN"`
	AutomaticRestartTime                          *time.Time
	AvailabilityZone                              string                                                  `parquet:"name=availability_zone,type=BYTE_ARRAY,convertedtype=UTF8"`
	AwsBackupRecoveryPointArn                     string                                                  `parquet:"name=aws_backup_recovery_point_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	BackupRetentionPeriod                         int32                                                   `parquet:"name=backup_retention_period,type=INT32"`
	CACertificateIdentifier                       string                                                  `parquet:"name=ca_certificate_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	CharacterSetName                              string                                                  `parquet:"name=character_set_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	CopyTagsToSnapshot                            bool                                                    `parquet:"name=copy_tags_to_snapshot,type=BOOLEAN"`
	CustomerOwnedIpEnabled                        bool                                                    `parquet:"name=customer_owned_ip_enabled,type=BOOLEAN"`
	DBClusterIdentifier                           string                                                  `parquet:"name=db_cluster_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBInstanceArn                                 string                                                  `parquet:"name=db_instance_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	DBInstanceAutomatedBackupsReplications        []*DBInstanceAutomatedBackupsReplicationDBInstanceModel `parquet:"name=db_instance_automated_backups_replications,type=MAP,convertedtype=LIST"`
	DBInstanceClass                               string                                                  `parquet:"name=db_instance_class,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBInstanceIdentifier                          string                                                  `parquet:"name=db_instance_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBInstanceStatus                              string                                                  `parquet:"name=db_instance_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBName                                        string                                                  `parquet:"name=db_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBParameterGroups                             []*DBParameterGroupStatusDBInstanceModel                `parquet:"name=db_parameter_groups,type=MAP,convertedtype=LIST"`
	DBSecurityGroups                              []*DBSecurityGroupMembershipDBInstanceModel             `parquet:"name=db_security_groups,type=MAP,convertedtype=LIST"`
	DBSubnetGroup                                 *DBSubnetGroupDBInstanceModel                           `parquet:"name=db_subnet_group"`
	DbInstancePort                                int32                                                   `parquet:"name=db_instance_port,type=INT32"`
	DbiResourceId                                 string                                                  `parquet:"name=dbi_resource_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	DeletionProtection                            bool                                                    `parquet:"name=deletion_protection,type=BOOLEAN"`
	DomainMemberships                             []*DomainMembershipDBInstanceModel                      `parquet:"name=domain_memberships,type=MAP,convertedtype=LIST"`
	EnabledCloudwatchLogsExports                  []string                                                `parquet:"name=enabled_cloudwatch_logs_exports,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	Endpoint                                      *EndpointDBInstanceModel                                `parquet:"name=endpoint"`
	Engine                                        string                                                  `parquet:"name=engine,type=BYTE_ARRAY,convertedtype=UTF8"`
	EngineVersion                                 string                                                  `parquet:"name=engine_version,type=BYTE_ARRAY,convertedtype=UTF8"`
	EnhancedMonitoringResourceArn                 string                                                  `parquet:"name=enhanced_monitoring_resource_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	IAMDatabaseAuthenticationEnabled              bool                                                    `parquet:"name=iam_database_authentication_enabled,type=BOOLEAN"`
	InstanceCreateTime                            *time.Time
	Iops                                          int32  `parquet:"name=iops,type=INT32"`
	KmsKeyId                                      string `parquet:"name=kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	LatestRestorableTime                          *time.Time
	LicenseModel                                  string                                  `parquet:"name=license_model,type=BYTE_ARRAY,convertedtype=UTF8"`
	ListenerEndpoint                              *EndpointDBInstanceModel                `parquet:"name=listener_endpoint"`
	MasterUsername                                string                                  `parquet:"name=master_username,type=BYTE_ARRAY,convertedtype=UTF8"`
	MaxAllocatedStorage                           int32                                   `parquet:"name=max_allocated_storage,type=INT32"`
	MonitoringInterval                            int32                                   `parquet:"name=monitoring_interval,type=INT32"`
	MonitoringRoleArn                             string                                  `parquet:"name=monitoring_role_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	MultiAZ                                       bool                                    `parquet:"name=multi_az,type=BOOLEAN"`
	NcharCharacterSetName                         string                                  `parquet:"name=nchar_character_set_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	OptionGroupMemberships                        []*OptionGroupMembershipDBInstanceModel `parquet:"name=option_group_memberships,type=MAP,convertedtype=LIST"`
	PendingModifiedValues                         *PendingModifiedValuesDBInstanceModel   `parquet:"name=pending_modified_values"`
	PerformanceInsightsEnabled                    bool                                    `parquet:"name=performance_insights_enabled,type=BOOLEAN"`
	PerformanceInsightsKMSKeyId                   string                                  `parquet:"name=performance_insights_kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	PerformanceInsightsRetentionPeriod            int32                                   `parquet:"name=performance_insights_retention_period,type=INT32"`
	PreferredBackupWindow                         string                                  `parquet:"name=preferred_backup_window,type=BYTE_ARRAY,convertedtype=UTF8"`
	PreferredMaintenanceWindow                    string                                  `parquet:"name=preferred_maintenance_window,type=BYTE_ARRAY,convertedtype=UTF8"`
	ProcessorFeatures                             []*ProcessorFeatureDBInstanceModel      `parquet:"name=processor_features,type=MAP,convertedtype=LIST"`
	PromotionTier                                 int32                                   `parquet:"name=promotion_tier,type=INT32"`
	PubliclyAccessible                            bool                                    `parquet:"name=publicly_accessible,type=BOOLEAN"`
	ReadReplicaDBClusterIdentifiers               []string                                `parquet:"name=read_replica_db_cluster_identifiers,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	ReadReplicaDBInstanceIdentifiers              []string                                `parquet:"name=read_replica_db_instance_identifiers,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	ReadReplicaSourceDBInstanceIdentifier         string                                  `parquet:"name=read_replica_source_db_instance_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReplicaMode                                   string                                  `parquet:"name=replica_mode,type=BYTE_ARRAY,convertedtype=UTF8"`
	SecondaryAvailabilityZone                     string                                  `parquet:"name=secondary_availability_zone,type=BYTE_ARRAY,convertedtype=UTF8"`
	StatusInfos                                   []*DBInstanceStatusInfoDBInstanceModel  `parquet:"name=status_infos,type=MAP,convertedtype=LIST"`
	StorageEncrypted                              bool                                    `parquet:"name=storage_encrypted,type=BOOLEAN"`
	StorageType                                   string                                  `parquet:"name=storage_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	TagList                                       []*TagDBInstanceModel
	TdeCredentialArn                              string                                       `parquet:"name=tde_credential_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	Timezone                                      string                                       `parquet:"name=timezone,type=BYTE_ARRAY,convertedtype=UTF8"`
	VpcSecurityGroups                             []*VpcSecurityGroupMembershipDBInstanceModel `parquet:"name=vpc_security_groups,type=MAP,convertedtype=LIST"`
	AutomaticRestartTimeMilli                     int64                                        `parquet:"name=automatic_restart_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	InstanceCreateTimeMilli                       int64                                        `parquet:"name=instance_create_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	LatestRestorableTimeMilli                     int64                                        `parquet:"name=latest_restorable_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	Tags                                          map[string]string                            `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	AccountId                                     string                                       `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Region                                        string                                       `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReportTime                                    int64                                        `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type DBInstanceRoleDBInstanceModel struct {
	FeatureName string `parquet:"name=feature_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	RoleArn     string `parquet:"name=role_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	Status      string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type DBInstanceAutomatedBackupsReplicationDBInstanceModel struct {
	DBInstanceAutomatedBackupsArn string `parquet:"name=db_instance_automated_backups_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type DBParameterGroupStatusDBInstanceModel struct {
	DBParameterGroupName string `parquet:"name=db_parameter_group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	ParameterApplyStatus string `parquet:"name=parameter_apply_status,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type DBSecurityGroupMembershipDBInstanceModel struct {
	DBSecurityGroupName string `parquet:"name=db_security_group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Status              string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type DBSubnetGroupDBInstanceModel struct {
	DBSubnetGroupArn         string                   `parquet:"name=db_subnet_group_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBSubnetGroupDescription string                   `parquet:"name=db_subnet_group_description,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBSubnetGroupName        string                   `parquet:"name=db_subnet_group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	SubnetGroupStatus        string                   `parquet:"name=subnet_group_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	Subnets                  []*SubnetDBInstanceModel `parquet:"name=subnets,type=MAP,convertedtype=LIST"`
	VpcId                    string                   `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type SubnetDBInstanceModel struct {
	SubnetAvailabilityZone *AvailabilityZoneDBInstanceModel `parquet:"name=subnet_availability_zone"`
	SubnetIdentifier       string                           `parquet:"name=subnet_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	SubnetOutpost          *OutpostDBInstanceModel          `parquet:"name=subnet_outpost"`
	SubnetStatus           string                           `parquet:"name=subnet_status,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type AvailabilityZoneDBInstanceModel struct {
	Name string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type OutpostDBInstanceModel struct {
	Arn string `parquet:"name=arn,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type DomainMembershipDBInstanceModel struct {
	Domain      string `parquet:"name=domain,type=BYTE_ARRAY,convertedtype=UTF8"`
	FQDN        string `parquet:"name=fqdn,type=BYTE_ARRAY,convertedtype=UTF8"`
	IAMRoleName string `parquet:"name=iam_role_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Status      string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type EndpointDBInstanceModel struct {
	Address      string `parquet:"name=address,type=BYTE_ARRAY,convertedtype=UTF8"`
	HostedZoneId string `parquet:"name=hosted_zone_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Port         int32  `parquet:"name=port,type=INT32"`
}

type OptionGroupMembershipDBInstanceModel struct {
	OptionGroupName string `parquet:"name=option_group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Status          string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type PendingModifiedValuesDBInstanceModel struct {
	AllocatedStorage                 int32                                        `parquet:"name=allocated_storage,type=INT32"`
	BackupRetentionPeriod            int32                                        `parquet:"name=backup_retention_period,type=INT32"`
	CACertificateIdentifier          string                                       `parquet:"name=ca_certificate_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBInstanceClass                  string                                       `parquet:"name=db_instance_class,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBInstanceIdentifier             string                                       `parquet:"name=db_instance_identifier,type=BYTE_ARRAY,convertedtype=UTF8"`
	DBSubnetGroupName                string                                       `parquet:"name=db_subnet_group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	EngineVersion                    string                                       `parquet:"name=engine_version,type=BYTE_ARRAY,convertedtype=UTF8"`
	IAMDatabaseAuthenticationEnabled bool                                         `parquet:"name=iam_database_authentication_enabled,type=BOOLEAN"`
	Iops                             int32                                        `parquet:"name=iops,type=INT32"`
	LicenseModel                     string                                       `parquet:"name=license_model,type=BYTE_ARRAY,convertedtype=UTF8"`
	MasterUserPassword               string                                       `parquet:"name=master_user_password,type=BYTE_ARRAY,convertedtype=UTF8"`
	MultiAZ                          bool                                         `parquet:"name=multi_az,type=BOOLEAN"`
	PendingCloudwatchLogsExports     *PendingCloudwatchLogsExportsDBInstanceModel `parquet:"name=pending_cloudwatch_logs_exports"`
	Port                             int32                                        `parquet:"name=port,type=INT32"`
	ProcessorFeatures                []*ProcessorFeatureDBInstanceModel           `parquet:"name=processor_features,type=MAP,convertedtype=LIST"`
	StorageType                      string                                       `parquet:"name=storage_type,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type PendingCloudwatchLogsExportsDBInstanceModel struct {
	LogTypesToDisable []string `parquet:"name=log_types_to_disable,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	LogTypesToEnable  []string `parquet:"name=log_types_to_enable,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
}

type ProcessorFeatureDBInstanceModel struct {
	Name  string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type DBInstanceStatusInfoDBInstanceModel struct {
	Message    string `parquet:"name=message,type=BYTE_ARRAY,convertedtype=UTF8"`
	Normal     bool   `parquet:"name=normal,type=BOOLEAN"`
	Status     string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
	StatusType string `parquet:"name=status_type,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TagDBInstanceModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type VpcSecurityGroupMembershipDBInstanceModel struct {
	Status             string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
	VpcSecurityGroupId string `parquet:"name=vpc_security_group_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func DBInstanceDataSource(ctx context.Context, client *rds.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(DBInstanceModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := rds.NewDescribeDBInstancesPaginator(client, &rds.DescribeDBInstancesInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeDBInstances")
			return err
		}

		for _, var0 := range output.DBInstances {

			model := new(DBInstanceModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.TagList)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customDBInstanceModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing DBInstanceModel: %v", err))
			}
		}

	}

	return nil
}

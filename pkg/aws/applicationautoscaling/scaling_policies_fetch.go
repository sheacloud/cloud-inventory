//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_fetching_file.tmpl
package applicationautoscaling

import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling/types"
	"github.com/google/uuid"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/pkg/aws"
	"github.com/sheacloud/cloud-inventory/pkg/meta"
)

func FetchScalingPolicies(ctx context.Context, params *aws.AwsFetchInput) ([]*ScalingPolicy, *aws.AwsFetchOutputMetadata) {
	fetchingErrors := []error{}
	var fetchedResources int
	var failedResources int
	inventoryResults := &meta.InventoryResults{
		Cloud:      "aws",
		Service:    "applicationautoscaling",
		Resource:   "scaling_policies",
		AccountId:  params.AccountId,
		Region:     params.Region,
		ReportTime: params.ReportTime,
	}
	resources := []*ScalingPolicy{}

	awsClient := params.RegionalClients[params.Region]
	client := awsClient.ApplicationAutoScaling()

	// iterate over each service namespace
	for _, namespace := range types.ServiceNamespaceEcs.Values() {

		paginator := applicationautoscaling.NewDescribeScalingPoliciesPaginator(client, &applicationautoscaling.DescribeScalingPoliciesInput{
			ServiceNamespace: namespace,
		})

		for paginator.HasMorePages() {
			output, err := paginator.NextPage(ctx)

			if err != nil {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling DescribeScalingPolicies in %s/%s: %w", params.AccountId, params.Region, err))
				break
			}

			for _, object := range output.ScalingPolicies {

				model := new(ScalingPolicy)
				copier.CopyWithOption(&model, &object, aws.CopyOption)

				model.AccountId = params.AccountId
				model.Region = params.Region
				model.ReportTime = params.ReportTime
				model.InventoryUUID = uuid.New().String()

				resources = append(resources, model)
				fetchedResources++
			}

		}
	}

	inventoryResults.FetchedResources = fetchedResources
	inventoryResults.FailedResources = failedResources
	inventoryResults.HadErrors = len(fetchingErrors) > 0

	return resources, &aws.AwsFetchOutputMetadata{
		FetchingErrors:   fetchingErrors,
		InventoryResults: inventoryResults,
	}
}

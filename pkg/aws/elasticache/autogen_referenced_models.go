//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_referenced_resource_file.tmpl
package elasticache

type CacheNode struct {
	CacheNodeCreateTime      int64     `bson:"cache_node_create_time,omitempty" ion:"cache_node_create_time" dynamodbav:"cache_node_create_time,omitempty" parquet:"name=cache_node_create_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"cache_node_create_time,omitempty" diff:"cache_node_create_time"`
	CacheNodeId              string    `bson:"cache_node_id,omitempty" ion:"cache_node_id" dynamodbav:"cache_node_id,omitempty" parquet:"name=cache_node_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_node_id,omitempty" diff:"cache_node_id"`
	CacheNodeStatus          string    `bson:"cache_node_status,omitempty" ion:"cache_node_status" dynamodbav:"cache_node_status,omitempty" parquet:"name=cache_node_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_node_status,omitempty" diff:"cache_node_status"`
	CustomerAvailabilityZone string    `bson:"customer_availability_zone,omitempty" ion:"customer_availability_zone" dynamodbav:"customer_availability_zone,omitempty" parquet:"name=customer_availability_zone,type=BYTE_ARRAY,convertedtype=UTF8" json:"customer_availability_zone,omitempty" diff:"customer_availability_zone"`
	CustomerOutpostArn       string    `bson:"customer_outpost_arn,omitempty" ion:"customer_outpost_arn" dynamodbav:"customer_outpost_arn,omitempty" parquet:"name=customer_outpost_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"customer_outpost_arn,omitempty" diff:"customer_outpost_arn"`
	Endpoint                 *Endpoint `bson:"endpoint,omitempty" ion:"endpoint" dynamodbav:"endpoint,omitempty" parquet:"name=endpoint" json:"endpoint,omitempty" diff:"endpoint"`
	ParameterGroupStatus     string    `bson:"parameter_group_status,omitempty" ion:"parameter_group_status" dynamodbav:"parameter_group_status,omitempty" parquet:"name=parameter_group_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"parameter_group_status,omitempty" diff:"parameter_group_status"`
	SourceCacheNodeId        string    `bson:"source_cache_node_id,omitempty" ion:"source_cache_node_id" dynamodbav:"source_cache_node_id,omitempty" parquet:"name=source_cache_node_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"source_cache_node_id,omitempty" diff:"source_cache_node_id"`
}

type Endpoint struct {
	Address string `bson:"address,omitempty" ion:"address" dynamodbav:"address,omitempty" parquet:"name=address,type=BYTE_ARRAY,convertedtype=UTF8" json:"address,omitempty" diff:"address"`
	Port    int32  `bson:"port,omitempty" ion:"port" dynamodbav:"port,omitempty" parquet:"name=port,type=INT32" json:"port,omitempty" diff:"port"`
}

type CacheParameterGroupStatus struct {
	CacheNodeIdsToReboot    []string `bson:"cache_node_ids_to_reboot,omitempty" ion:"cache_node_ids_to_reboot" dynamodbav:"cache_node_ids_to_reboot,omitempty" parquet:"name=cache_node_ids_to_reboot,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"cache_node_ids_to_reboot,omitempty" diff:"cache_node_ids_to_reboot"`
	CacheParameterGroupName string   `bson:"cache_parameter_group_name,omitempty" ion:"cache_parameter_group_name" dynamodbav:"cache_parameter_group_name,omitempty" parquet:"name=cache_parameter_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_parameter_group_name,omitempty" diff:"cache_parameter_group_name"`
	ParameterApplyStatus    string   `bson:"parameter_apply_status,omitempty" ion:"parameter_apply_status" dynamodbav:"parameter_apply_status,omitempty" parquet:"name=parameter_apply_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"parameter_apply_status,omitempty" diff:"parameter_apply_status"`
}

type CacheSecurityGroupMembership struct {
	CacheSecurityGroupName string `bson:"cache_security_group_name,omitempty" ion:"cache_security_group_name" dynamodbav:"cache_security_group_name,omitempty" parquet:"name=cache_security_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_security_group_name,omitempty" diff:"cache_security_group_name"`
	Status                 string `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
}

type LogDeliveryConfiguration struct {
	DestinationDetails *DestinationDetails `bson:"destination_details,omitempty" ion:"destination_details" dynamodbav:"destination_details,omitempty" parquet:"name=destination_details" json:"destination_details,omitempty" diff:"destination_details"`
	DestinationType    string              `bson:"destination_type,omitempty" ion:"destination_type" dynamodbav:"destination_type,omitempty" parquet:"name=destination_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"destination_type,omitempty" diff:"destination_type"`
	LogFormat          string              `bson:"log_format,omitempty" ion:"log_format" dynamodbav:"log_format,omitempty" parquet:"name=log_format,type=BYTE_ARRAY,convertedtype=UTF8" json:"log_format,omitempty" diff:"log_format"`
	LogType            string              `bson:"log_type,omitempty" ion:"log_type" dynamodbav:"log_type,omitempty" parquet:"name=log_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"log_type,omitempty" diff:"log_type"`
	Message            string              `bson:"message,omitempty" ion:"message" dynamodbav:"message,omitempty" parquet:"name=message,type=BYTE_ARRAY,convertedtype=UTF8" json:"message,omitempty" diff:"message"`
	Status             string              `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
}

type DestinationDetails struct {
	CloudWatchLogsDetails  *CloudWatchLogsDestinationDetails  `bson:"cloud_watch_logs_details,omitempty" ion:"cloud_watch_logs_details" dynamodbav:"cloud_watch_logs_details,omitempty" parquet:"name=cloud_watch_logs_details" json:"cloud_watch_logs_details,omitempty" diff:"cloud_watch_logs_details"`
	KinesisFirehoseDetails *KinesisFirehoseDestinationDetails `bson:"kinesis_firehose_details,omitempty" ion:"kinesis_firehose_details" dynamodbav:"kinesis_firehose_details,omitempty" parquet:"name=kinesis_firehose_details" json:"kinesis_firehose_details,omitempty" diff:"kinesis_firehose_details"`
}

type CloudWatchLogsDestinationDetails struct {
	LogGroup string `bson:"log_group,omitempty" ion:"log_group" dynamodbav:"log_group,omitempty" parquet:"name=log_group,type=BYTE_ARRAY,convertedtype=UTF8" json:"log_group,omitempty" diff:"log_group"`
}

type KinesisFirehoseDestinationDetails struct {
	DeliveryStream string `bson:"delivery_stream,omitempty" ion:"delivery_stream" dynamodbav:"delivery_stream,omitempty" parquet:"name=delivery_stream,type=BYTE_ARRAY,convertedtype=UTF8" json:"delivery_stream,omitempty" diff:"delivery_stream"`
}

type NotificationConfiguration struct {
	TopicArn    string `bson:"topic_arn,omitempty" ion:"topic_arn" dynamodbav:"topic_arn,omitempty" parquet:"name=topic_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"topic_arn,omitempty" diff:"topic_arn"`
	TopicStatus string `bson:"topic_status,omitempty" ion:"topic_status" dynamodbav:"topic_status,omitempty" parquet:"name=topic_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"topic_status,omitempty" diff:"topic_status"`
}

type PendingModifiedValues struct {
	AuthTokenStatus           string                             `bson:"auth_token_status,omitempty" ion:"auth_token_status" dynamodbav:"auth_token_status,omitempty" parquet:"name=auth_token_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"auth_token_status,omitempty" diff:"auth_token_status"`
	CacheNodeIdsToRemove      []string                           `bson:"cache_node_ids_to_remove,omitempty" ion:"cache_node_ids_to_remove" dynamodbav:"cache_node_ids_to_remove,omitempty" parquet:"name=cache_node_ids_to_remove,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"cache_node_ids_to_remove,omitempty" diff:"cache_node_ids_to_remove"`
	CacheNodeType             string                             `bson:"cache_node_type,omitempty" ion:"cache_node_type" dynamodbav:"cache_node_type,omitempty" parquet:"name=cache_node_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_node_type,omitempty" diff:"cache_node_type"`
	EngineVersion             string                             `bson:"engine_version,omitempty" ion:"engine_version" dynamodbav:"engine_version,omitempty" parquet:"name=engine_version,type=BYTE_ARRAY,convertedtype=UTF8" json:"engine_version,omitempty" diff:"engine_version"`
	LogDeliveryConfigurations []*PendingLogDeliveryConfiguration `bson:"log_delivery_configurations,omitempty" ion:"log_delivery_configurations" dynamodbav:"log_delivery_configurations,omitempty" parquet:"name=log_delivery_configurations,type=MAP,convertedtype=LIST" json:"log_delivery_configurations,omitempty" diff:"log_delivery_configurations"`
	NumCacheNodes             int32                              `bson:"num_cache_nodes,omitempty" ion:"num_cache_nodes" dynamodbav:"num_cache_nodes,omitempty" parquet:"name=num_cache_nodes,type=INT32" json:"num_cache_nodes,omitempty" diff:"num_cache_nodes"`
}

type PendingLogDeliveryConfiguration struct {
	DestinationDetails *DestinationDetails `bson:"destination_details,omitempty" ion:"destination_details" dynamodbav:"destination_details,omitempty" parquet:"name=destination_details" json:"destination_details,omitempty" diff:"destination_details"`
	DestinationType    string              `bson:"destination_type,omitempty" ion:"destination_type" dynamodbav:"destination_type,omitempty" parquet:"name=destination_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"destination_type,omitempty" diff:"destination_type"`
	LogFormat          string              `bson:"log_format,omitempty" ion:"log_format" dynamodbav:"log_format,omitempty" parquet:"name=log_format,type=BYTE_ARRAY,convertedtype=UTF8" json:"log_format,omitempty" diff:"log_format"`
	LogType            string              `bson:"log_type,omitempty" ion:"log_type" dynamodbav:"log_type,omitempty" parquet:"name=log_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"log_type,omitempty" diff:"log_type"`
}

type SecurityGroupMembership struct {
	SecurityGroupId string `bson:"security_group_id,omitempty" ion:"security_group_id" dynamodbav:"security_group_id,omitempty" parquet:"name=security_group_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"security_group_id,omitempty" diff:"security_group_id"`
	Status          string `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
}

//AUTOGENERATED CODE DO NOT EDIT
package elasticloadbalancingv2

type TargetGroup struct {
	HealthCheckEnabled         bool                       `bson:"health_check_enabled,omitempty" ion:"health_check_enabled" dynamodbav:"health_check_enabled" parquet:"name=health_check_enabled,type=BOOLEAN" json:"health_check_enabled,omitempty" diff:"health_check_enabled"`
	HealthCheckIntervalSeconds int32                      `bson:"health_check_interval_seconds,omitempty" ion:"health_check_interval_seconds" dynamodbav:"health_check_interval_seconds,omitempty" parquet:"name=health_check_interval_seconds,type=INT32" json:"health_check_interval_seconds,omitempty" diff:"health_check_interval_seconds"`
	HealthCheckPath            string                     `bson:"health_check_path,omitempty" ion:"health_check_path" dynamodbav:"health_check_path,omitempty" parquet:"name=health_check_path,type=BYTE_ARRAY,convertedtype=UTF8" json:"health_check_path,omitempty" diff:"health_check_path"`
	HealthCheckPort            string                     `bson:"health_check_port,omitempty" ion:"health_check_port" dynamodbav:"health_check_port,omitempty" parquet:"name=health_check_port,type=BYTE_ARRAY,convertedtype=UTF8" json:"health_check_port,omitempty" diff:"health_check_port"`
	HealthCheckProtocol        string                     `bson:"health_check_protocol,omitempty" ion:"health_check_protocol" dynamodbav:"health_check_protocol,omitempty" parquet:"name=health_check_protocol,type=BYTE_ARRAY,convertedtype=UTF8" json:"health_check_protocol,omitempty" diff:"health_check_protocol"`
	HealthCheckTimeoutSeconds  int32                      `bson:"health_check_timeout_seconds,omitempty" ion:"health_check_timeout_seconds" dynamodbav:"health_check_timeout_seconds,omitempty" parquet:"name=health_check_timeout_seconds,type=INT32" json:"health_check_timeout_seconds,omitempty" diff:"health_check_timeout_seconds"`
	HealthyThresholdCount      int32                      `bson:"healthy_threshold_count,omitempty" ion:"healthy_threshold_count" dynamodbav:"healthy_threshold_count,omitempty" parquet:"name=healthy_threshold_count,type=INT32" json:"healthy_threshold_count,omitempty" diff:"healthy_threshold_count"`
	IpAddressType              string                     `bson:"ip_address_type,omitempty" ion:"ip_address_type" dynamodbav:"ip_address_type,omitempty" parquet:"name=ip_address_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"ip_address_type,omitempty" diff:"ip_address_type"`
	LoadBalancerArns           []string                   `bson:"load_balancer_arns,omitempty" ion:"load_balancer_arns" dynamodbav:"load_balancer_arns,omitempty" parquet:"name=load_balancer_arns,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"load_balancer_arns,omitempty" diff:"load_balancer_arns"`
	Matcher                    *Matcher                   `bson:"matcher,omitempty" ion:"matcher" dynamodbav:"matcher,omitempty" parquet:"name=matcher" json:"matcher,omitempty" diff:"matcher"`
	Port                       int32                      `bson:"port,omitempty" ion:"port" dynamodbav:"port,omitempty" parquet:"name=port,type=INT32" json:"port,omitempty" diff:"port"`
	Protocol                   string                     `bson:"protocol,omitempty" ion:"protocol" dynamodbav:"protocol,omitempty" parquet:"name=protocol,type=BYTE_ARRAY,convertedtype=UTF8" json:"protocol,omitempty" diff:"protocol"`
	ProtocolVersion            string                     `bson:"protocol_version,omitempty" ion:"protocol_version" dynamodbav:"protocol_version,omitempty" parquet:"name=protocol_version,type=BYTE_ARRAY,convertedtype=UTF8" json:"protocol_version,omitempty" diff:"protocol_version"`
	TargetGroupArn             string                     `bson:"target_group_arn,omitempty" ion:"target_group_arn" dynamodbav:"target_group_arn,omitempty" parquet:"name=target_group_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"target_group_arn,omitempty" diff:"target_group_arn,identifier"`
	TargetGroupName            string                     `bson:"target_group_name,omitempty" ion:"target_group_name" dynamodbav:"target_group_name,omitempty" parquet:"name=target_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"target_group_name,omitempty" diff:"target_group_name"`
	TargetType                 string                     `bson:"target_type,omitempty" ion:"target_type" dynamodbav:"target_type,omitempty" parquet:"name=target_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"target_type,omitempty" diff:"target_type"`
	UnhealthyThresholdCount    int32                      `bson:"unhealthy_threshold_count,omitempty" ion:"unhealthy_threshold_count" dynamodbav:"unhealthy_threshold_count,omitempty" parquet:"name=unhealthy_threshold_count,type=INT32" json:"unhealthy_threshold_count,omitempty" diff:"unhealthy_threshold_count"`
	VpcId                      string                     `bson:"vpc_id,omitempty" ion:"vpc_id" dynamodbav:"vpc_id,omitempty" parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_id,omitempty" diff:"vpc_id"`
	AccountId                  string                     `bson:"account_id,omitempty" ion:"account_id" dynamodbav:"account_id,omitempty" parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"account_id,omitempty" diff:"account_id"`
	Region                     string                     `bson:"region,omitempty" ion:"region" dynamodbav:"region,omitempty" parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8" json:"region,omitempty" diff:"region"`
	ReportTime                 int64                      `bson:"report_time,omitempty" ion:"report_time" dynamodbav:"report_time,omitempty" parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"report_time,omitempty" diff:"report_time,immutable"`
	InventoryUUID              string                     `bson:"_id,omitempty" ion:"_id" dynamodbav:"_id,omitempty" parquet:"name=inventory_uuid,type=BYTE_ARRAY,convertedtype=UTF8" json:"_id,omitempty" diff:"-"`
	Tags                       map[string]string          `bson:"tags,omitempty" ion:"tags" dynamodbav:"tags,omitempty" parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"tags,omitempty" diff:"tags"`
	Targets                    []*TargetHealthDescription `bson:"targets,omitempty" ion:"targets" dynamodbav:"targets,omitempty" parquet:"name=targets,type=MAP,convertedtype=LIST" json:"targets,omitempty" diff:"targets"`
}

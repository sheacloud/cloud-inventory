// AUTOGENERATED, DO NOT EDIT
package elasticloadbalancingv2

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	"sync"
)

var customLoadBalancerModelPostprocessingFuncs []func(ctx context.Context, client *elasticloadbalancingv2.Client, cfg aws.Config, x *LoadBalancerModel) = []func(ctx context.Context, client *elasticloadbalancingv2.Client, cfg aws.Config, x *LoadBalancerModel){}
var customLoadBalancerModelFuncsLock sync.Mutex

func registerCustomLoadBalancerModelPostprocessingFunc(f func(ctx context.Context, client *elasticloadbalancingv2.Client, cfg aws.Config, x *LoadBalancerModel)) {
	customLoadBalancerModelFuncsLock.Lock()
	defer customLoadBalancerModelFuncsLock.Unlock()

	customLoadBalancerModelPostprocessingFuncs = append(customLoadBalancerModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("load_balancers", LoadBalancerDataSource)
}

type LoadBalancerModel struct {
	AvailabilityZones     []*AvailabilityZoneLoadBalancerModel `parquet:"name=availability_zones,type=MAP,convertedtype=LIST"`
	CanonicalHostedZoneId string                               `parquet:"name=canonical_hosted_zone_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	CreatedTime           *time.Time
	CustomerOwnedIpv4Pool string                              `parquet:"name=customer_owned_ipv4_pool,type=BYTE_ARRAY,convertedtype=UTF8"`
	DNSName               string                              `parquet:"name=dns_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	IpAddressType         string                              `parquet:"name=ip_address_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	LoadBalancerArn       string                              `parquet:"name=load_balancer_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	LoadBalancerName      string                              `parquet:"name=load_balancer_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Scheme                string                              `parquet:"name=scheme,type=BYTE_ARRAY,convertedtype=UTF8"`
	SecurityGroups        []string                            `parquet:"name=security_groups,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	State                 *LoadBalancerStateLoadBalancerModel `parquet:"name=state"`
	Type                  string                              `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8"`
	VpcId                 string                              `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	CreatedTimeMilli      int64                               `parquet:"name=created_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	AccountId             string                              `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Region                string                              `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReportTime            int64                               `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	Tags                  map[string]string                   `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	Listeners             []*ListenerLoadBalancerModel        `parquet:"name=listeners,type=MAP,convertedtype=LIST"`
}

type AvailabilityZoneLoadBalancerModel struct {
	LoadBalancerAddresses []*LoadBalancerAddressLoadBalancerModel `parquet:"name=load_balancer_addresses,type=MAP,convertedtype=LIST"`
	OutpostId             string                                  `parquet:"name=outpost_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	SubnetId              string                                  `parquet:"name=subnet_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	ZoneName              string                                  `parquet:"name=zone_name,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type LoadBalancerAddressLoadBalancerModel struct {
	AllocationId       string `parquet:"name=allocation_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	IPv6Address        string `parquet:"name=i_pv6_address,type=BYTE_ARRAY,convertedtype=UTF8"`
	IpAddress          string `parquet:"name=ip_address,type=BYTE_ARRAY,convertedtype=UTF8"`
	PrivateIPv4Address string `parquet:"name=private_i_pv4_address,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type LoadBalancerStateLoadBalancerModel struct {
	Code   string `parquet:"name=code,type=BYTE_ARRAY,convertedtype=UTF8"`
	Reason string `parquet:"name=reason,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ListenerLoadBalancerModel struct {
	AlpnPolicy      []string                        `parquet:"name=alpn_policy,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	Certificates    []*CertificateLoadBalancerModel `parquet:"name=certificates,type=MAP,convertedtype=LIST"`
	DefaultActions  []*ActionLoadBalancerModel      `parquet:"name=default_actions,type=MAP,convertedtype=LIST"`
	ListenerArn     string                          `parquet:"name=listener_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	LoadBalancerArn string                          `parquet:"name=load_balancer_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	Port            int32                           `parquet:"name=port,type=INT32"`
	Protocol        string                          `parquet:"name=protocol,type=BYTE_ARRAY,convertedtype=UTF8"`
	SslPolicy       string                          `parquet:"name=ssl_policy,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type CertificateLoadBalancerModel struct {
	CertificateArn string `parquet:"name=certificate_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	IsDefault      bool   `parquet:"name=is_default,type=BOOLEAN"`
}

type ActionLoadBalancerModel struct {
	Type                      string                                            `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8"`
	AuthenticateCognitoConfig *AuthenticateCognitoActionConfigLoadBalancerModel `parquet:"name=authenticate_cognito_config"`
	AuthenticateOidcConfig    *AuthenticateOidcActionConfigLoadBalancerModel    `parquet:"name=authenticate_oidc_config"`
	FixedResponseConfig       *FixedResponseActionConfigLoadBalancerModel       `parquet:"name=fixed_response_config"`
	ForwardConfig             *ForwardActionConfigLoadBalancerModel             `parquet:"name=forward_config"`
	Order                     int32                                             `parquet:"name=order,type=INT32"`
	RedirectConfig            *RedirectActionConfigLoadBalancerModel            `parquet:"name=redirect_config"`
	TargetGroupArn            string                                            `parquet:"name=target_group_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type AuthenticateCognitoActionConfigLoadBalancerModel struct {
	UserPoolArn                      string            `parquet:"name=user_pool_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	UserPoolClientId                 string            `parquet:"name=user_pool_client_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	UserPoolDomain                   string            `parquet:"name=user_pool_domain,type=BYTE_ARRAY,convertedtype=UTF8"`
	AuthenticationRequestExtraParams map[string]string `parquet:"name=authentication_request_extra_params,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	OnUnauthenticatedRequest         string            `parquet:"name=on_unauthenticated_request,type=BYTE_ARRAY,convertedtype=UTF8"`
	Scope                            string            `parquet:"name=scope,type=BYTE_ARRAY,convertedtype=UTF8"`
	SessionCookieName                string            `parquet:"name=session_cookie_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	SessionTimeout                   int64             `parquet:"name=session_timeout,type=INT64"`
}

type AuthenticateOidcActionConfigLoadBalancerModel struct {
	AuthorizationEndpoint            string            `parquet:"name=authorization_endpoint,type=BYTE_ARRAY,convertedtype=UTF8"`
	ClientId                         string            `parquet:"name=client_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Issuer                           string            `parquet:"name=issuer,type=BYTE_ARRAY,convertedtype=UTF8"`
	TokenEndpoint                    string            `parquet:"name=token_endpoint,type=BYTE_ARRAY,convertedtype=UTF8"`
	UserInfoEndpoint                 string            `parquet:"name=user_info_endpoint,type=BYTE_ARRAY,convertedtype=UTF8"`
	AuthenticationRequestExtraParams map[string]string `parquet:"name=authentication_request_extra_params,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	ClientSecret                     string            `parquet:"name=client_secret,type=BYTE_ARRAY,convertedtype=UTF8"`
	OnUnauthenticatedRequest         string            `parquet:"name=on_unauthenticated_request,type=BYTE_ARRAY,convertedtype=UTF8"`
	Scope                            string            `parquet:"name=scope,type=BYTE_ARRAY,convertedtype=UTF8"`
	SessionCookieName                string            `parquet:"name=session_cookie_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	SessionTimeout                   int64             `parquet:"name=session_timeout,type=INT64"`
	UseExistingClientSecret          bool              `parquet:"name=use_existing_client_secret,type=BOOLEAN"`
}

type FixedResponseActionConfigLoadBalancerModel struct {
	StatusCode  string `parquet:"name=status_code,type=BYTE_ARRAY,convertedtype=UTF8"`
	ContentType string `parquet:"name=content_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	MessageBody string `parquet:"name=message_body,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ForwardActionConfigLoadBalancerModel struct {
	TargetGroupStickinessConfig *TargetGroupStickinessConfigLoadBalancerModel `parquet:"name=target_group_stickiness_config"`
	TargetGroups                []*TargetGroupTupleLoadBalancerModel          `parquet:"name=target_groups,type=MAP,convertedtype=LIST"`
}

type TargetGroupStickinessConfigLoadBalancerModel struct {
	DurationSeconds int32 `parquet:"name=duration_seconds,type=INT32"`
	Enabled         bool  `parquet:"name=enabled,type=BOOLEAN"`
}

type TargetGroupTupleLoadBalancerModel struct {
	TargetGroupArn string `parquet:"name=target_group_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	Weight         int32  `parquet:"name=weight,type=INT32"`
}

type RedirectActionConfigLoadBalancerModel struct {
	StatusCode string `parquet:"name=status_code,type=BYTE_ARRAY,convertedtype=UTF8"`
	Host       string `parquet:"name=host,type=BYTE_ARRAY,convertedtype=UTF8"`
	Path       string `parquet:"name=path,type=BYTE_ARRAY,convertedtype=UTF8"`
	Port       string `parquet:"name=port,type=BYTE_ARRAY,convertedtype=UTF8"`
	Protocol   string `parquet:"name=protocol,type=BYTE_ARRAY,convertedtype=UTF8"`
	Query      string `parquet:"name=query,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func LoadBalancerDataSource(ctx context.Context, client *elasticloadbalancingv2.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(LoadBalancerModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := elasticloadbalancingv2.NewDescribeLoadBalancersPaginator(client, &elasticloadbalancingv2.DescribeLoadBalancersInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeLoadBalancers")
			return err
		}

		for _, var0 := range output.LoadBalancers {

			model := new(LoadBalancerModel)
			copier.Copy(&model, &var0)

			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customLoadBalancerModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing LoadBalancerModel: %v", err))
			}
		}

	}

	return nil
}

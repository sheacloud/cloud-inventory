//AUTOGENERATED CODE DO NOT EDIT
package s3

type ReplicationConfiguration struct {
	Role  string             `bson:"role,omitempty" ion:"role" dynamodbav:"role,omitempty" parquet:"name=role,type=BYTE_ARRAY,convertedtype=UTF8" json:"role,omitempty" diff:"role"`
	Rules []*ReplicationRule `bson:"rules,omitempty" ion:"rules" dynamodbav:"rules,omitempty" parquet:"name=rules,type=MAP,convertedtype=LIST" json:"rules,omitempty" diff:"rules"`
}

type ReplicationRule struct {
	Destination               *Destination               `bson:"destination,omitempty" ion:"destination" dynamodbav:"destination,omitempty" parquet:"name=destination" json:"destination,omitempty" diff:"destination"`
	Status                    string                     `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
	DeleteMarkerReplication   *DeleteMarkerReplication   `bson:"delete_marker_replication,omitempty" ion:"delete_marker_replication" dynamodbav:"delete_marker_replication,omitempty" parquet:"name=delete_marker_replication" json:"delete_marker_replication,omitempty" diff:"delete_marker_replication"`
	ExistingObjectReplication *ExistingObjectReplication `bson:"existing_object_replication,omitempty" ion:"existing_object_replication" dynamodbav:"existing_object_replication,omitempty" parquet:"name=existing_object_replication" json:"existing_object_replication,omitempty" diff:"existing_object_replication"`
	ID                        string                     `bson:"id,omitempty" ion:"id" dynamodbav:"id,omitempty" parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" json:"id,omitempty" diff:"id"`
	Prefix                    string                     `bson:"prefix,omitempty" ion:"prefix" dynamodbav:"prefix,omitempty" parquet:"name=prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"prefix,omitempty" diff:"prefix"`
	Priority                  int32                      `bson:"priority,omitempty" ion:"priority" dynamodbav:"priority,omitempty" parquet:"name=priority,type=INT32" json:"priority,omitempty" diff:"priority"`
	SourceSelectionCriteria   *SourceSelectionCriteria   `bson:"source_selection_criteria,omitempty" ion:"source_selection_criteria" dynamodbav:"source_selection_criteria,omitempty" parquet:"name=source_selection_criteria" json:"source_selection_criteria,omitempty" diff:"source_selection_criteria"`
}

type Destination struct {
	Bucket                   string                    `bson:"bucket,omitempty" ion:"bucket" dynamodbav:"bucket,omitempty" parquet:"name=bucket,type=BYTE_ARRAY,convertedtype=UTF8" json:"bucket,omitempty" diff:"bucket"`
	AccessControlTranslation *AccessControlTranslation `bson:"access_control_translation,omitempty" ion:"access_control_translation" dynamodbav:"access_control_translation,omitempty" parquet:"name=access_control_translation" json:"access_control_translation,omitempty" diff:"access_control_translation"`
	Account                  string                    `bson:"account,omitempty" ion:"account" dynamodbav:"account,omitempty" parquet:"name=account,type=BYTE_ARRAY,convertedtype=UTF8" json:"account,omitempty" diff:"account"`
	EncryptionConfiguration  *EncryptionConfiguration  `bson:"encryption_configuration,omitempty" ion:"encryption_configuration" dynamodbav:"encryption_configuration,omitempty" parquet:"name=encryption_configuration" json:"encryption_configuration,omitempty" diff:"encryption_configuration"`
	Metrics                  *Metrics                  `bson:"metrics,omitempty" ion:"metrics" dynamodbav:"metrics,omitempty" parquet:"name=metrics" json:"metrics,omitempty" diff:"metrics"`
	ReplicationTime          *ReplicationTime          `bson:"replication_time,omitempty" ion:"replication_time" dynamodbav:"replication_time,omitempty" parquet:"name=replication_time" json:"replication_time,omitempty" diff:"replication_time"`
	StorageClass             string                    `bson:"storage_class,omitempty" ion:"storage_class" dynamodbav:"storage_class,omitempty" parquet:"name=storage_class,type=BYTE_ARRAY,convertedtype=UTF8" json:"storage_class,omitempty" diff:"storage_class"`
}

type AccessControlTranslation struct {
	Owner string `bson:"owner,omitempty" ion:"owner" dynamodbav:"owner,omitempty" parquet:"name=owner,type=BYTE_ARRAY,convertedtype=UTF8" json:"owner,omitempty" diff:"owner"`
}

type EncryptionConfiguration struct {
	ReplicaKmsKeyID string `bson:"replica_kms_key_id,omitempty" ion:"replica_kms_key_id" dynamodbav:"replica_kms_key_id,omitempty" parquet:"name=replica_kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"replica_kms_key_id,omitempty" diff:"replica_kms_key_id"`
}

type Metrics struct {
	Status         string                `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
	EventThreshold *ReplicationTimeValue `bson:"event_threshold,omitempty" ion:"event_threshold" dynamodbav:"event_threshold,omitempty" parquet:"name=event_threshold" json:"event_threshold,omitempty" diff:"event_threshold"`
}

type ReplicationTimeValue struct {
	Minutes int32 `bson:"minutes,omitempty" ion:"minutes" dynamodbav:"minutes,omitempty" parquet:"name=minutes,type=INT32" json:"minutes,omitempty" diff:"minutes"`
}

type ReplicationTime struct {
	Status string                `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
	Time   *ReplicationTimeValue `bson:"time,omitempty" ion:"time" dynamodbav:"time,omitempty" parquet:"name=time" json:"time,omitempty" diff:"time"`
}

type DeleteMarkerReplication struct {
	Status string `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
}

type ExistingObjectReplication struct {
	Status string `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
}

type SourceSelectionCriteria struct {
	ReplicaModifications   *ReplicaModifications   `bson:"replica_modifications,omitempty" ion:"replica_modifications" dynamodbav:"replica_modifications,omitempty" parquet:"name=replica_modifications" json:"replica_modifications,omitempty" diff:"replica_modifications"`
	SseKmsEncryptedObjects *SseKmsEncryptedObjects `bson:"sse_kms_encrypted_objects,omitempty" ion:"sse_kms_encrypted_objects" dynamodbav:"sse_kms_encrypted_objects,omitempty" parquet:"name=sse_kms_encrypted_objects" json:"sse_kms_encrypted_objects,omitempty" diff:"sse_kms_encrypted_objects"`
}

type ReplicaModifications struct {
	Status string `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
}

type SseKmsEncryptedObjects struct {
	Status string `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
}

type Grant struct {
	Grantee    *Grantee `bson:"grantee,omitempty" ion:"grantee" dynamodbav:"grantee,omitempty" parquet:"name=grantee" json:"grantee,omitempty" diff:"grantee"`
	Permission string   `bson:"permission,omitempty" ion:"permission" dynamodbav:"permission,omitempty" parquet:"name=permission,type=BYTE_ARRAY,convertedtype=UTF8" json:"permission,omitempty" diff:"permission"`
}

type Grantee struct {
	Type         string `bson:"type,omitempty" ion:"type" dynamodbav:"type,omitempty" parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8" json:"type,omitempty" diff:"type"`
	DisplayName  string `bson:"display_name,omitempty" ion:"display_name" dynamodbav:"display_name,omitempty" parquet:"name=display_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"display_name,omitempty" diff:"display_name"`
	EmailAddress string `bson:"email_address,omitempty" ion:"email_address" dynamodbav:"email_address,omitempty" parquet:"name=email_address,type=BYTE_ARRAY,convertedtype=UTF8" json:"email_address,omitempty" diff:"email_address"`
	ID           string `bson:"id,omitempty" ion:"id" dynamodbav:"id,omitempty" parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" json:"id,omitempty" diff:"id"`
	URI          string `bson:"uri,omitempty" ion:"uri" dynamodbav:"uri,omitempty" parquet:"name=uri,type=BYTE_ARRAY,convertedtype=UTF8" json:"uri,omitempty" diff:"uri"`
}

type CORSRule struct {
	AllowedMethods []string `bson:"allowed_methods,omitempty" ion:"allowed_methods" dynamodbav:"allowed_methods,omitempty" parquet:"name=allowed_methods,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"allowed_methods,omitempty" diff:"allowed_methods"`
	AllowedOrigins []string `bson:"allowed_origins,omitempty" ion:"allowed_origins" dynamodbav:"allowed_origins,omitempty" parquet:"name=allowed_origins,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"allowed_origins,omitempty" diff:"allowed_origins"`
	AllowedHeaders []string `bson:"allowed_headers,omitempty" ion:"allowed_headers" dynamodbav:"allowed_headers,omitempty" parquet:"name=allowed_headers,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"allowed_headers,omitempty" diff:"allowed_headers"`
	ExposeHeaders  []string `bson:"expose_headers,omitempty" ion:"expose_headers" dynamodbav:"expose_headers,omitempty" parquet:"name=expose_headers,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"expose_headers,omitempty" diff:"expose_headers"`
	ID             string   `bson:"id,omitempty" ion:"id" dynamodbav:"id,omitempty" parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" json:"id,omitempty" diff:"id"`
	MaxAgeSeconds  int32    `bson:"max_age_seconds,omitempty" ion:"max_age_seconds" dynamodbav:"max_age_seconds,omitempty" parquet:"name=max_age_seconds,type=INT32" json:"max_age_seconds,omitempty" diff:"max_age_seconds"`
}

type ServerSideEncryptionConfiguration struct {
	Rules []*ServerSideEncryptionRule `bson:"rules,omitempty" ion:"rules" dynamodbav:"rules,omitempty" parquet:"name=rules,type=MAP,convertedtype=LIST" json:"rules,omitempty" diff:"rules"`
}

type ServerSideEncryptionRule struct {
	ApplyServerSideEncryptionByDefault *ServerSideEncryptionByDefault `bson:"apply_server_side_encryption_by_default,omitempty" ion:"apply_server_side_encryption_by_default" dynamodbav:"apply_server_side_encryption_by_default,omitempty" parquet:"name=apply_server_side_encryption_by_default" json:"apply_server_side_encryption_by_default,omitempty" diff:"apply_server_side_encryption_by_default"`
	BucketKeyEnabled                   bool                           `bson:"bucket_key_enabled,omitempty" ion:"bucket_key_enabled" dynamodbav:"bucket_key_enabled" parquet:"name=bucket_key_enabled,type=BOOLEAN" json:"bucket_key_enabled,omitempty" diff:"bucket_key_enabled"`
}

type ServerSideEncryptionByDefault struct {
	SSEAlgorithm   string `bson:"sse_algorithm,omitempty" ion:"sse_algorithm" dynamodbav:"sse_algorithm,omitempty" parquet:"name=sse_algorithm,type=BYTE_ARRAY,convertedtype=UTF8" json:"sse_algorithm,omitempty" diff:"sse_algorithm"`
	KMSMasterKeyID string `bson:"kms_master_key_id,omitempty" ion:"kms_master_key_id" dynamodbav:"kms_master_key_id,omitempty" parquet:"name=kms_master_key_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"kms_master_key_id,omitempty" diff:"kms_master_key_id"`
}

type IntelligentTieringConfiguration struct {
	Id       string                    `bson:"id,omitempty" ion:"id" dynamodbav:"id,omitempty" parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" json:"id,omitempty" diff:"id"`
	Status   string                    `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
	Tierings []*Tiering                `bson:"tierings,omitempty" ion:"tierings" dynamodbav:"tierings,omitempty" parquet:"name=tierings,type=MAP,convertedtype=LIST" json:"tierings,omitempty" diff:"tierings"`
	Filter   *IntelligentTieringFilter `bson:"filter,omitempty" ion:"filter" dynamodbav:"filter,omitempty" parquet:"name=filter" json:"filter,omitempty" diff:"filter"`
}

type Tiering struct {
	AccessTier string `bson:"access_tier,omitempty" ion:"access_tier" dynamodbav:"access_tier,omitempty" parquet:"name=access_tier,type=BYTE_ARRAY,convertedtype=UTF8" json:"access_tier,omitempty" diff:"access_tier"`
	Days       int32  `bson:"days,omitempty" ion:"days" dynamodbav:"days,omitempty" parquet:"name=days,type=INT32" json:"days,omitempty" diff:"days"`
}

type IntelligentTieringFilter struct {
	And    *IntelligentTieringAndOperator `bson:"and,omitempty" ion:"and" dynamodbav:"and,omitempty" parquet:"name=and" json:"and,omitempty" diff:"and"`
	Prefix string                         `bson:"prefix,omitempty" ion:"prefix" dynamodbav:"prefix,omitempty" parquet:"name=prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"prefix,omitempty" diff:"prefix"`
	Tag    *Tag                           `bson:"tag,omitempty" ion:"tag" dynamodbav:"tag,omitempty" parquet:"name=tag" json:"tag,omitempty" diff:"tag"`
}

type IntelligentTieringAndOperator struct {
	Prefix string `bson:"prefix,omitempty" ion:"prefix" dynamodbav:"prefix,omitempty" parquet:"name=prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"prefix,omitempty" diff:"prefix"`
	Tags   []*Tag `bson:"tags,omitempty" ion:"tags" dynamodbav:"tags,omitempty" parquet:"name=tags,type=MAP,convertedtype=LIST" json:"tags,omitempty" diff:"tags"`
}

type Tag struct {
	Key   string `bson:"key,omitempty" ion:"key" dynamodbav:"key,omitempty" parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8" json:"key,omitempty" diff:"key"`
	Value string `bson:"value,omitempty" ion:"value" dynamodbav:"value,omitempty" parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8" json:"value,omitempty" diff:"value"`
}

type InventoryConfiguration struct {
	Destination            *InventoryDestination `bson:"destination,omitempty" ion:"destination" dynamodbav:"destination,omitempty" parquet:"name=destination" json:"destination,omitempty" diff:"destination"`
	Id                     string                `bson:"id,omitempty" ion:"id" dynamodbav:"id,omitempty" parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" json:"id,omitempty" diff:"id"`
	IncludedObjectVersions string                `bson:"included_object_versions,omitempty" ion:"included_object_versions" dynamodbav:"included_object_versions,omitempty" parquet:"name=included_object_versions,type=BYTE_ARRAY,convertedtype=UTF8" json:"included_object_versions,omitempty" diff:"included_object_versions"`
	IsEnabled              bool                  `bson:"is_enabled,omitempty" ion:"is_enabled" dynamodbav:"is_enabled" parquet:"name=is_enabled,type=BOOLEAN" json:"is_enabled,omitempty" diff:"is_enabled"`
	Schedule               *InventorySchedule    `bson:"schedule,omitempty" ion:"schedule" dynamodbav:"schedule,omitempty" parquet:"name=schedule" json:"schedule,omitempty" diff:"schedule"`
	Filter                 *InventoryFilter      `bson:"filter,omitempty" ion:"filter" dynamodbav:"filter,omitempty" parquet:"name=filter" json:"filter,omitempty" diff:"filter"`
	OptionalFields         []string              `bson:"optional_fields,omitempty" ion:"optional_fields" dynamodbav:"optional_fields,omitempty" parquet:"name=optional_fields,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"optional_fields,omitempty" diff:"optional_fields"`
}

type InventoryDestination struct {
	S3BucketDestination *InventoryS3BucketDestination `bson:"s3_bucket_destination,omitempty" ion:"s3_bucket_destination" dynamodbav:"s3_bucket_destination,omitempty" parquet:"name=s3_bucket_destination" json:"s3_bucket_destination,omitempty" diff:"s3_bucket_destination"`
}

type InventoryS3BucketDestination struct {
	Bucket     string               `bson:"bucket,omitempty" ion:"bucket" dynamodbav:"bucket,omitempty" parquet:"name=bucket,type=BYTE_ARRAY,convertedtype=UTF8" json:"bucket,omitempty" diff:"bucket"`
	Format     string               `bson:"format,omitempty" ion:"format" dynamodbav:"format,omitempty" parquet:"name=format,type=BYTE_ARRAY,convertedtype=UTF8" json:"format,omitempty" diff:"format"`
	AccountId  string               `bson:"account_id,omitempty" ion:"account_id" dynamodbav:"account_id,omitempty" parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"account_id,omitempty" diff:"account_id"`
	Encryption *InventoryEncryption `bson:"encryption,omitempty" ion:"encryption" dynamodbav:"encryption,omitempty" parquet:"name=encryption" json:"encryption,omitempty" diff:"encryption"`
	Prefix     string               `bson:"prefix,omitempty" ion:"prefix" dynamodbav:"prefix,omitempty" parquet:"name=prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"prefix,omitempty" diff:"prefix"`
}

type InventoryEncryption struct {
	SSEKMS *SSEKMS `bson:"ssekms,omitempty" ion:"ssekms" dynamodbav:"ssekms,omitempty" parquet:"name=ssekms" json:"ssekms,omitempty" diff:"ssekms"`
}

type SSEKMS struct {
	KeyId string `bson:"key_id,omitempty" ion:"key_id" dynamodbav:"key_id,omitempty" parquet:"name=key_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"key_id,omitempty" diff:"key_id"`
}

type InventorySchedule struct {
	Frequency string `bson:"frequency,omitempty" ion:"frequency" dynamodbav:"frequency,omitempty" parquet:"name=frequency,type=BYTE_ARRAY,convertedtype=UTF8" json:"frequency,omitempty" diff:"frequency"`
}

type InventoryFilter struct {
	Prefix string `bson:"prefix,omitempty" ion:"prefix" dynamodbav:"prefix,omitempty" parquet:"name=prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"prefix,omitempty" diff:"prefix"`
}

type LifecycleRule struct {
	Status                         string                          `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
	AbortIncompleteMultipartUpload *AbortIncompleteMultipartUpload `bson:"abort_incomplete_multipart_upload,omitempty" ion:"abort_incomplete_multipart_upload" dynamodbav:"abort_incomplete_multipart_upload,omitempty" parquet:"name=abort_incomplete_multipart_upload" json:"abort_incomplete_multipart_upload,omitempty" diff:"abort_incomplete_multipart_upload"`
	Expiration                     *LifecycleExpiration            `bson:"expiration,omitempty" ion:"expiration" dynamodbav:"expiration,omitempty" parquet:"name=expiration" json:"expiration,omitempty" diff:"expiration"`
	ID                             string                          `bson:"id,omitempty" ion:"id" dynamodbav:"id,omitempty" parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" json:"id,omitempty" diff:"id"`
	NoncurrentVersionExpiration    *NoncurrentVersionExpiration    `bson:"noncurrent_version_expiration,omitempty" ion:"noncurrent_version_expiration" dynamodbav:"noncurrent_version_expiration,omitempty" parquet:"name=noncurrent_version_expiration" json:"noncurrent_version_expiration,omitempty" diff:"noncurrent_version_expiration"`
	NoncurrentVersionTransitions   []*NoncurrentVersionTransition  `bson:"noncurrent_version_transitions,omitempty" ion:"noncurrent_version_transitions" dynamodbav:"noncurrent_version_transitions,omitempty" parquet:"name=noncurrent_version_transitions,type=MAP,convertedtype=LIST" json:"noncurrent_version_transitions,omitempty" diff:"noncurrent_version_transitions"`
	Prefix                         string                          `bson:"prefix,omitempty" ion:"prefix" dynamodbav:"prefix,omitempty" parquet:"name=prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"prefix,omitempty" diff:"prefix"`
	Transitions                    []*Transition                   `bson:"transitions,omitempty" ion:"transitions" dynamodbav:"transitions,omitempty" parquet:"name=transitions,type=MAP,convertedtype=LIST" json:"transitions,omitempty" diff:"transitions"`
}

type AbortIncompleteMultipartUpload struct {
	DaysAfterInitiation int32 `bson:"days_after_initiation,omitempty" ion:"days_after_initiation" dynamodbav:"days_after_initiation,omitempty" parquet:"name=days_after_initiation,type=INT32" json:"days_after_initiation,omitempty" diff:"days_after_initiation"`
}

type LifecycleExpiration struct {
	Date                      int64 `bson:"date,omitempty" ion:"date" dynamodbav:"date,omitempty" parquet:"name=date,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"date,omitempty" diff:"date"`
	Days                      int32 `bson:"days,omitempty" ion:"days" dynamodbav:"days,omitempty" parquet:"name=days,type=INT32" json:"days,omitempty" diff:"days"`
	ExpiredObjectDeleteMarker bool  `bson:"expired_object_delete_marker,omitempty" ion:"expired_object_delete_marker" dynamodbav:"expired_object_delete_marker" parquet:"name=expired_object_delete_marker,type=BOOLEAN" json:"expired_object_delete_marker,omitempty" diff:"expired_object_delete_marker"`
}

type NoncurrentVersionExpiration struct {
	NewerNoncurrentVersions int32 `bson:"newer_noncurrent_versions,omitempty" ion:"newer_noncurrent_versions" dynamodbav:"newer_noncurrent_versions,omitempty" parquet:"name=newer_noncurrent_versions,type=INT32" json:"newer_noncurrent_versions,omitempty" diff:"newer_noncurrent_versions"`
	NoncurrentDays          int32 `bson:"noncurrent_days,omitempty" ion:"noncurrent_days" dynamodbav:"noncurrent_days,omitempty" parquet:"name=noncurrent_days,type=INT32" json:"noncurrent_days,omitempty" diff:"noncurrent_days"`
}

type NoncurrentVersionTransition struct {
	NewerNoncurrentVersions int32  `bson:"newer_noncurrent_versions,omitempty" ion:"newer_noncurrent_versions" dynamodbav:"newer_noncurrent_versions,omitempty" parquet:"name=newer_noncurrent_versions,type=INT32" json:"newer_noncurrent_versions,omitempty" diff:"newer_noncurrent_versions"`
	NoncurrentDays          int32  `bson:"noncurrent_days,omitempty" ion:"noncurrent_days" dynamodbav:"noncurrent_days,omitempty" parquet:"name=noncurrent_days,type=INT32" json:"noncurrent_days,omitempty" diff:"noncurrent_days"`
	StorageClass            string `bson:"storage_class,omitempty" ion:"storage_class" dynamodbav:"storage_class,omitempty" parquet:"name=storage_class,type=BYTE_ARRAY,convertedtype=UTF8" json:"storage_class,omitempty" diff:"storage_class"`
}

type Transition struct {
	Date         int64  `bson:"date,omitempty" ion:"date" dynamodbav:"date,omitempty" parquet:"name=date,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"date,omitempty" diff:"date"`
	Days         int32  `bson:"days,omitempty" ion:"days" dynamodbav:"days,omitempty" parquet:"name=days,type=INT32" json:"days,omitempty" diff:"days"`
	StorageClass string `bson:"storage_class,omitempty" ion:"storage_class" dynamodbav:"storage_class,omitempty" parquet:"name=storage_class,type=BYTE_ARRAY,convertedtype=UTF8" json:"storage_class,omitempty" diff:"storage_class"`
}

type LoggingEnabled struct {
	TargetBucket string         `bson:"target_bucket,omitempty" ion:"target_bucket" dynamodbav:"target_bucket,omitempty" parquet:"name=target_bucket,type=BYTE_ARRAY,convertedtype=UTF8" json:"target_bucket,omitempty" diff:"target_bucket"`
	TargetPrefix string         `bson:"target_prefix,omitempty" ion:"target_prefix" dynamodbav:"target_prefix,omitempty" parquet:"name=target_prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"target_prefix,omitempty" diff:"target_prefix"`
	TargetGrants []*TargetGrant `bson:"target_grants,omitempty" ion:"target_grants" dynamodbav:"target_grants,omitempty" parquet:"name=target_grants,type=MAP,convertedtype=LIST" json:"target_grants,omitempty" diff:"target_grants"`
}

type TargetGrant struct {
	Grantee    *Grantee `bson:"grantee,omitempty" ion:"grantee" dynamodbav:"grantee,omitempty" parquet:"name=grantee" json:"grantee,omitempty" diff:"grantee"`
	Permission string   `bson:"permission,omitempty" ion:"permission" dynamodbav:"permission,omitempty" parquet:"name=permission,type=BYTE_ARRAY,convertedtype=UTF8" json:"permission,omitempty" diff:"permission"`
}

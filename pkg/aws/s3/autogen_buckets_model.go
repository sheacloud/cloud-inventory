//AUTOGENERATED CODE DO NOT EDIT
package s3

type Bucket struct {
	CreationDate                      int64                              `bson:"creation_date,omitempty" ion:"creation_date" dynamodbav:"creation_date,omitempty" parquet:"name=creation_date,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"creation_date,omitempty" diff:"creation_date"`
	Name                              string                             `bson:"name,omitempty" ion:"name" dynamodbav:"name,omitempty" parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"name,omitempty" diff:"name,identifier"`
	AccountId                         string                             `bson:"account_id,omitempty" ion:"account_id" dynamodbav:"account_id,omitempty" parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"account_id,omitempty" diff:"account_id"`
	Region                            string                             `bson:"region,omitempty" ion:"region" dynamodbav:"region,omitempty" parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8" json:"region,omitempty" diff:"region"`
	ReportTime                        int64                              `bson:"report_time,omitempty" ion:"report_time" dynamodbav:"report_time,omitempty" parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"report_time,omitempty" diff:"report_time,immutable"`
	InventoryUUID                     string                             `bson:"_id,omitempty" ion:"_id" dynamodbav:"_id,omitempty" parquet:"name=inventory_uuid,type=BYTE_ARRAY,convertedtype=UTF8" json:"_id,omitempty" diff:"-"`
	Policy                            string                             `bson:"policy,omitempty" ion:"policy" dynamodbav:"policy,omitempty" parquet:"name=policy,type=BYTE_ARRAY,convertedtype=UTF8" json:"policy,omitempty" diff:"policy"`
	IsPublic                          bool                               `bson:"is_public,omitempty" ion:"is_public" dynamodbav:"is_public" parquet:"name=is_public,type=BOOLEAN" json:"is_public,omitempty" diff:"is_public"`
	Tags                              map[string]string                  `bson:"tags,omitempty" ion:"tags" dynamodbav:"tags,omitempty" parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"tags,omitempty" diff:"tags"`
	VersioningStatus                  string                             `bson:"versioning_status,omitempty" ion:"versioning_status" dynamodbav:"versioning_status,omitempty" parquet:"name=versioning_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"versioning_status,omitempty" diff:"versioning_status"`
	MFADeleteStatus                   string                             `bson:"mfa_delete_status,omitempty" ion:"mfa_delete_status" dynamodbav:"mfa_delete_status,omitempty" parquet:"name=mfa_delete_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"mfa_delete_status,omitempty" diff:"mfa_delete_status"`
	ReplicationConfiguration          *ReplicationConfiguration          `bson:"replication_configuration,omitempty" ion:"replication_configuration" dynamodbav:"replication_configuration,omitempty" parquet:"name=replication_configuration" json:"replication_configuration,omitempty" diff:"replication_configuration"`
	AclGrants                         []*Grant                           `bson:"acl_grants,omitempty" ion:"acl_grants" dynamodbav:"acl_grants,omitempty" parquet:"name=acl_grants,type=MAP,convertedtype=LIST" json:"acl_grants,omitempty" diff:"acl_grants"`
	CorsRules                         []*CORSRule                        `bson:"cors_rules,omitempty" ion:"cors_rules" dynamodbav:"cors_rules,omitempty" parquet:"name=cors_rules,type=MAP,convertedtype=LIST" json:"cors_rules,omitempty" diff:"cors_rules"`
	ServerSideEncryptionConfiguration *ServerSideEncryptionConfiguration `bson:"server_side_encryption_configuration,omitempty" ion:"server_side_encryption_configuration" dynamodbav:"server_side_encryption_configuration,omitempty" parquet:"name=server_side_encryption_configuration" json:"server_side_encryption_configuration,omitempty" diff:"server_side_encryption_configuration"`
	IntelligentTieringConfigurations  []*IntelligentTieringConfiguration `bson:"intelligent_tiering_configurations,omitempty" ion:"intelligent_tiering_configurations" dynamodbav:"intelligent_tiering_configurations,omitempty" parquet:"name=intelligent_tiering_configurations,type=MAP,convertedtype=LIST" json:"intelligent_tiering_configurations,omitempty" diff:"intelligent_tiering_configurations"`
	InventoryConfigurations           []*InventoryConfiguration          `bson:"inventory_configurations,omitempty" ion:"inventory_configurations" dynamodbav:"inventory_configurations,omitempty" parquet:"name=inventory_configurations,type=MAP,convertedtype=LIST" json:"inventory_configurations,omitempty" diff:"inventory_configurations"`
	LifecycleRules                    []*LifecycleRule                   `bson:"lifecycle_rules,omitempty" ion:"lifecycle_rules" dynamodbav:"lifecycle_rules,omitempty" parquet:"name=lifecycle_rules,type=MAP,convertedtype=LIST" json:"lifecycle_rules,omitempty" diff:"lifecycle_rules"`
	Logging                           *LoggingEnabled                    `bson:"logging,omitempty" ion:"logging" dynamodbav:"logging,omitempty" parquet:"name=logging" json:"logging,omitempty" diff:"logging"`
}

//AUTOGENERATED CODE DO NOT EDIT
package dynamodb

type ArchivalSummary struct {
	ArchivalBackupArn string `bson:"archival_backup_arn,omitempty" ion:"archival_backup_arn" dynamodbav:"archival_backup_arn,omitempty" parquet:"name=archival_backup_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"archival_backup_arn,omitempty" diff:"archival_backup_arn"`
	ArchivalDateTime  int64  `bson:"archival_date_time,omitempty" ion:"archival_date_time" dynamodbav:"archival_date_time,omitempty" parquet:"name=archival_date_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"archival_date_time,omitempty" diff:"archival_date_time"`
	ArchivalReason    string `bson:"archival_reason,omitempty" ion:"archival_reason" dynamodbav:"archival_reason,omitempty" parquet:"name=archival_reason,type=BYTE_ARRAY,convertedtype=UTF8" json:"archival_reason,omitempty" diff:"archival_reason"`
}

type AttributeDefinition struct {
	AttributeName string `bson:"attribute_name,omitempty" ion:"attribute_name" dynamodbav:"attribute_name,omitempty" parquet:"name=attribute_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"attribute_name,omitempty" diff:"attribute_name"`
	AttributeType string `bson:"attribute_type,omitempty" ion:"attribute_type" dynamodbav:"attribute_type,omitempty" parquet:"name=attribute_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"attribute_type,omitempty" diff:"attribute_type"`
}

type BillingModeSummary struct {
	BillingMode                       string `bson:"billing_mode,omitempty" ion:"billing_mode" dynamodbav:"billing_mode,omitempty" parquet:"name=billing_mode,type=BYTE_ARRAY,convertedtype=UTF8" json:"billing_mode,omitempty" diff:"billing_mode"`
	LastUpdateToPayPerRequestDateTime int64  `bson:"last_update_to_pay_per_request_date_time,omitempty" ion:"last_update_to_pay_per_request_date_time" dynamodbav:"last_update_to_pay_per_request_date_time,omitempty" parquet:"name=last_update_to_pay_per_request_date_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"last_update_to_pay_per_request_date_time,omitempty" diff:"last_update_to_pay_per_request_date_time"`
}

type GlobalSecondaryIndexDescription struct {
	Backfilling           bool                              `bson:"backfilling,omitempty" ion:"backfilling" dynamodbav:"backfilling" parquet:"name=backfilling,type=BOOLEAN" json:"backfilling,omitempty" diff:"backfilling"`
	IndexArn              string                            `bson:"index_arn,omitempty" ion:"index_arn" dynamodbav:"index_arn,omitempty" parquet:"name=index_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"index_arn,omitempty" diff:"index_arn"`
	IndexName             string                            `bson:"index_name,omitempty" ion:"index_name" dynamodbav:"index_name,omitempty" parquet:"name=index_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"index_name,omitempty" diff:"index_name"`
	IndexSizeBytes        int64                             `bson:"index_size_bytes,omitempty" ion:"index_size_bytes" dynamodbav:"index_size_bytes,omitempty" parquet:"name=index_size_bytes,type=INT64" json:"index_size_bytes,omitempty" diff:"index_size_bytes"`
	IndexStatus           string                            `bson:"index_status,omitempty" ion:"index_status" dynamodbav:"index_status,omitempty" parquet:"name=index_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"index_status,omitempty" diff:"index_status"`
	ItemCount             int64                             `bson:"item_count,omitempty" ion:"item_count" dynamodbav:"item_count,omitempty" parquet:"name=item_count,type=INT64" json:"item_count,omitempty" diff:"item_count"`
	KeySchema             []*KeySchemaElement               `bson:"key_schema,omitempty" ion:"key_schema" dynamodbav:"key_schema,omitempty" parquet:"name=key_schema,type=MAP,convertedtype=LIST" json:"key_schema,omitempty" diff:"key_schema"`
	Projection            *Projection                       `bson:"projection,omitempty" ion:"projection" dynamodbav:"projection,omitempty" parquet:"name=projection" json:"projection,omitempty" diff:"projection"`
	ProvisionedThroughput *ProvisionedThroughputDescription `bson:"provisioned_throughput,omitempty" ion:"provisioned_throughput" dynamodbav:"provisioned_throughput,omitempty" parquet:"name=provisioned_throughput" json:"provisioned_throughput,omitempty" diff:"provisioned_throughput"`
}

type KeySchemaElement struct {
	AttributeName string `bson:"attribute_name,omitempty" ion:"attribute_name" dynamodbav:"attribute_name,omitempty" parquet:"name=attribute_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"attribute_name,omitempty" diff:"attribute_name"`
	KeyType       string `bson:"key_type,omitempty" ion:"key_type" dynamodbav:"key_type,omitempty" parquet:"name=key_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"key_type,omitempty" diff:"key_type"`
}

type Projection struct {
	NonKeyAttributes []string `bson:"non_key_attributes,omitempty" ion:"non_key_attributes" dynamodbav:"non_key_attributes,omitempty" parquet:"name=non_key_attributes,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"non_key_attributes,omitempty" diff:"non_key_attributes"`
	ProjectionType   string   `bson:"projection_type,omitempty" ion:"projection_type" dynamodbav:"projection_type,omitempty" parquet:"name=projection_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"projection_type,omitempty" diff:"projection_type"`
}

type ProvisionedThroughputDescription struct {
	LastDecreaseDateTime   int64 `bson:"last_decrease_date_time,omitempty" ion:"last_decrease_date_time" dynamodbav:"last_decrease_date_time,omitempty" parquet:"name=last_decrease_date_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"last_decrease_date_time,omitempty" diff:"last_decrease_date_time"`
	LastIncreaseDateTime   int64 `bson:"last_increase_date_time,omitempty" ion:"last_increase_date_time" dynamodbav:"last_increase_date_time,omitempty" parquet:"name=last_increase_date_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"last_increase_date_time,omitempty" diff:"last_increase_date_time"`
	NumberOfDecreasesToday int64 `bson:"number_of_decreases_today,omitempty" ion:"number_of_decreases_today" dynamodbav:"number_of_decreases_today,omitempty" parquet:"name=number_of_decreases_today,type=INT64" json:"number_of_decreases_today,omitempty" diff:"number_of_decreases_today"`
	ReadCapacityUnits      int64 `bson:"read_capacity_units,omitempty" ion:"read_capacity_units" dynamodbav:"read_capacity_units,omitempty" parquet:"name=read_capacity_units,type=INT64" json:"read_capacity_units,omitempty" diff:"read_capacity_units"`
	WriteCapacityUnits     int64 `bson:"write_capacity_units,omitempty" ion:"write_capacity_units" dynamodbav:"write_capacity_units,omitempty" parquet:"name=write_capacity_units,type=INT64" json:"write_capacity_units,omitempty" diff:"write_capacity_units"`
}

type LocalSecondaryIndexDescription struct {
	IndexArn       string              `bson:"index_arn,omitempty" ion:"index_arn" dynamodbav:"index_arn,omitempty" parquet:"name=index_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"index_arn,omitempty" diff:"index_arn"`
	IndexName      string              `bson:"index_name,omitempty" ion:"index_name" dynamodbav:"index_name,omitempty" parquet:"name=index_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"index_name,omitempty" diff:"index_name"`
	IndexSizeBytes int64               `bson:"index_size_bytes,omitempty" ion:"index_size_bytes" dynamodbav:"index_size_bytes,omitempty" parquet:"name=index_size_bytes,type=INT64" json:"index_size_bytes,omitempty" diff:"index_size_bytes"`
	ItemCount      int64               `bson:"item_count,omitempty" ion:"item_count" dynamodbav:"item_count,omitempty" parquet:"name=item_count,type=INT64" json:"item_count,omitempty" diff:"item_count"`
	KeySchema      []*KeySchemaElement `bson:"key_schema,omitempty" ion:"key_schema" dynamodbav:"key_schema,omitempty" parquet:"name=key_schema,type=MAP,convertedtype=LIST" json:"key_schema,omitempty" diff:"key_schema"`
	Projection     *Projection         `bson:"projection,omitempty" ion:"projection" dynamodbav:"projection,omitempty" parquet:"name=projection" json:"projection,omitempty" diff:"projection"`
}

type ReplicaDescription struct {
	GlobalSecondaryIndexes        []*ReplicaGlobalSecondaryIndexDescription `bson:"global_secondary_indexes,omitempty" ion:"global_secondary_indexes" dynamodbav:"global_secondary_indexes,omitempty" parquet:"name=global_secondary_indexes,type=MAP,convertedtype=LIST" json:"global_secondary_indexes,omitempty" diff:"global_secondary_indexes"`
	KMSMasterKeyId                string                                    `bson:"kms_master_key_id,omitempty" ion:"kms_master_key_id" dynamodbav:"kms_master_key_id,omitempty" parquet:"name=kms_master_key_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"kms_master_key_id,omitempty" diff:"kms_master_key_id"`
	ProvisionedThroughputOverride *ProvisionedThroughputOverride            `bson:"provisioned_throughput_override,omitempty" ion:"provisioned_throughput_override" dynamodbav:"provisioned_throughput_override,omitempty" parquet:"name=provisioned_throughput_override" json:"provisioned_throughput_override,omitempty" diff:"provisioned_throughput_override"`
	RegionName                    string                                    `bson:"region_name,omitempty" ion:"region_name" dynamodbav:"region_name,omitempty" parquet:"name=region_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"region_name,omitempty" diff:"region_name"`
	ReplicaInaccessibleDateTime   int64                                     `bson:"replica_inaccessible_date_time,omitempty" ion:"replica_inaccessible_date_time" dynamodbav:"replica_inaccessible_date_time,omitempty" parquet:"name=replica_inaccessible_date_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"replica_inaccessible_date_time,omitempty" diff:"replica_inaccessible_date_time"`
	ReplicaStatus                 string                                    `bson:"replica_status,omitempty" ion:"replica_status" dynamodbav:"replica_status,omitempty" parquet:"name=replica_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"replica_status,omitempty" diff:"replica_status"`
	ReplicaStatusDescription      string                                    `bson:"replica_status_description,omitempty" ion:"replica_status_description" dynamodbav:"replica_status_description,omitempty" parquet:"name=replica_status_description,type=BYTE_ARRAY,convertedtype=UTF8" json:"replica_status_description,omitempty" diff:"replica_status_description"`
	ReplicaStatusPercentProgress  string                                    `bson:"replica_status_percent_progress,omitempty" ion:"replica_status_percent_progress" dynamodbav:"replica_status_percent_progress,omitempty" parquet:"name=replica_status_percent_progress,type=BYTE_ARRAY,convertedtype=UTF8" json:"replica_status_percent_progress,omitempty" diff:"replica_status_percent_progress"`
	ReplicaTableClassSummary      *TableClassSummary                        `bson:"replica_table_class_summary,omitempty" ion:"replica_table_class_summary" dynamodbav:"replica_table_class_summary,omitempty" parquet:"name=replica_table_class_summary" json:"replica_table_class_summary,omitempty" diff:"replica_table_class_summary"`
}

type ReplicaGlobalSecondaryIndexDescription struct {
	IndexName                     string                         `bson:"index_name,omitempty" ion:"index_name" dynamodbav:"index_name,omitempty" parquet:"name=index_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"index_name,omitempty" diff:"index_name"`
	ProvisionedThroughputOverride *ProvisionedThroughputOverride `bson:"provisioned_throughput_override,omitempty" ion:"provisioned_throughput_override" dynamodbav:"provisioned_throughput_override,omitempty" parquet:"name=provisioned_throughput_override" json:"provisioned_throughput_override,omitempty" diff:"provisioned_throughput_override"`
}

type ProvisionedThroughputOverride struct {
	ReadCapacityUnits int64 `bson:"read_capacity_units,omitempty" ion:"read_capacity_units" dynamodbav:"read_capacity_units,omitempty" parquet:"name=read_capacity_units,type=INT64" json:"read_capacity_units,omitempty" diff:"read_capacity_units"`
}

type TableClassSummary struct {
	LastUpdateDateTime int64  `bson:"last_update_date_time,omitempty" ion:"last_update_date_time" dynamodbav:"last_update_date_time,omitempty" parquet:"name=last_update_date_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"last_update_date_time,omitempty" diff:"last_update_date_time"`
	TableClass         string `bson:"table_class,omitempty" ion:"table_class" dynamodbav:"table_class,omitempty" parquet:"name=table_class,type=BYTE_ARRAY,convertedtype=UTF8" json:"table_class,omitempty" diff:"table_class"`
}

type RestoreSummary struct {
	RestoreDateTime   int64  `bson:"restore_date_time,omitempty" ion:"restore_date_time" dynamodbav:"restore_date_time,omitempty" parquet:"name=restore_date_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"restore_date_time,omitempty" diff:"restore_date_time"`
	RestoreInProgress bool   `bson:"restore_in_progress,omitempty" ion:"restore_in_progress" dynamodbav:"restore_in_progress" parquet:"name=restore_in_progress,type=BOOLEAN" json:"restore_in_progress,omitempty" diff:"restore_in_progress"`
	SourceBackupArn   string `bson:"source_backup_arn,omitempty" ion:"source_backup_arn" dynamodbav:"source_backup_arn,omitempty" parquet:"name=source_backup_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"source_backup_arn,omitempty" diff:"source_backup_arn"`
	SourceTableArn    string `bson:"source_table_arn,omitempty" ion:"source_table_arn" dynamodbav:"source_table_arn,omitempty" parquet:"name=source_table_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"source_table_arn,omitempty" diff:"source_table_arn"`
}

type SSEDescription struct {
	InaccessibleEncryptionDateTime int64  `bson:"inaccessible_encryption_date_time,omitempty" ion:"inaccessible_encryption_date_time" dynamodbav:"inaccessible_encryption_date_time,omitempty" parquet:"name=inaccessible_encryption_date_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"inaccessible_encryption_date_time,omitempty" diff:"inaccessible_encryption_date_time"`
	KMSMasterKeyArn                string `bson:"kms_master_key_arn,omitempty" ion:"kms_master_key_arn" dynamodbav:"kms_master_key_arn,omitempty" parquet:"name=kms_master_key_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"kms_master_key_arn,omitempty" diff:"kms_master_key_arn"`
	SSEType                        string `bson:"sse_type,omitempty" ion:"sse_type" dynamodbav:"sse_type,omitempty" parquet:"name=sse_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"sse_type,omitempty" diff:"sse_type"`
	Status                         string `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
}

type StreamSpecification struct {
	StreamEnabled  bool   `bson:"stream_enabled,omitempty" ion:"stream_enabled" dynamodbav:"stream_enabled" parquet:"name=stream_enabled,type=BOOLEAN" json:"stream_enabled,omitempty" diff:"stream_enabled"`
	StreamViewType string `bson:"stream_view_type,omitempty" ion:"stream_view_type" dynamodbav:"stream_view_type,omitempty" parquet:"name=stream_view_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"stream_view_type,omitempty" diff:"stream_view_type"`
}

//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_referenced_resource_file.tmpl
package apigateway

type EndpointConfiguration struct {
	Types          []string `bson:"types,omitempty" ion:"types" dynamodbav:"types,omitempty" parquet:"name=types,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"types,omitempty" diff:"types"`
	VpcEndpointIds []string `bson:"vpc_endpoint_ids,omitempty" ion:"vpc_endpoint_ids" dynamodbav:"vpc_endpoint_ids,omitempty" parquet:"name=vpc_endpoint_ids,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"vpc_endpoint_ids,omitempty" diff:"vpc_endpoint_ids"`
}

type Stage struct {
	AccessLogSettings    *AccessLogSettings        `bson:"access_log_settings,omitempty" ion:"access_log_settings" dynamodbav:"access_log_settings,omitempty" parquet:"name=access_log_settings" json:"access_log_settings,omitempty" diff:"access_log_settings"`
	CacheClusterEnabled  bool                      `bson:"cache_cluster_enabled,omitempty" ion:"cache_cluster_enabled" dynamodbav:"cache_cluster_enabled" parquet:"name=cache_cluster_enabled,type=BOOLEAN" json:"cache_cluster_enabled,omitempty" diff:"cache_cluster_enabled"`
	CacheClusterSize     string                    `bson:"cache_cluster_size,omitempty" ion:"cache_cluster_size" dynamodbav:"cache_cluster_size,omitempty" parquet:"name=cache_cluster_size,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_cluster_size,omitempty" diff:"cache_cluster_size"`
	CacheClusterStatus   string                    `bson:"cache_cluster_status,omitempty" ion:"cache_cluster_status" dynamodbav:"cache_cluster_status,omitempty" parquet:"name=cache_cluster_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_cluster_status,omitempty" diff:"cache_cluster_status"`
	CanarySettings       *CanarySettings           `bson:"canary_settings,omitempty" ion:"canary_settings" dynamodbav:"canary_settings,omitempty" parquet:"name=canary_settings" json:"canary_settings,omitempty" diff:"canary_settings"`
	ClientCertificateId  string                    `bson:"client_certificate_id,omitempty" ion:"client_certificate_id" dynamodbav:"client_certificate_id,omitempty" parquet:"name=client_certificate_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"client_certificate_id,omitempty" diff:"client_certificate_id"`
	CreatedDate          int64                     `bson:"created_date,omitempty" ion:"created_date" dynamodbav:"created_date,omitempty" parquet:"name=created_date,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"created_date,omitempty" diff:"created_date"`
	DeploymentId         string                    `bson:"deployment_id,omitempty" ion:"deployment_id" dynamodbav:"deployment_id,omitempty" parquet:"name=deployment_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"deployment_id,omitempty" diff:"deployment_id"`
	Description          string                    `bson:"description,omitempty" ion:"description" dynamodbav:"description,omitempty" parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8" json:"description,omitempty" diff:"description"`
	DocumentationVersion string                    `bson:"documentation_version,omitempty" ion:"documentation_version" dynamodbav:"documentation_version,omitempty" parquet:"name=documentation_version,type=BYTE_ARRAY,convertedtype=UTF8" json:"documentation_version,omitempty" diff:"documentation_version"`
	LastUpdatedDate      int64                     `bson:"last_updated_date,omitempty" ion:"last_updated_date" dynamodbav:"last_updated_date,omitempty" parquet:"name=last_updated_date,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"last_updated_date,omitempty" diff:"last_updated_date"`
	MethodSettings       map[string]*MethodSetting `bson:"method_settings,omitempty" ion:"method_settings" dynamodbav:"method_settings,omitempty" parquet:"name=method_settings,type=MAP,keytype=BYTE_ARRAY,keyconvertedtype=UTF8" json:"method_settings,omitempty" diff:"method_settings"`
	StageName            string                    `bson:"stage_name,omitempty" ion:"stage_name" dynamodbav:"stage_name,omitempty" parquet:"name=stage_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"stage_name,omitempty" diff:"stage_name"`
	Tags                 map[string]string         `bson:"tags,omitempty" ion:"tags" dynamodbav:"tags,omitempty" parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"tags,omitempty" diff:"tags"`
	TracingEnabled       bool                      `bson:"tracing_enabled,omitempty" ion:"tracing_enabled" dynamodbav:"tracing_enabled" parquet:"name=tracing_enabled,type=BOOLEAN" json:"tracing_enabled,omitempty" diff:"tracing_enabled"`
	Variables            map[string]string         `bson:"variables,omitempty" ion:"variables" dynamodbav:"variables,omitempty" parquet:"name=variables,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"variables,omitempty" diff:"variables"`
	WebAclArn            string                    `bson:"web_acl_arn,omitempty" ion:"web_acl_arn" dynamodbav:"web_acl_arn,omitempty" parquet:"name=web_acl_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"web_acl_arn,omitempty" diff:"web_acl_arn"`
}

type AccessLogSettings struct {
	DestinationArn string `bson:"destination_arn,omitempty" ion:"destination_arn" dynamodbav:"destination_arn,omitempty" parquet:"name=destination_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"destination_arn,omitempty" diff:"destination_arn"`
	Format         string `bson:"format,omitempty" ion:"format" dynamodbav:"format,omitempty" parquet:"name=format,type=BYTE_ARRAY,convertedtype=UTF8" json:"format,omitempty" diff:"format"`
}

type CanarySettings struct {
	DeploymentId           string            `bson:"deployment_id,omitempty" ion:"deployment_id" dynamodbav:"deployment_id,omitempty" parquet:"name=deployment_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"deployment_id,omitempty" diff:"deployment_id"`
	PercentTraffic         float64           `bson:"percent_traffic,omitempty" ion:"percent_traffic" dynamodbav:"percent_traffic,omitempty" parquet:"name=percent_traffic,type=DOUBLE" json:"percent_traffic,omitempty" diff:"percent_traffic"`
	StageVariableOverrides map[string]string `bson:"stage_variable_overrides,omitempty" ion:"stage_variable_overrides" dynamodbav:"stage_variable_overrides,omitempty" parquet:"name=stage_variable_overrides,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"stage_variable_overrides,omitempty" diff:"stage_variable_overrides"`
	UseStageCache          bool              `bson:"use_stage_cache,omitempty" ion:"use_stage_cache" dynamodbav:"use_stage_cache" parquet:"name=use_stage_cache,type=BOOLEAN" json:"use_stage_cache,omitempty" diff:"use_stage_cache"`
}

type MethodSetting struct {
	CacheDataEncrypted                     bool    `bson:"cache_data_encrypted,omitempty" ion:"cache_data_encrypted" dynamodbav:"cache_data_encrypted" parquet:"name=cache_data_encrypted,type=BOOLEAN" json:"cache_data_encrypted,omitempty" diff:"cache_data_encrypted"`
	CacheTtlInSeconds                      int32   `bson:"cache_ttl_in_seconds,omitempty" ion:"cache_ttl_in_seconds" dynamodbav:"cache_ttl_in_seconds,omitempty" parquet:"name=cache_ttl_in_seconds,type=INT32" json:"cache_ttl_in_seconds,omitempty" diff:"cache_ttl_in_seconds"`
	CachingEnabled                         bool    `bson:"caching_enabled,omitempty" ion:"caching_enabled" dynamodbav:"caching_enabled" parquet:"name=caching_enabled,type=BOOLEAN" json:"caching_enabled,omitempty" diff:"caching_enabled"`
	DataTraceEnabled                       bool    `bson:"data_trace_enabled,omitempty" ion:"data_trace_enabled" dynamodbav:"data_trace_enabled" parquet:"name=data_trace_enabled,type=BOOLEAN" json:"data_trace_enabled,omitempty" diff:"data_trace_enabled"`
	LoggingLevel                           string  `bson:"logging_level,omitempty" ion:"logging_level" dynamodbav:"logging_level,omitempty" parquet:"name=logging_level,type=BYTE_ARRAY,convertedtype=UTF8" json:"logging_level,omitempty" diff:"logging_level"`
	MetricsEnabled                         bool    `bson:"metrics_enabled,omitempty" ion:"metrics_enabled" dynamodbav:"metrics_enabled" parquet:"name=metrics_enabled,type=BOOLEAN" json:"metrics_enabled,omitempty" diff:"metrics_enabled"`
	RequireAuthorizationForCacheControl    bool    `bson:"require_authorization_for_cache_control,omitempty" ion:"require_authorization_for_cache_control" dynamodbav:"require_authorization_for_cache_control" parquet:"name=require_authorization_for_cache_control,type=BOOLEAN" json:"require_authorization_for_cache_control,omitempty" diff:"require_authorization_for_cache_control"`
	ThrottlingBurstLimit                   int32   `bson:"throttling_burst_limit,omitempty" ion:"throttling_burst_limit" dynamodbav:"throttling_burst_limit,omitempty" parquet:"name=throttling_burst_limit,type=INT32" json:"throttling_burst_limit,omitempty" diff:"throttling_burst_limit"`
	ThrottlingRateLimit                    float64 `bson:"throttling_rate_limit,omitempty" ion:"throttling_rate_limit" dynamodbav:"throttling_rate_limit,omitempty" parquet:"name=throttling_rate_limit,type=DOUBLE" json:"throttling_rate_limit,omitempty" diff:"throttling_rate_limit"`
	UnauthorizedCacheControlHeaderStrategy string  `bson:"unauthorized_cache_control_header_strategy,omitempty" ion:"unauthorized_cache_control_header_strategy" dynamodbav:"unauthorized_cache_control_header_strategy,omitempty" parquet:"name=unauthorized_cache_control_header_strategy,type=BYTE_ARRAY,convertedtype=UTF8" json:"unauthorized_cache_control_header_strategy,omitempty" diff:"unauthorized_cache_control_header_strategy"`
}

type Resource struct {
	Id              string             `bson:"id,omitempty" ion:"id" dynamodbav:"id,omitempty" parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"id,omitempty" diff:"id,identifier"`
	ParentId        string             `bson:"parent_id,omitempty" ion:"parent_id" dynamodbav:"parent_id,omitempty" parquet:"name=parent_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"parent_id,omitempty" diff:"parent_id"`
	Path            string             `bson:"path,omitempty" ion:"path" dynamodbav:"path,omitempty" parquet:"name=path,type=BYTE_ARRAY,convertedtype=UTF8" json:"path,omitempty" diff:"path"`
	PathPart        string             `bson:"path_part,omitempty" ion:"path_part" dynamodbav:"path_part,omitempty" parquet:"name=path_part,type=BYTE_ARRAY,convertedtype=UTF8" json:"path_part,omitempty" diff:"path_part"`
	ResourceMethods map[string]*Method `bson:"resource_methods,omitempty" ion:"resource_methods" dynamodbav:"resource_methods,omitempty" parquet:"name=resource_methods,type=MAP,keytype=BYTE_ARRAY,keyconvertedtype=UTF8" json:"resource_methods,omitempty" diff:"resource_methods"`
}

type Method struct {
	ApiKeyRequired      bool                       `bson:"api_key_required,omitempty" ion:"api_key_required" dynamodbav:"api_key_required" parquet:"name=api_key_required,type=BOOLEAN" json:"api_key_required,omitempty" diff:"api_key_required"`
	AuthorizationScopes []string                   `bson:"authorization_scopes,omitempty" ion:"authorization_scopes" dynamodbav:"authorization_scopes,omitempty" parquet:"name=authorization_scopes,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"authorization_scopes,omitempty" diff:"authorization_scopes"`
	AuthorizationType   string                     `bson:"authorization_type,omitempty" ion:"authorization_type" dynamodbav:"authorization_type,omitempty" parquet:"name=authorization_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"authorization_type,omitempty" diff:"authorization_type"`
	AuthorizerId        string                     `bson:"authorizer_id,omitempty" ion:"authorizer_id" dynamodbav:"authorizer_id,omitempty" parquet:"name=authorizer_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"authorizer_id,omitempty" diff:"authorizer_id"`
	HttpMethod          string                     `bson:"http_method,omitempty" ion:"http_method" dynamodbav:"http_method,omitempty" parquet:"name=http_method,type=BYTE_ARRAY,convertedtype=UTF8" json:"http_method,omitempty" diff:"http_method"`
	MethodIntegration   *Integration               `bson:"method_integration,omitempty" ion:"method_integration" dynamodbav:"method_integration,omitempty" parquet:"name=method_integration" json:"method_integration,omitempty" diff:"method_integration"`
	MethodResponses     map[string]*MethodResponse `bson:"method_responses,omitempty" ion:"method_responses" dynamodbav:"method_responses,omitempty" parquet:"name=method_responses,type=MAP,keytype=BYTE_ARRAY,keyconvertedtype=UTF8" json:"method_responses,omitempty" diff:"method_responses"`
	OperationName       string                     `bson:"operation_name,omitempty" ion:"operation_name" dynamodbav:"operation_name,omitempty" parquet:"name=operation_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"operation_name,omitempty" diff:"operation_name"`
	RequestModels       map[string]string          `bson:"request_models,omitempty" ion:"request_models" dynamodbav:"request_models,omitempty" parquet:"name=request_models,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"request_models,omitempty" diff:"request_models"`
	RequestParameters   map[string]bool            `bson:"request_parameters,omitempty" ion:"request_parameters" dynamodbav:"request_parameters,omitempty" parquet:"name=request_parameters,type=MAP,keytype=BYTE_ARRAY,valuetype=BOOLEAN,keyconvertedtype=UTF8" json:"request_parameters,omitempty" diff:"request_parameters"`
	RequestValidatorId  string                     `bson:"request_validator_id,omitempty" ion:"request_validator_id" dynamodbav:"request_validator_id,omitempty" parquet:"name=request_validator_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"request_validator_id,omitempty" diff:"request_validator_id"`
}

type Integration struct {
	CacheKeyParameters   []string                        `bson:"cache_key_parameters,omitempty" ion:"cache_key_parameters" dynamodbav:"cache_key_parameters,omitempty" parquet:"name=cache_key_parameters,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"cache_key_parameters,omitempty" diff:"cache_key_parameters"`
	CacheNamespace       string                          `bson:"cache_namespace,omitempty" ion:"cache_namespace" dynamodbav:"cache_namespace,omitempty" parquet:"name=cache_namespace,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_namespace,omitempty" diff:"cache_namespace"`
	ConnectionId         string                          `bson:"connection_id,omitempty" ion:"connection_id" dynamodbav:"connection_id,omitempty" parquet:"name=connection_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"connection_id,omitempty" diff:"connection_id"`
	ConnectionType       string                          `bson:"connection_type,omitempty" ion:"connection_type" dynamodbav:"connection_type,omitempty" parquet:"name=connection_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"connection_type,omitempty" diff:"connection_type"`
	ContentHandling      string                          `bson:"content_handling,omitempty" ion:"content_handling" dynamodbav:"content_handling,omitempty" parquet:"name=content_handling,type=BYTE_ARRAY,convertedtype=UTF8" json:"content_handling,omitempty" diff:"content_handling"`
	Credentials          string                          `bson:"credentials,omitempty" ion:"credentials" dynamodbav:"credentials,omitempty" parquet:"name=credentials,type=BYTE_ARRAY,convertedtype=UTF8" json:"credentials,omitempty" diff:"credentials"`
	HttpMethod           string                          `bson:"http_method,omitempty" ion:"http_method" dynamodbav:"http_method,omitempty" parquet:"name=http_method,type=BYTE_ARRAY,convertedtype=UTF8" json:"http_method,omitempty" diff:"http_method"`
	IntegrationResponses map[string]*IntegrationResponse `bson:"integration_responses,omitempty" ion:"integration_responses" dynamodbav:"integration_responses,omitempty" parquet:"name=integration_responses,type=MAP,keytype=BYTE_ARRAY,keyconvertedtype=UTF8" json:"integration_responses,omitempty" diff:"integration_responses"`
	PassthroughBehavior  string                          `bson:"passthrough_behavior,omitempty" ion:"passthrough_behavior" dynamodbav:"passthrough_behavior,omitempty" parquet:"name=passthrough_behavior,type=BYTE_ARRAY,convertedtype=UTF8" json:"passthrough_behavior,omitempty" diff:"passthrough_behavior"`
	RequestParameters    map[string]string               `bson:"request_parameters,omitempty" ion:"request_parameters" dynamodbav:"request_parameters,omitempty" parquet:"name=request_parameters,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"request_parameters,omitempty" diff:"request_parameters"`
	RequestTemplates     map[string]string               `bson:"request_templates,omitempty" ion:"request_templates" dynamodbav:"request_templates,omitempty" parquet:"name=request_templates,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"request_templates,omitempty" diff:"request_templates"`
	TimeoutInMillis      int32                           `bson:"timeout_in_millis,omitempty" ion:"timeout_in_millis" dynamodbav:"timeout_in_millis,omitempty" parquet:"name=timeout_in_millis,type=INT32" json:"timeout_in_millis,omitempty" diff:"timeout_in_millis"`
	TlsConfig            *TlsConfig                      `bson:"tls_config,omitempty" ion:"tls_config" dynamodbav:"tls_config,omitempty" parquet:"name=tls_config" json:"tls_config,omitempty" diff:"tls_config"`
	Type                 string                          `bson:"type,omitempty" ion:"type" dynamodbav:"type,omitempty" parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8" json:"type,omitempty" diff:"type"`
	Uri                  string                          `bson:"uri,omitempty" ion:"uri" dynamodbav:"uri,omitempty" parquet:"name=uri,type=BYTE_ARRAY,convertedtype=UTF8" json:"uri,omitempty" diff:"uri"`
}

type IntegrationResponse struct {
	ContentHandling    string            `bson:"content_handling,omitempty" ion:"content_handling" dynamodbav:"content_handling,omitempty" parquet:"name=content_handling,type=BYTE_ARRAY,convertedtype=UTF8" json:"content_handling,omitempty" diff:"content_handling"`
	ResponseParameters map[string]string `bson:"response_parameters,omitempty" ion:"response_parameters" dynamodbav:"response_parameters,omitempty" parquet:"name=response_parameters,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"response_parameters,omitempty" diff:"response_parameters"`
	ResponseTemplates  map[string]string `bson:"response_templates,omitempty" ion:"response_templates" dynamodbav:"response_templates,omitempty" parquet:"name=response_templates,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"response_templates,omitempty" diff:"response_templates"`
	SelectionPattern   string            `bson:"selection_pattern,omitempty" ion:"selection_pattern" dynamodbav:"selection_pattern,omitempty" parquet:"name=selection_pattern,type=BYTE_ARRAY,convertedtype=UTF8" json:"selection_pattern,omitempty" diff:"selection_pattern"`
	StatusCode         string            `bson:"status_code,omitempty" ion:"status_code" dynamodbav:"status_code,omitempty" parquet:"name=status_code,type=BYTE_ARRAY,convertedtype=UTF8" json:"status_code,omitempty" diff:"status_code"`
}

type TlsConfig struct {
	InsecureSkipVerification bool `bson:"insecure_skip_verification,omitempty" ion:"insecure_skip_verification" dynamodbav:"insecure_skip_verification" parquet:"name=insecure_skip_verification,type=BOOLEAN" json:"insecure_skip_verification,omitempty" diff:"insecure_skip_verification"`
}

type MethodResponse struct {
	ResponseModels     map[string]string `bson:"response_models,omitempty" ion:"response_models" dynamodbav:"response_models,omitempty" parquet:"name=response_models,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"response_models,omitempty" diff:"response_models"`
	ResponseParameters map[string]bool   `bson:"response_parameters,omitempty" ion:"response_parameters" dynamodbav:"response_parameters,omitempty" parquet:"name=response_parameters,type=MAP,keytype=BYTE_ARRAY,valuetype=BOOLEAN,keyconvertedtype=UTF8" json:"response_parameters,omitempty" diff:"response_parameters"`
	StatusCode         string            `bson:"status_code,omitempty" ion:"status_code" dynamodbav:"status_code,omitempty" parquet:"name=status_code,type=BYTE_ARRAY,convertedtype=UTF8" json:"status_code,omitempty" diff:"status_code"`
}

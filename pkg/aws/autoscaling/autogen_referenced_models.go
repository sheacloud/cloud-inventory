//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_referenced_resource_file.tmpl
package autoscaling

type EnabledMetric struct {
	Granularity string `bson:"granularity,omitempty" ion:"granularity" dynamodbav:"granularity,omitempty" parquet:"name=granularity,type=BYTE_ARRAY,convertedtype=UTF8" json:"granularity,omitempty" diff:"granularity"`
	Metric      string `bson:"metric,omitempty" ion:"metric" dynamodbav:"metric,omitempty" parquet:"name=metric,type=BYTE_ARRAY,convertedtype=UTF8" json:"metric,omitempty" diff:"metric"`
}

type Instance struct {
	AvailabilityZone        string                       `bson:"availability_zone,omitempty" ion:"availability_zone" dynamodbav:"availability_zone,omitempty" parquet:"name=availability_zone,type=BYTE_ARRAY,convertedtype=UTF8" json:"availability_zone,omitempty" diff:"availability_zone"`
	HealthStatus            string                       `bson:"health_status,omitempty" ion:"health_status" dynamodbav:"health_status,omitempty" parquet:"name=health_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"health_status,omitempty" diff:"health_status"`
	InstanceId              string                       `bson:"instance_id,omitempty" ion:"instance_id" dynamodbav:"instance_id,omitempty" parquet:"name=instance_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_id,omitempty" diff:"instance_id"`
	LifecycleState          string                       `bson:"lifecycle_state,omitempty" ion:"lifecycle_state" dynamodbav:"lifecycle_state,omitempty" parquet:"name=lifecycle_state,type=BYTE_ARRAY,convertedtype=UTF8" json:"lifecycle_state,omitempty" diff:"lifecycle_state"`
	ProtectedFromScaleIn    bool                         `bson:"protected_from_scale_in,omitempty" ion:"protected_from_scale_in" dynamodbav:"protected_from_scale_in" parquet:"name=protected_from_scale_in,type=BOOLEAN" json:"protected_from_scale_in,omitempty" diff:"protected_from_scale_in"`
	InstanceType            string                       `bson:"instance_type,omitempty" ion:"instance_type" dynamodbav:"instance_type,omitempty" parquet:"name=instance_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_type,omitempty" diff:"instance_type"`
	LaunchConfigurationName string                       `bson:"launch_configuration_name,omitempty" ion:"launch_configuration_name" dynamodbav:"launch_configuration_name,omitempty" parquet:"name=launch_configuration_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"launch_configuration_name,omitempty" diff:"launch_configuration_name"`
	LaunchTemplate          *LaunchTemplateSpecification `bson:"launch_template,omitempty" ion:"launch_template" dynamodbav:"launch_template,omitempty" parquet:"name=launch_template" json:"launch_template,omitempty" diff:"launch_template"`
	WeightedCapacity        string                       `bson:"weighted_capacity,omitempty" ion:"weighted_capacity" dynamodbav:"weighted_capacity,omitempty" parquet:"name=weighted_capacity,type=BYTE_ARRAY,convertedtype=UTF8" json:"weighted_capacity,omitempty" diff:"weighted_capacity"`
}

type LaunchTemplateSpecification struct {
	LaunchTemplateId   string `bson:"launch_template_id,omitempty" ion:"launch_template_id" dynamodbav:"launch_template_id,omitempty" parquet:"name=launch_template_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"launch_template_id,omitempty" diff:"launch_template_id"`
	LaunchTemplateName string `bson:"launch_template_name,omitempty" ion:"launch_template_name" dynamodbav:"launch_template_name,omitempty" parquet:"name=launch_template_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"launch_template_name,omitempty" diff:"launch_template_name"`
	Version            string `bson:"version,omitempty" ion:"version" dynamodbav:"version,omitempty" parquet:"name=version,type=BYTE_ARRAY,convertedtype=UTF8" json:"version,omitempty" diff:"version"`
}

type MixedInstancesPolicy struct {
	InstancesDistribution *InstancesDistribution `bson:"instances_distribution,omitempty" ion:"instances_distribution" dynamodbav:"instances_distribution,omitempty" parquet:"name=instances_distribution" json:"instances_distribution,omitempty" diff:"instances_distribution"`
	LaunchTemplate        *LaunchTemplate        `bson:"launch_template,omitempty" ion:"launch_template" dynamodbav:"launch_template,omitempty" parquet:"name=launch_template" json:"launch_template,omitempty" diff:"launch_template"`
}

type InstancesDistribution struct {
	OnDemandAllocationStrategy          string `bson:"on_demand_allocation_strategy,omitempty" ion:"on_demand_allocation_strategy" dynamodbav:"on_demand_allocation_strategy,omitempty" parquet:"name=on_demand_allocation_strategy,type=BYTE_ARRAY,convertedtype=UTF8" json:"on_demand_allocation_strategy,omitempty" diff:"on_demand_allocation_strategy"`
	OnDemandBaseCapacity                int32  `bson:"on_demand_base_capacity,omitempty" ion:"on_demand_base_capacity" dynamodbav:"on_demand_base_capacity,omitempty" parquet:"name=on_demand_base_capacity,type=INT32" json:"on_demand_base_capacity,omitempty" diff:"on_demand_base_capacity"`
	OnDemandPercentageAboveBaseCapacity int32  `bson:"on_demand_percentage_above_base_capacity,omitempty" ion:"on_demand_percentage_above_base_capacity" dynamodbav:"on_demand_percentage_above_base_capacity,omitempty" parquet:"name=on_demand_percentage_above_base_capacity,type=INT32" json:"on_demand_percentage_above_base_capacity,omitempty" diff:"on_demand_percentage_above_base_capacity"`
	SpotAllocationStrategy              string `bson:"spot_allocation_strategy,omitempty" ion:"spot_allocation_strategy" dynamodbav:"spot_allocation_strategy,omitempty" parquet:"name=spot_allocation_strategy,type=BYTE_ARRAY,convertedtype=UTF8" json:"spot_allocation_strategy,omitempty" diff:"spot_allocation_strategy"`
	SpotInstancePools                   int32  `bson:"spot_instance_pools,omitempty" ion:"spot_instance_pools" dynamodbav:"spot_instance_pools,omitempty" parquet:"name=spot_instance_pools,type=INT32" json:"spot_instance_pools,omitempty" diff:"spot_instance_pools"`
	SpotMaxPrice                        string `bson:"spot_max_price,omitempty" ion:"spot_max_price" dynamodbav:"spot_max_price,omitempty" parquet:"name=spot_max_price,type=BYTE_ARRAY,convertedtype=UTF8" json:"spot_max_price,omitempty" diff:"spot_max_price"`
}

type LaunchTemplate struct {
	LaunchTemplateSpecification *LaunchTemplateSpecification `bson:"launch_template_specification,omitempty" ion:"launch_template_specification" dynamodbav:"launch_template_specification,omitempty" parquet:"name=launch_template_specification" json:"launch_template_specification,omitempty" diff:"launch_template_specification"`
	Overrides                   []*LaunchTemplateOverrides   `bson:"overrides,omitempty" ion:"overrides" dynamodbav:"overrides,omitempty" parquet:"name=overrides,type=MAP,convertedtype=LIST" json:"overrides,omitempty" diff:"overrides"`
}

type LaunchTemplateOverrides struct {
	InstanceRequirements        *InstanceRequirements        `bson:"instance_requirements,omitempty" ion:"instance_requirements" dynamodbav:"instance_requirements,omitempty" parquet:"name=instance_requirements" json:"instance_requirements,omitempty" diff:"instance_requirements"`
	InstanceType                string                       `bson:"instance_type,omitempty" ion:"instance_type" dynamodbav:"instance_type,omitempty" parquet:"name=instance_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_type,omitempty" diff:"instance_type"`
	LaunchTemplateSpecification *LaunchTemplateSpecification `bson:"launch_template_specification,omitempty" ion:"launch_template_specification" dynamodbav:"launch_template_specification,omitempty" parquet:"name=launch_template_specification" json:"launch_template_specification,omitempty" diff:"launch_template_specification"`
	WeightedCapacity            string                       `bson:"weighted_capacity,omitempty" ion:"weighted_capacity" dynamodbav:"weighted_capacity,omitempty" parquet:"name=weighted_capacity,type=BYTE_ARRAY,convertedtype=UTF8" json:"weighted_capacity,omitempty" diff:"weighted_capacity"`
}

type InstanceRequirements struct {
	MemoryMiB                                 *MemoryMiBRequest                 `bson:"memory_mi_b,omitempty" ion:"memory_mi_b" dynamodbav:"memory_mi_b,omitempty" parquet:"name=memory_mi_b" json:"memory_mi_b,omitempty" diff:"memory_mi_b"`
	VCpuCount                                 *VCpuCountRequest                 `bson:"v_cpu_count,omitempty" ion:"v_cpu_count" dynamodbav:"v_cpu_count,omitempty" parquet:"name=v_cpu_count" json:"v_cpu_count,omitempty" diff:"v_cpu_count"`
	AcceleratorCount                          *AcceleratorCountRequest          `bson:"accelerator_count,omitempty" ion:"accelerator_count" dynamodbav:"accelerator_count,omitempty" parquet:"name=accelerator_count" json:"accelerator_count,omitempty" diff:"accelerator_count"`
	AcceleratorManufacturers                  []string                          `bson:"accelerator_manufacturers,omitempty" ion:"accelerator_manufacturers" dynamodbav:"accelerator_manufacturers,omitempty" parquet:"name=accelerator_manufacturers,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"accelerator_manufacturers,omitempty" diff:"accelerator_manufacturers"`
	AcceleratorNames                          []string                          `bson:"accelerator_names,omitempty" ion:"accelerator_names" dynamodbav:"accelerator_names,omitempty" parquet:"name=accelerator_names,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"accelerator_names,omitempty" diff:"accelerator_names"`
	AcceleratorTotalMemoryMiB                 *AcceleratorTotalMemoryMiBRequest `bson:"accelerator_total_memory_mi_b,omitempty" ion:"accelerator_total_memory_mi_b" dynamodbav:"accelerator_total_memory_mi_b,omitempty" parquet:"name=accelerator_total_memory_mi_b" json:"accelerator_total_memory_mi_b,omitempty" diff:"accelerator_total_memory_mi_b"`
	AcceleratorTypes                          []string                          `bson:"accelerator_types,omitempty" ion:"accelerator_types" dynamodbav:"accelerator_types,omitempty" parquet:"name=accelerator_types,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"accelerator_types,omitempty" diff:"accelerator_types"`
	BareMetal                                 string                            `bson:"bare_metal,omitempty" ion:"bare_metal" dynamodbav:"bare_metal,omitempty" parquet:"name=bare_metal,type=BYTE_ARRAY,convertedtype=UTF8" json:"bare_metal,omitempty" diff:"bare_metal"`
	BaselineEbsBandwidthMbps                  *BaselineEbsBandwidthMbpsRequest  `bson:"baseline_ebs_bandwidth_mbps,omitempty" ion:"baseline_ebs_bandwidth_mbps" dynamodbav:"baseline_ebs_bandwidth_mbps,omitempty" parquet:"name=baseline_ebs_bandwidth_mbps" json:"baseline_ebs_bandwidth_mbps,omitempty" diff:"baseline_ebs_bandwidth_mbps"`
	BurstablePerformance                      string                            `bson:"burstable_performance,omitempty" ion:"burstable_performance" dynamodbav:"burstable_performance,omitempty" parquet:"name=burstable_performance,type=BYTE_ARRAY,convertedtype=UTF8" json:"burstable_performance,omitempty" diff:"burstable_performance"`
	CpuManufacturers                          []string                          `bson:"cpu_manufacturers,omitempty" ion:"cpu_manufacturers" dynamodbav:"cpu_manufacturers,omitempty" parquet:"name=cpu_manufacturers,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"cpu_manufacturers,omitempty" diff:"cpu_manufacturers"`
	ExcludedInstanceTypes                     []string                          `bson:"excluded_instance_types,omitempty" ion:"excluded_instance_types" dynamodbav:"excluded_instance_types,omitempty" parquet:"name=excluded_instance_types,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"excluded_instance_types,omitempty" diff:"excluded_instance_types"`
	InstanceGenerations                       []string                          `bson:"instance_generations,omitempty" ion:"instance_generations" dynamodbav:"instance_generations,omitempty" parquet:"name=instance_generations,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"instance_generations,omitempty" diff:"instance_generations"`
	LocalStorage                              string                            `bson:"local_storage,omitempty" ion:"local_storage" dynamodbav:"local_storage,omitempty" parquet:"name=local_storage,type=BYTE_ARRAY,convertedtype=UTF8" json:"local_storage,omitempty" diff:"local_storage"`
	LocalStorageTypes                         []string                          `bson:"local_storage_types,omitempty" ion:"local_storage_types" dynamodbav:"local_storage_types,omitempty" parquet:"name=local_storage_types,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"local_storage_types,omitempty" diff:"local_storage_types"`
	MemoryGiBPerVCpu                          *MemoryGiBPerVCpuRequest          `bson:"memory_gi_b_per_v_cpu,omitempty" ion:"memory_gi_b_per_v_cpu" dynamodbav:"memory_gi_b_per_v_cpu,omitempty" parquet:"name=memory_gi_b_per_v_cpu" json:"memory_gi_b_per_v_cpu,omitempty" diff:"memory_gi_b_per_v_cpu"`
	NetworkInterfaceCount                     *NetworkInterfaceCountRequest     `bson:"network_interface_count,omitempty" ion:"network_interface_count" dynamodbav:"network_interface_count,omitempty" parquet:"name=network_interface_count" json:"network_interface_count,omitempty" diff:"network_interface_count"`
	OnDemandMaxPricePercentageOverLowestPrice int32                             `bson:"on_demand_max_price_percentage_over_lowest_price,omitempty" ion:"on_demand_max_price_percentage_over_lowest_price" dynamodbav:"on_demand_max_price_percentage_over_lowest_price,omitempty" parquet:"name=on_demand_max_price_percentage_over_lowest_price,type=INT32" json:"on_demand_max_price_percentage_over_lowest_price,omitempty" diff:"on_demand_max_price_percentage_over_lowest_price"`
	RequireHibernateSupport                   bool                              `bson:"require_hibernate_support,omitempty" ion:"require_hibernate_support" dynamodbav:"require_hibernate_support" parquet:"name=require_hibernate_support,type=BOOLEAN" json:"require_hibernate_support,omitempty" diff:"require_hibernate_support"`
	SpotMaxPricePercentageOverLowestPrice     int32                             `bson:"spot_max_price_percentage_over_lowest_price,omitempty" ion:"spot_max_price_percentage_over_lowest_price" dynamodbav:"spot_max_price_percentage_over_lowest_price,omitempty" parquet:"name=spot_max_price_percentage_over_lowest_price,type=INT32" json:"spot_max_price_percentage_over_lowest_price,omitempty" diff:"spot_max_price_percentage_over_lowest_price"`
	TotalLocalStorageGB                       *TotalLocalStorageGBRequest       `bson:"total_local_storage_gb,omitempty" ion:"total_local_storage_gb" dynamodbav:"total_local_storage_gb,omitempty" parquet:"name=total_local_storage_gb" json:"total_local_storage_gb,omitempty" diff:"total_local_storage_gb"`
}

type MemoryMiBRequest struct {
	Min int32 `bson:"min,omitempty" ion:"min" dynamodbav:"min,omitempty" parquet:"name=min,type=INT32" json:"min,omitempty" diff:"min"`
	Max int32 `bson:"max,omitempty" ion:"max" dynamodbav:"max,omitempty" parquet:"name=max,type=INT32" json:"max,omitempty" diff:"max"`
}

type VCpuCountRequest struct {
	Min int32 `bson:"min,omitempty" ion:"min" dynamodbav:"min,omitempty" parquet:"name=min,type=INT32" json:"min,omitempty" diff:"min"`
	Max int32 `bson:"max,omitempty" ion:"max" dynamodbav:"max,omitempty" parquet:"name=max,type=INT32" json:"max,omitempty" diff:"max"`
}

type AcceleratorCountRequest struct {
	Max int32 `bson:"max,omitempty" ion:"max" dynamodbav:"max,omitempty" parquet:"name=max,type=INT32" json:"max,omitempty" diff:"max"`
	Min int32 `bson:"min,omitempty" ion:"min" dynamodbav:"min,omitempty" parquet:"name=min,type=INT32" json:"min,omitempty" diff:"min"`
}

type AcceleratorTotalMemoryMiBRequest struct {
	Max int32 `bson:"max,omitempty" ion:"max" dynamodbav:"max,omitempty" parquet:"name=max,type=INT32" json:"max,omitempty" diff:"max"`
	Min int32 `bson:"min,omitempty" ion:"min" dynamodbav:"min,omitempty" parquet:"name=min,type=INT32" json:"min,omitempty" diff:"min"`
}

type BaselineEbsBandwidthMbpsRequest struct {
	Max int32 `bson:"max,omitempty" ion:"max" dynamodbav:"max,omitempty" parquet:"name=max,type=INT32" json:"max,omitempty" diff:"max"`
	Min int32 `bson:"min,omitempty" ion:"min" dynamodbav:"min,omitempty" parquet:"name=min,type=INT32" json:"min,omitempty" diff:"min"`
}

type MemoryGiBPerVCpuRequest struct {
	Max float64 `bson:"max,omitempty" ion:"max" dynamodbav:"max,omitempty" parquet:"name=max,type=DOUBLE" json:"max,omitempty" diff:"max"`
	Min float64 `bson:"min,omitempty" ion:"min" dynamodbav:"min,omitempty" parquet:"name=min,type=DOUBLE" json:"min,omitempty" diff:"min"`
}

type NetworkInterfaceCountRequest struct {
	Max int32 `bson:"max,omitempty" ion:"max" dynamodbav:"max,omitempty" parquet:"name=max,type=INT32" json:"max,omitempty" diff:"max"`
	Min int32 `bson:"min,omitempty" ion:"min" dynamodbav:"min,omitempty" parquet:"name=min,type=INT32" json:"min,omitempty" diff:"min"`
}

type TotalLocalStorageGBRequest struct {
	Max float64 `bson:"max,omitempty" ion:"max" dynamodbav:"max,omitempty" parquet:"name=max,type=DOUBLE" json:"max,omitempty" diff:"max"`
	Min float64 `bson:"min,omitempty" ion:"min" dynamodbav:"min,omitempty" parquet:"name=min,type=DOUBLE" json:"min,omitempty" diff:"min"`
}

type SuspendedProcess struct {
	ProcessName      string `bson:"process_name,omitempty" ion:"process_name" dynamodbav:"process_name,omitempty" parquet:"name=process_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"process_name,omitempty" diff:"process_name"`
	SuspensionReason string `bson:"suspension_reason,omitempty" ion:"suspension_reason" dynamodbav:"suspension_reason,omitempty" parquet:"name=suspension_reason,type=BYTE_ARRAY,convertedtype=UTF8" json:"suspension_reason,omitempty" diff:"suspension_reason"`
}

type TagDescription struct {
	Key               string `bson:"key,omitempty" ion:"key" dynamodbav:"key,omitempty" parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8" json:"key,omitempty" diff:"key"`
	PropagateAtLaunch bool   `bson:"propagate_at_launch,omitempty" ion:"propagate_at_launch" dynamodbav:"propagate_at_launch" parquet:"name=propagate_at_launch,type=BOOLEAN" json:"propagate_at_launch,omitempty" diff:"propagate_at_launch"`
	ResourceId        string `bson:"resource_id,omitempty" ion:"resource_id" dynamodbav:"resource_id,omitempty" parquet:"name=resource_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"resource_id,omitempty" diff:"resource_id"`
	ResourceType      string `bson:"resource_type,omitempty" ion:"resource_type" dynamodbav:"resource_type,omitempty" parquet:"name=resource_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"resource_type,omitempty" diff:"resource_type"`
	Value             string `bson:"value,omitempty" ion:"value" dynamodbav:"value,omitempty" parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8" json:"value,omitempty" diff:"value"`
}

type WarmPoolConfiguration struct {
	InstanceReusePolicy      *InstanceReusePolicy `bson:"instance_reuse_policy,omitempty" ion:"instance_reuse_policy" dynamodbav:"instance_reuse_policy,omitempty" parquet:"name=instance_reuse_policy" json:"instance_reuse_policy,omitempty" diff:"instance_reuse_policy"`
	MaxGroupPreparedCapacity int32                `bson:"max_group_prepared_capacity,omitempty" ion:"max_group_prepared_capacity" dynamodbav:"max_group_prepared_capacity,omitempty" parquet:"name=max_group_prepared_capacity,type=INT32" json:"max_group_prepared_capacity,omitempty" diff:"max_group_prepared_capacity"`
	MinSize                  int32                `bson:"min_size,omitempty" ion:"min_size" dynamodbav:"min_size,omitempty" parquet:"name=min_size,type=INT32" json:"min_size,omitempty" diff:"min_size"`
	PoolState                string               `bson:"pool_state,omitempty" ion:"pool_state" dynamodbav:"pool_state,omitempty" parquet:"name=pool_state,type=BYTE_ARRAY,convertedtype=UTF8" json:"pool_state,omitempty" diff:"pool_state"`
	Status                   string               `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
}

type InstanceReusePolicy struct {
	ReuseOnScaleIn bool `bson:"reuse_on_scale_in,omitempty" ion:"reuse_on_scale_in" dynamodbav:"reuse_on_scale_in" parquet:"name=reuse_on_scale_in,type=BOOLEAN" json:"reuse_on_scale_in,omitempty" diff:"reuse_on_scale_in"`
}

type ScalingPolicy struct {
	AdjustmentType                 string                          `bson:"adjustment_type,omitempty" ion:"adjustment_type" dynamodbav:"adjustment_type,omitempty" parquet:"name=adjustment_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"adjustment_type,omitempty" diff:"adjustment_type"`
	Alarms                         []*Alarm                        `bson:"alarms,omitempty" ion:"alarms" dynamodbav:"alarms,omitempty" parquet:"name=alarms,type=MAP,convertedtype=LIST" json:"alarms,omitempty" diff:"alarms"`
	AutoScalingGroupName           string                          `bson:"auto_scaling_group_name,omitempty" ion:"auto_scaling_group_name" dynamodbav:"auto_scaling_group_name,omitempty" parquet:"name=auto_scaling_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"auto_scaling_group_name,omitempty" diff:"auto_scaling_group_name"`
	Cooldown                       int32                           `bson:"cooldown,omitempty" ion:"cooldown" dynamodbav:"cooldown,omitempty" parquet:"name=cooldown,type=INT32" json:"cooldown,omitempty" diff:"cooldown"`
	Enabled                        bool                            `bson:"enabled,omitempty" ion:"enabled" dynamodbav:"enabled" parquet:"name=enabled,type=BOOLEAN" json:"enabled,omitempty" diff:"enabled"`
	EstimatedInstanceWarmup        int32                           `bson:"estimated_instance_warmup,omitempty" ion:"estimated_instance_warmup" dynamodbav:"estimated_instance_warmup,omitempty" parquet:"name=estimated_instance_warmup,type=INT32" json:"estimated_instance_warmup,omitempty" diff:"estimated_instance_warmup"`
	MetricAggregationType          string                          `bson:"metric_aggregation_type,omitempty" ion:"metric_aggregation_type" dynamodbav:"metric_aggregation_type,omitempty" parquet:"name=metric_aggregation_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"metric_aggregation_type,omitempty" diff:"metric_aggregation_type"`
	MinAdjustmentMagnitude         int32                           `bson:"min_adjustment_magnitude,omitempty" ion:"min_adjustment_magnitude" dynamodbav:"min_adjustment_magnitude,omitempty" parquet:"name=min_adjustment_magnitude,type=INT32" json:"min_adjustment_magnitude,omitempty" diff:"min_adjustment_magnitude"`
	MinAdjustmentStep              int32                           `bson:"min_adjustment_step,omitempty" ion:"min_adjustment_step" dynamodbav:"min_adjustment_step,omitempty" parquet:"name=min_adjustment_step,type=INT32" json:"min_adjustment_step,omitempty" diff:"min_adjustment_step"`
	PolicyARN                      string                          `bson:"policy_arn,omitempty" ion:"policy_arn" dynamodbav:"policy_arn,omitempty" parquet:"name=policy_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"policy_arn,omitempty" diff:"policy_arn"`
	PolicyName                     string                          `bson:"policy_name,omitempty" ion:"policy_name" dynamodbav:"policy_name,omitempty" parquet:"name=policy_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"policy_name,omitempty" diff:"policy_name"`
	PolicyType                     string                          `bson:"policy_type,omitempty" ion:"policy_type" dynamodbav:"policy_type,omitempty" parquet:"name=policy_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"policy_type,omitempty" diff:"policy_type"`
	PredictiveScalingConfiguration *PredictiveScalingConfiguration `bson:"predictive_scaling_configuration,omitempty" ion:"predictive_scaling_configuration" dynamodbav:"predictive_scaling_configuration,omitempty" parquet:"name=predictive_scaling_configuration" json:"predictive_scaling_configuration,omitempty" diff:"predictive_scaling_configuration"`
	ScalingAdjustment              int32                           `bson:"scaling_adjustment,omitempty" ion:"scaling_adjustment" dynamodbav:"scaling_adjustment,omitempty" parquet:"name=scaling_adjustment,type=INT32" json:"scaling_adjustment,omitempty" diff:"scaling_adjustment"`
	StepAdjustments                []*StepAdjustment               `bson:"step_adjustments,omitempty" ion:"step_adjustments" dynamodbav:"step_adjustments,omitempty" parquet:"name=step_adjustments,type=MAP,convertedtype=LIST" json:"step_adjustments,omitempty" diff:"step_adjustments"`
	TargetTrackingConfiguration    *TargetTrackingConfiguration    `bson:"target_tracking_configuration,omitempty" ion:"target_tracking_configuration" dynamodbav:"target_tracking_configuration,omitempty" parquet:"name=target_tracking_configuration" json:"target_tracking_configuration,omitempty" diff:"target_tracking_configuration"`
}

type Alarm struct {
	AlarmARN  string `bson:"alarm_arn,omitempty" ion:"alarm_arn" dynamodbav:"alarm_arn,omitempty" parquet:"name=alarm_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"alarm_arn,omitempty" diff:"alarm_arn"`
	AlarmName string `bson:"alarm_name,omitempty" ion:"alarm_name" dynamodbav:"alarm_name,omitempty" parquet:"name=alarm_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"alarm_name,omitempty" diff:"alarm_name"`
}

type PredictiveScalingConfiguration struct {
	MetricSpecifications      []*PredictiveScalingMetricSpecification `bson:"metric_specifications,omitempty" ion:"metric_specifications" dynamodbav:"metric_specifications,omitempty" parquet:"name=metric_specifications,type=MAP,convertedtype=LIST" json:"metric_specifications,omitempty" diff:"metric_specifications"`
	MaxCapacityBreachBehavior string                                  `bson:"max_capacity_breach_behavior,omitempty" ion:"max_capacity_breach_behavior" dynamodbav:"max_capacity_breach_behavior,omitempty" parquet:"name=max_capacity_breach_behavior,type=BYTE_ARRAY,convertedtype=UTF8" json:"max_capacity_breach_behavior,omitempty" diff:"max_capacity_breach_behavior"`
	MaxCapacityBuffer         int32                                   `bson:"max_capacity_buffer,omitempty" ion:"max_capacity_buffer" dynamodbav:"max_capacity_buffer,omitempty" parquet:"name=max_capacity_buffer,type=INT32" json:"max_capacity_buffer,omitempty" diff:"max_capacity_buffer"`
	Mode                      string                                  `bson:"mode,omitempty" ion:"mode" dynamodbav:"mode,omitempty" parquet:"name=mode,type=BYTE_ARRAY,convertedtype=UTF8" json:"mode,omitempty" diff:"mode"`
	SchedulingBufferTime      int32                                   `bson:"scheduling_buffer_time,omitempty" ion:"scheduling_buffer_time" dynamodbav:"scheduling_buffer_time,omitempty" parquet:"name=scheduling_buffer_time,type=INT32" json:"scheduling_buffer_time,omitempty" diff:"scheduling_buffer_time"`
}

type PredictiveScalingMetricSpecification struct {
	TargetValue                           float64                                    `bson:"target_value,omitempty" ion:"target_value" dynamodbav:"target_value,omitempty" parquet:"name=target_value,type=DOUBLE" json:"target_value,omitempty" diff:"target_value"`
	CustomizedCapacityMetricSpecification *PredictiveScalingCustomizedCapacityMetric `bson:"customized_capacity_metric_specification,omitempty" ion:"customized_capacity_metric_specification" dynamodbav:"customized_capacity_metric_specification,omitempty" parquet:"name=customized_capacity_metric_specification" json:"customized_capacity_metric_specification,omitempty" diff:"customized_capacity_metric_specification"`
	CustomizedLoadMetricSpecification     *PredictiveScalingCustomizedLoadMetric     `bson:"customized_load_metric_specification,omitempty" ion:"customized_load_metric_specification" dynamodbav:"customized_load_metric_specification,omitempty" parquet:"name=customized_load_metric_specification" json:"customized_load_metric_specification,omitempty" diff:"customized_load_metric_specification"`
	CustomizedScalingMetricSpecification  *PredictiveScalingCustomizedScalingMetric  `bson:"customized_scaling_metric_specification,omitempty" ion:"customized_scaling_metric_specification" dynamodbav:"customized_scaling_metric_specification,omitempty" parquet:"name=customized_scaling_metric_specification" json:"customized_scaling_metric_specification,omitempty" diff:"customized_scaling_metric_specification"`
	PredefinedLoadMetricSpecification     *PredictiveScalingPredefinedLoadMetric     `bson:"predefined_load_metric_specification,omitempty" ion:"predefined_load_metric_specification" dynamodbav:"predefined_load_metric_specification,omitempty" parquet:"name=predefined_load_metric_specification" json:"predefined_load_metric_specification,omitempty" diff:"predefined_load_metric_specification"`
	PredefinedMetricPairSpecification     *PredictiveScalingPredefinedMetricPair     `bson:"predefined_metric_pair_specification,omitempty" ion:"predefined_metric_pair_specification" dynamodbav:"predefined_metric_pair_specification,omitempty" parquet:"name=predefined_metric_pair_specification" json:"predefined_metric_pair_specification,omitempty" diff:"predefined_metric_pair_specification"`
	PredefinedScalingMetricSpecification  *PredictiveScalingPredefinedScalingMetric  `bson:"predefined_scaling_metric_specification,omitempty" ion:"predefined_scaling_metric_specification" dynamodbav:"predefined_scaling_metric_specification,omitempty" parquet:"name=predefined_scaling_metric_specification" json:"predefined_scaling_metric_specification,omitempty" diff:"predefined_scaling_metric_specification"`
}

type PredictiveScalingCustomizedCapacityMetric struct {
	MetricDataQueries []*MetricDataQuery `bson:"metric_data_queries,omitempty" ion:"metric_data_queries" dynamodbav:"metric_data_queries,omitempty" parquet:"name=metric_data_queries,type=MAP,convertedtype=LIST" json:"metric_data_queries,omitempty" diff:"metric_data_queries"`
}

type MetricDataQuery struct {
	Id         string      `bson:"id,omitempty" ion:"id" dynamodbav:"id,omitempty" parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" json:"id,omitempty" diff:"id"`
	Expression string      `bson:"expression,omitempty" ion:"expression" dynamodbav:"expression,omitempty" parquet:"name=expression,type=BYTE_ARRAY,convertedtype=UTF8" json:"expression,omitempty" diff:"expression"`
	Label      string      `bson:"label,omitempty" ion:"label" dynamodbav:"label,omitempty" parquet:"name=label,type=BYTE_ARRAY,convertedtype=UTF8" json:"label,omitempty" diff:"label"`
	MetricStat *MetricStat `bson:"metric_stat,omitempty" ion:"metric_stat" dynamodbav:"metric_stat,omitempty" parquet:"name=metric_stat" json:"metric_stat,omitempty" diff:"metric_stat"`
	ReturnData bool        `bson:"return_data,omitempty" ion:"return_data" dynamodbav:"return_data" parquet:"name=return_data,type=BOOLEAN" json:"return_data,omitempty" diff:"return_data"`
}

type MetricStat struct {
	Metric *Metric `bson:"metric,omitempty" ion:"metric" dynamodbav:"metric,omitempty" parquet:"name=metric" json:"metric,omitempty" diff:"metric"`
	Stat   string  `bson:"stat,omitempty" ion:"stat" dynamodbav:"stat,omitempty" parquet:"name=stat,type=BYTE_ARRAY,convertedtype=UTF8" json:"stat,omitempty" diff:"stat"`
	Unit   string  `bson:"unit,omitempty" ion:"unit" dynamodbav:"unit,omitempty" parquet:"name=unit,type=BYTE_ARRAY,convertedtype=UTF8" json:"unit,omitempty" diff:"unit"`
}

type Metric struct {
	MetricName string             `bson:"metric_name,omitempty" ion:"metric_name" dynamodbav:"metric_name,omitempty" parquet:"name=metric_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"metric_name,omitempty" diff:"metric_name"`
	Namespace  string             `bson:"namespace,omitempty" ion:"namespace" dynamodbav:"namespace,omitempty" parquet:"name=namespace,type=BYTE_ARRAY,convertedtype=UTF8" json:"namespace,omitempty" diff:"namespace"`
	Dimensions []*MetricDimension `bson:"dimensions,omitempty" ion:"dimensions" dynamodbav:"dimensions,omitempty" parquet:"name=dimensions,type=MAP,convertedtype=LIST" json:"dimensions,omitempty" diff:"dimensions"`
}

type MetricDimension struct {
	Name  string `bson:"name,omitempty" ion:"name" dynamodbav:"name,omitempty" parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" json:"name,omitempty" diff:"name"`
	Value string `bson:"value,omitempty" ion:"value" dynamodbav:"value,omitempty" parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8" json:"value,omitempty" diff:"value"`
}

type PredictiveScalingCustomizedLoadMetric struct {
	MetricDataQueries []*MetricDataQuery `bson:"metric_data_queries,omitempty" ion:"metric_data_queries" dynamodbav:"metric_data_queries,omitempty" parquet:"name=metric_data_queries,type=MAP,convertedtype=LIST" json:"metric_data_queries,omitempty" diff:"metric_data_queries"`
}

type PredictiveScalingCustomizedScalingMetric struct {
	MetricDataQueries []*MetricDataQuery `bson:"metric_data_queries,omitempty" ion:"metric_data_queries" dynamodbav:"metric_data_queries,omitempty" parquet:"name=metric_data_queries,type=MAP,convertedtype=LIST" json:"metric_data_queries,omitempty" diff:"metric_data_queries"`
}

type PredictiveScalingPredefinedLoadMetric struct {
	PredefinedMetricType string `bson:"predefined_metric_type,omitempty" ion:"predefined_metric_type" dynamodbav:"predefined_metric_type,omitempty" parquet:"name=predefined_metric_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"predefined_metric_type,omitempty" diff:"predefined_metric_type"`
	ResourceLabel        string `bson:"resource_label,omitempty" ion:"resource_label" dynamodbav:"resource_label,omitempty" parquet:"name=resource_label,type=BYTE_ARRAY,convertedtype=UTF8" json:"resource_label,omitempty" diff:"resource_label"`
}

type PredictiveScalingPredefinedMetricPair struct {
	PredefinedMetricType string `bson:"predefined_metric_type,omitempty" ion:"predefined_metric_type" dynamodbav:"predefined_metric_type,omitempty" parquet:"name=predefined_metric_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"predefined_metric_type,omitempty" diff:"predefined_metric_type"`
	ResourceLabel        string `bson:"resource_label,omitempty" ion:"resource_label" dynamodbav:"resource_label,omitempty" parquet:"name=resource_label,type=BYTE_ARRAY,convertedtype=UTF8" json:"resource_label,omitempty" diff:"resource_label"`
}

type PredictiveScalingPredefinedScalingMetric struct {
	PredefinedMetricType string `bson:"predefined_metric_type,omitempty" ion:"predefined_metric_type" dynamodbav:"predefined_metric_type,omitempty" parquet:"name=predefined_metric_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"predefined_metric_type,omitempty" diff:"predefined_metric_type"`
	ResourceLabel        string `bson:"resource_label,omitempty" ion:"resource_label" dynamodbav:"resource_label,omitempty" parquet:"name=resource_label,type=BYTE_ARRAY,convertedtype=UTF8" json:"resource_label,omitempty" diff:"resource_label"`
}

type StepAdjustment struct {
	ScalingAdjustment        int32   `bson:"scaling_adjustment,omitempty" ion:"scaling_adjustment" dynamodbav:"scaling_adjustment,omitempty" parquet:"name=scaling_adjustment,type=INT32" json:"scaling_adjustment,omitempty" diff:"scaling_adjustment"`
	MetricIntervalLowerBound float64 `bson:"metric_interval_lower_bound,omitempty" ion:"metric_interval_lower_bound" dynamodbav:"metric_interval_lower_bound,omitempty" parquet:"name=metric_interval_lower_bound,type=DOUBLE" json:"metric_interval_lower_bound,omitempty" diff:"metric_interval_lower_bound"`
	MetricIntervalUpperBound float64 `bson:"metric_interval_upper_bound,omitempty" ion:"metric_interval_upper_bound" dynamodbav:"metric_interval_upper_bound,omitempty" parquet:"name=metric_interval_upper_bound,type=DOUBLE" json:"metric_interval_upper_bound,omitempty" diff:"metric_interval_upper_bound"`
}

type TargetTrackingConfiguration struct {
	TargetValue                   float64                        `bson:"target_value,omitempty" ion:"target_value" dynamodbav:"target_value,omitempty" parquet:"name=target_value,type=DOUBLE" json:"target_value,omitempty" diff:"target_value"`
	CustomizedMetricSpecification *CustomizedMetricSpecification `bson:"customized_metric_specification,omitempty" ion:"customized_metric_specification" dynamodbav:"customized_metric_specification,omitempty" parquet:"name=customized_metric_specification" json:"customized_metric_specification,omitempty" diff:"customized_metric_specification"`
	DisableScaleIn                bool                           `bson:"disable_scale_in,omitempty" ion:"disable_scale_in" dynamodbav:"disable_scale_in" parquet:"name=disable_scale_in,type=BOOLEAN" json:"disable_scale_in,omitempty" diff:"disable_scale_in"`
	PredefinedMetricSpecification *PredefinedMetricSpecification `bson:"predefined_metric_specification,omitempty" ion:"predefined_metric_specification" dynamodbav:"predefined_metric_specification,omitempty" parquet:"name=predefined_metric_specification" json:"predefined_metric_specification,omitempty" diff:"predefined_metric_specification"`
}

type CustomizedMetricSpecification struct {
	MetricName string             `bson:"metric_name,omitempty" ion:"metric_name" dynamodbav:"metric_name,omitempty" parquet:"name=metric_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"metric_name,omitempty" diff:"metric_name"`
	Namespace  string             `bson:"namespace,omitempty" ion:"namespace" dynamodbav:"namespace,omitempty" parquet:"name=namespace,type=BYTE_ARRAY,convertedtype=UTF8" json:"namespace,omitempty" diff:"namespace"`
	Statistic  string             `bson:"statistic,omitempty" ion:"statistic" dynamodbav:"statistic,omitempty" parquet:"name=statistic,type=BYTE_ARRAY,convertedtype=UTF8" json:"statistic,omitempty" diff:"statistic"`
	Dimensions []*MetricDimension `bson:"dimensions,omitempty" ion:"dimensions" dynamodbav:"dimensions,omitempty" parquet:"name=dimensions,type=MAP,convertedtype=LIST" json:"dimensions,omitempty" diff:"dimensions"`
	Unit       string             `bson:"unit,omitempty" ion:"unit" dynamodbav:"unit,omitempty" parquet:"name=unit,type=BYTE_ARRAY,convertedtype=UTF8" json:"unit,omitempty" diff:"unit"`
}

type PredefinedMetricSpecification struct {
	PredefinedMetricType string `bson:"predefined_metric_type,omitempty" ion:"predefined_metric_type" dynamodbav:"predefined_metric_type,omitempty" parquet:"name=predefined_metric_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"predefined_metric_type,omitempty" diff:"predefined_metric_type"`
	ResourceLabel        string `bson:"resource_label,omitempty" ion:"resource_label" dynamodbav:"resource_label,omitempty" parquet:"name=resource_label,type=BYTE_ARRAY,convertedtype=UTF8" json:"resource_label,omitempty" diff:"resource_label"`
}

type BlockDeviceMapping struct {
	DeviceName  string `bson:"device_name,omitempty" ion:"device_name" dynamodbav:"device_name,omitempty" parquet:"name=device_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"device_name,omitempty" diff:"device_name"`
	Ebs         *Ebs   `bson:"ebs,omitempty" ion:"ebs" dynamodbav:"ebs,omitempty" parquet:"name=ebs" json:"ebs,omitempty" diff:"ebs"`
	NoDevice    bool   `bson:"no_device,omitempty" ion:"no_device" dynamodbav:"no_device" parquet:"name=no_device,type=BOOLEAN" json:"no_device,omitempty" diff:"no_device"`
	VirtualName string `bson:"virtual_name,omitempty" ion:"virtual_name" dynamodbav:"virtual_name,omitempty" parquet:"name=virtual_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"virtual_name,omitempty" diff:"virtual_name"`
}

type Ebs struct {
	DeleteOnTermination bool   `bson:"delete_on_termination,omitempty" ion:"delete_on_termination" dynamodbav:"delete_on_termination" parquet:"name=delete_on_termination,type=BOOLEAN" json:"delete_on_termination,omitempty" diff:"delete_on_termination"`
	Encrypted           bool   `bson:"encrypted,omitempty" ion:"encrypted" dynamodbav:"encrypted" parquet:"name=encrypted,type=BOOLEAN" json:"encrypted,omitempty" diff:"encrypted"`
	Iops                int32  `bson:"iops,omitempty" ion:"iops" dynamodbav:"iops,omitempty" parquet:"name=iops,type=INT32" json:"iops,omitempty" diff:"iops"`
	SnapshotId          string `bson:"snapshot_id,omitempty" ion:"snapshot_id" dynamodbav:"snapshot_id,omitempty" parquet:"name=snapshot_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"snapshot_id,omitempty" diff:"snapshot_id"`
	Throughput          int32  `bson:"throughput,omitempty" ion:"throughput" dynamodbav:"throughput,omitempty" parquet:"name=throughput,type=INT32" json:"throughput,omitempty" diff:"throughput"`
	VolumeSize          int32  `bson:"volume_size,omitempty" ion:"volume_size" dynamodbav:"volume_size,omitempty" parquet:"name=volume_size,type=INT32" json:"volume_size,omitempty" diff:"volume_size"`
	VolumeType          string `bson:"volume_type,omitempty" ion:"volume_type" dynamodbav:"volume_type,omitempty" parquet:"name=volume_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"volume_type,omitempty" diff:"volume_type"`
}

type InstanceMonitoring struct {
	Enabled bool `bson:"enabled,omitempty" ion:"enabled" dynamodbav:"enabled" parquet:"name=enabled,type=BOOLEAN" json:"enabled,omitempty" diff:"enabled"`
}

type InstanceMetadataOptions struct {
	HttpEndpoint            string `bson:"http_endpoint,omitempty" ion:"http_endpoint" dynamodbav:"http_endpoint,omitempty" parquet:"name=http_endpoint,type=BYTE_ARRAY,convertedtype=UTF8" json:"http_endpoint,omitempty" diff:"http_endpoint"`
	HttpPutResponseHopLimit int32  `bson:"http_put_response_hop_limit,omitempty" ion:"http_put_response_hop_limit" dynamodbav:"http_put_response_hop_limit,omitempty" parquet:"name=http_put_response_hop_limit,type=INT32" json:"http_put_response_hop_limit,omitempty" diff:"http_put_response_hop_limit"`
	HttpTokens              string `bson:"http_tokens,omitempty" ion:"http_tokens" dynamodbav:"http_tokens,omitempty" parquet:"name=http_tokens,type=BYTE_ARRAY,convertedtype=UTF8" json:"http_tokens,omitempty" diff:"http_tokens"`
}

//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_resource_file.tmpl
package autoscaling

type AutoScalingGroup struct {
	AutoScalingGroupName             string                       `bson:"auto_scaling_group_name,omitempty" ion:"auto_scaling_group_name" dynamodbav:"auto_scaling_group_name,omitempty" parquet:"name=auto_scaling_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"auto_scaling_group_name,omitempty" diff:"auto_scaling_group_name"`
	AvailabilityZones                []string                     `bson:"availability_zones,omitempty" ion:"availability_zones" dynamodbav:"availability_zones,omitempty" parquet:"name=availability_zones,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"availability_zones,omitempty" diff:"availability_zones"`
	CreatedTime                      int64                        `bson:"created_time,omitempty" ion:"created_time" dynamodbav:"created_time,omitempty" parquet:"name=created_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"created_time,omitempty" diff:"created_time"`
	DefaultCooldown                  int32                        `bson:"default_cooldown,omitempty" ion:"default_cooldown" dynamodbav:"default_cooldown,omitempty" parquet:"name=default_cooldown,type=INT32" json:"default_cooldown,omitempty" diff:"default_cooldown"`
	DesiredCapacity                  int32                        `bson:"desired_capacity,omitempty" ion:"desired_capacity" dynamodbav:"desired_capacity,omitempty" parquet:"name=desired_capacity,type=INT32" json:"desired_capacity,omitempty" diff:"desired_capacity"`
	HealthCheckType                  string                       `bson:"health_check_type,omitempty" ion:"health_check_type" dynamodbav:"health_check_type,omitempty" parquet:"name=health_check_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"health_check_type,omitempty" diff:"health_check_type"`
	MaxSize                          int32                        `bson:"max_size,omitempty" ion:"max_size" dynamodbav:"max_size,omitempty" parquet:"name=max_size,type=INT32" json:"max_size,omitempty" diff:"max_size"`
	MinSize                          int32                        `bson:"min_size,omitempty" ion:"min_size" dynamodbav:"min_size,omitempty" parquet:"name=min_size,type=INT32" json:"min_size,omitempty" diff:"min_size"`
	AutoScalingGroupARN              string                       `bson:"auto_scaling_group_arn,omitempty" ion:"auto_scaling_group_arn" dynamodbav:"auto_scaling_group_arn,omitempty" parquet:"name=auto_scaling_group_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"auto_scaling_group_arn,omitempty" diff:"auto_scaling_group_arn,identifier"`
	CapacityRebalance                bool                         `bson:"capacity_rebalance,omitempty" ion:"capacity_rebalance" dynamodbav:"capacity_rebalance" parquet:"name=capacity_rebalance,type=BOOLEAN" json:"capacity_rebalance,omitempty" diff:"capacity_rebalance"`
	Context                          string                       `bson:"context,omitempty" ion:"context" dynamodbav:"context,omitempty" parquet:"name=context,type=BYTE_ARRAY,convertedtype=UTF8" json:"context,omitempty" diff:"context"`
	DefaultInstanceWarmup            int32                        `bson:"default_instance_warmup,omitempty" ion:"default_instance_warmup" dynamodbav:"default_instance_warmup,omitempty" parquet:"name=default_instance_warmup,type=INT32" json:"default_instance_warmup,omitempty" diff:"default_instance_warmup"`
	DesiredCapacityType              string                       `bson:"desired_capacity_type,omitempty" ion:"desired_capacity_type" dynamodbav:"desired_capacity_type,omitempty" parquet:"name=desired_capacity_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"desired_capacity_type,omitempty" diff:"desired_capacity_type"`
	EnabledMetrics                   []*EnabledMetric             `bson:"enabled_metrics,omitempty" ion:"enabled_metrics" dynamodbav:"enabled_metrics,omitempty" parquet:"name=enabled_metrics,type=MAP,convertedtype=LIST" json:"enabled_metrics,omitempty" diff:"enabled_metrics"`
	HealthCheckGracePeriod           int32                        `bson:"health_check_grace_period,omitempty" ion:"health_check_grace_period" dynamodbav:"health_check_grace_period,omitempty" parquet:"name=health_check_grace_period,type=INT32" json:"health_check_grace_period,omitempty" diff:"health_check_grace_period"`
	Instances                        []*Instance                  `bson:"instances,omitempty" ion:"instances" dynamodbav:"instances,omitempty" parquet:"name=instances,type=MAP,convertedtype=LIST" json:"instances,omitempty" diff:"instances"`
	LaunchConfigurationName          string                       `bson:"launch_configuration_name,omitempty" ion:"launch_configuration_name" dynamodbav:"launch_configuration_name,omitempty" parquet:"name=launch_configuration_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"launch_configuration_name,omitempty" diff:"launch_configuration_name"`
	LaunchTemplate                   *LaunchTemplateSpecification `bson:"launch_template,omitempty" ion:"launch_template" dynamodbav:"launch_template,omitempty" parquet:"name=launch_template" json:"launch_template,omitempty" diff:"launch_template"`
	LoadBalancerNames                []string                     `bson:"load_balancer_names,omitempty" ion:"load_balancer_names" dynamodbav:"load_balancer_names,omitempty" parquet:"name=load_balancer_names,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"load_balancer_names,omitempty" diff:"load_balancer_names"`
	MaxInstanceLifetime              int32                        `bson:"max_instance_lifetime,omitempty" ion:"max_instance_lifetime" dynamodbav:"max_instance_lifetime,omitempty" parquet:"name=max_instance_lifetime,type=INT32" json:"max_instance_lifetime,omitempty" diff:"max_instance_lifetime"`
	MixedInstancesPolicy             *MixedInstancesPolicy        `bson:"mixed_instances_policy,omitempty" ion:"mixed_instances_policy" dynamodbav:"mixed_instances_policy,omitempty" parquet:"name=mixed_instances_policy" json:"mixed_instances_policy,omitempty" diff:"mixed_instances_policy"`
	NewInstancesProtectedFromScaleIn bool                         `bson:"new_instances_protected_from_scale_in,omitempty" ion:"new_instances_protected_from_scale_in" dynamodbav:"new_instances_protected_from_scale_in" parquet:"name=new_instances_protected_from_scale_in,type=BOOLEAN" json:"new_instances_protected_from_scale_in,omitempty" diff:"new_instances_protected_from_scale_in"`
	PlacementGroup                   string                       `bson:"placement_group,omitempty" ion:"placement_group" dynamodbav:"placement_group,omitempty" parquet:"name=placement_group,type=BYTE_ARRAY,convertedtype=UTF8" json:"placement_group,omitempty" diff:"placement_group"`
	PredictedCapacity                int32                        `bson:"predicted_capacity,omitempty" ion:"predicted_capacity" dynamodbav:"predicted_capacity,omitempty" parquet:"name=predicted_capacity,type=INT32" json:"predicted_capacity,omitempty" diff:"predicted_capacity"`
	ServiceLinkedRoleARN             string                       `bson:"service_linked_role_arn,omitempty" ion:"service_linked_role_arn" dynamodbav:"service_linked_role_arn,omitempty" parquet:"name=service_linked_role_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"service_linked_role_arn,omitempty" diff:"service_linked_role_arn"`
	Status                           string                       `bson:"status,omitempty" ion:"status" dynamodbav:"status,omitempty" parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status,omitempty" diff:"status"`
	SuspendedProcesses               []*SuspendedProcess          `bson:"suspended_processes,omitempty" ion:"suspended_processes" dynamodbav:"suspended_processes,omitempty" parquet:"name=suspended_processes,type=MAP,convertedtype=LIST" json:"suspended_processes,omitempty" diff:"suspended_processes"`
	Tags                             map[string]string            `bson:"tags,omitempty" ion:"tags" dynamodbav:"tags,omitempty" parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"tags,omitempty" diff:"tags"`
	TargetGroupARNs                  []string                     `bson:"target_group_arns,omitempty" ion:"target_group_arns" dynamodbav:"target_group_arns,omitempty" parquet:"name=target_group_arns,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"target_group_arns,omitempty" diff:"target_group_arns"`
	TerminationPolicies              []string                     `bson:"termination_policies,omitempty" ion:"termination_policies" dynamodbav:"termination_policies,omitempty" parquet:"name=termination_policies,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"termination_policies,omitempty" diff:"termination_policies"`
	VPCZoneIdentifier                string                       `bson:"vpc_zone_identifier,omitempty" ion:"vpc_zone_identifier" dynamodbav:"vpc_zone_identifier,omitempty" parquet:"name=vpc_zone_identifier,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_zone_identifier,omitempty" diff:"vpc_zone_identifier"`
	WarmPoolConfiguration            *WarmPoolConfiguration       `bson:"warm_pool_configuration,omitempty" ion:"warm_pool_configuration" dynamodbav:"warm_pool_configuration,omitempty" parquet:"name=warm_pool_configuration" json:"warm_pool_configuration,omitempty" diff:"warm_pool_configuration"`
	WarmPoolSize                     int32                        `bson:"warm_pool_size,omitempty" ion:"warm_pool_size" dynamodbav:"warm_pool_size,omitempty" parquet:"name=warm_pool_size,type=INT32" json:"warm_pool_size,omitempty" diff:"warm_pool_size"`
	AccountId                        string                       `bson:"account_id,omitempty" ion:"account_id" dynamodbav:"account_id,omitempty" parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"account_id,omitempty" diff:"account_id"`
	Region                           string                       `bson:"region,omitempty" ion:"region" dynamodbav:"region,omitempty" parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8" json:"region,omitempty" diff:"region"`
	ReportTime                       int64                        `bson:"report_time,omitempty" ion:"report_time" dynamodbav:"report_time,omitempty" parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"report_time,omitempty" diff:"report_time,immutable"`
	InventoryUUID                    string                       `bson:"_id,omitempty" ion:"_id" dynamodbav:"_id,omitempty" parquet:"name=inventory_uuid,type=BYTE_ARRAY,convertedtype=UTF8" json:"_id,omitempty" diff:"-"`
	ScalingPolicies                  []*ScalingPolicy             `bson:"scaling_policies,omitempty" ion:"scaling_policies" dynamodbav:"scaling_policies,omitempty" parquet:"name=scaling_policies,type=MAP,convertedtype=LIST" json:"scaling_policies,omitempty" diff:"scaling_policies"`
}

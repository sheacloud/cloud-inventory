//AUTOGENERATED CODE DO NOT EDIT
package cloudtrail

import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudtrail"
	"github.com/google/uuid"
	"github.com/jinzhu/copier"
	localAws "github.com/sheacloud/cloud-inventory/pkg/aws"
	"github.com/sheacloud/cloud-inventory/pkg/meta"
)

func FetchTrails(ctx context.Context, params *localAws.AwsFetchInput) ([]*Trail, *localAws.AwsFetchOutputMetadata) {
	fetchingErrors := []error{}
	var fetchedResources int
	var failedResources int
	inventoryResults := &meta.InventoryResults{
		Cloud:      "aws",
		Service:    "cloudtrail",
		Resource:   "trails",
		AccountId:  params.AccountId,
		Region:     params.Region,
		ReportTime: params.ReportTime,
	}
	resources := []*Trail{}

	awsClient := params.RegionalClients[params.Region]
	client := awsClient.CloudTrail()

	result, err := client.DescribeTrails(ctx, &cloudtrail.DescribeTrailsInput{
		IncludeShadowTrails: aws.Bool(false),
	})
	if err != nil {
		fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling DescribeTrails in %s/%s: %w", params.AccountId, params.Region, err))
		inventoryResults.FetchedResources = 0
		inventoryResults.FailedResources = 0
		inventoryResults.HadErrors = true
		return nil, &localAws.AwsFetchOutputMetadata{
			FetchingErrors:   fetchingErrors,
			InventoryResults: inventoryResults,
		}
	}

	results := []*cloudtrail.DescribeTrailsOutput{result}
	for _, output := range results {
		for _, object := range output.TrailList {
			model := new(Trail)
			copier.CopyWithOption(&model, &object, localAws.CopyOption)

			statusResponse, err := client.GetTrailStatus(ctx, &cloudtrail.GetTrailStatusInput{
				Name: object.Name,
			})
			if err != nil {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling GetTrailStatus in %s/%s: %w", params.AccountId, params.Region, err))
				failedResources++
				continue
			}
			model.Status = new(GetTrailStatusOutput)
			copier.CopyWithOption(&model.Status, &statusResponse, localAws.CopyOption)

			model.AccountId = params.AccountId
			model.Region = params.Region
			model.ReportTime = params.ReportTime
			model.InventoryUUID = uuid.New().String()

			resources = append(resources, model)
			fetchedResources++
		}
	}

	inventoryResults.FetchedResources = fetchedResources
	inventoryResults.FailedResources = failedResources
	inventoryResults.HadErrors = len(fetchingErrors) > 0

	return resources, &localAws.AwsFetchOutputMetadata{
		FetchingErrors:   fetchingErrors,
		InventoryResults: inventoryResults,
	}
}

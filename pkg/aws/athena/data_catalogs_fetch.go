//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_fetching_file.tmpl
package athena

import (
	"context"
	"fmt"

	awsSdk "github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/athena"
	"github.com/google/uuid"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/pkg/aws"
	"github.com/sheacloud/cloud-inventory/pkg/meta"
)

func FetchDataCatalogs(ctx context.Context, params *aws.AwsFetchInput) ([]*DataCatalog, *aws.AwsFetchOutputMetadata) {
	fetchingErrors := []error{}
	var fetchedResources int
	var failedResources int
	inventoryResults := &meta.InventoryResults{
		Cloud:      "aws",
		Service:    "athena",
		Resource:   "data_catalogs",
		AccountId:  params.AccountId,
		Region:     params.Region,
		ReportTime: params.ReportTime,
	}
	resources := []*DataCatalog{}

	awsClient := params.RegionalClients[params.Region]
	client := awsClient.Athena()

	paginator := athena.NewListDataCatalogsPaginator(client, &athena.ListDataCatalogsInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)

		if err != nil {
			fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling ListDataCatalogs in %s/%s: %w", params.AccountId, params.Region, err))
			break
		}

		for _, object := range output.DataCatalogsSummary {
			// Glue data catalogs are auto-created by AWS and the GetDataCatalog API errors out when trying to describe them
			if object.Type == "GLUE" && *object.CatalogName == "AwsDataCatalog" {
				continue
			}
			result, err := client.GetDataCatalog(ctx, &athena.GetDataCatalogInput{
				Name: awsSdk.String(*object.CatalogName),
			})
			if err != nil {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling GetDataCatalog in %s/%s: %w", params.AccountId, params.Region, err))
				failedResources++
				continue
			}

			model := new(DataCatalog)
			copier.CopyWithOption(&model, &result.DataCatalog, aws.CopyOption)

			model.AccountId = params.AccountId
			model.Region = params.Region
			model.ReportTime = params.ReportTime
			model.InventoryUUID = uuid.New().String()

			resources = append(resources, model)
			fetchedResources++
		}

	}

	inventoryResults.FetchedResources = fetchedResources
	inventoryResults.FailedResources = failedResources
	inventoryResults.HadErrors = len(fetchingErrors) > 0

	return resources, &aws.AwsFetchOutputMetadata{
		FetchingErrors:   fetchingErrors,
		InventoryResults: inventoryResults,
	}
}

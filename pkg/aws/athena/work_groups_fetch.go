//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_fetching_file.tmpl
package athena

import (
	"context"
	"fmt"

	awsSdk "github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/athena"
	"github.com/google/uuid"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/pkg/aws"
	"github.com/sheacloud/cloud-inventory/pkg/meta"
)

func FetchWorkGroups(ctx context.Context, params *aws.AwsFetchInput) ([]*WorkGroup, *aws.AwsFetchOutputMetadata) {
	fetchingErrors := []error{}
	var fetchedResources int
	var failedResources int
	inventoryResults := &meta.InventoryResults{
		Cloud:      "aws",
		Service:    "athena",
		Resource:   "work_groups",
		AccountId:  params.AccountId,
		Region:     params.Region,
		ReportTime: params.ReportTime,
	}
	resources := []*WorkGroup{}

	awsClient := params.RegionalClients[params.Region]
	client := awsClient.Athena()

	paginator := athena.NewListWorkGroupsPaginator(client, &athena.ListWorkGroupsInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)

		if err != nil {
			fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling ListWorkGroups in %s/%s: %w", params.AccountId, params.Region, err))
			break
		}

		for _, object := range output.WorkGroups {
			result, err := client.GetWorkGroup(ctx, &athena.GetWorkGroupInput{
				WorkGroup: awsSdk.String(*object.Name),
			})
			if err != nil {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling GetWorkGroup in %s/%s: %w", params.AccountId, params.Region, err))
				failedResources++
				continue
			}

			model := new(WorkGroup)
			copier.CopyWithOption(&model, &result.WorkGroup, aws.CopyOption)

			tagResult, err := client.ListTagsForResource(ctx, &athena.ListTagsForResourceInput{
				ResourceARN: awsSdk.String(fmt.Sprintf("arn:aws:athena:%s:%s:workgroup/%s", params.Region, params.AccountId, *object.Name)),
			})
			if err != nil {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling ListTagsForResource in %s/%s: %w", params.AccountId, params.Region, err))
				failedResources++
				continue
			}

			model.Tags = ConvertTags(tagResult.Tags)
			model.AccountId = params.AccountId
			model.Region = params.Region
			model.ReportTime = params.ReportTime
			model.InventoryUUID = uuid.New().String()

			resources = append(resources, model)
			fetchedResources++
		}

	}

	inventoryResults.FetchedResources = fetchedResources
	inventoryResults.FailedResources = failedResources
	inventoryResults.HadErrors = len(fetchingErrors) > 0

	return resources, &aws.AwsFetchOutputMetadata{
		FetchingErrors:   fetchingErrors,
		InventoryResults: inventoryResults,
	}
}

// AUTOGENERATED, DO NOT EDIT
package cloudwatchlogs

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"
	"sync"
)

var customLogGroupModelPostprocessingFuncs []func(ctx context.Context, client *cloudwatchlogs.Client, cfg aws.Config, x *LogGroupModel) = []func(ctx context.Context, client *cloudwatchlogs.Client, cfg aws.Config, x *LogGroupModel){}
var customLogGroupModelFuncsLock sync.Mutex

func registerCustomLogGroupModelPostprocessingFunc(f func(ctx context.Context, client *cloudwatchlogs.Client, cfg aws.Config, x *LogGroupModel)) {
	customLogGroupModelFuncsLock.Lock()
	defer customLogGroupModelFuncsLock.Unlock()

	customLogGroupModelPostprocessingFuncs = append(customLogGroupModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("log_groups", LogGroupDataSource)
}

type LogGroupModel struct {
	Arn               string `parquet:"name=arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	CreationTime      int64  `parquet:"name=creation_time,type=INT64"`
	KmsKeyId          string `parquet:"name=kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	LogGroupName      string `parquet:"name=log_group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	MetricFilterCount int32  `parquet:"name=metric_filter_count,type=INT32"`
	RetentionInDays   int32  `parquet:"name=retention_in_days,type=INT32"`
	StoredBytes       int64  `parquet:"name=stored_bytes,type=INT64"`
	AccountId         string `parquet:"name=account_id, type=BYTE_ARRAY, convertedtype=UTF8"`
	Region            string `parquet:"name=region, type=BYTE_ARRAY, convertedtype=UTF8"`
	ReportTime        int64  `parquet:"name=report_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
}

func LogGroupDataSource(ctx context.Context, client *cloudwatchlogs.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(LogGroupModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := cloudwatchlogs.NewDescribeLogGroupsPaginator(client, &cloudwatchlogs.DescribeLogGroupsInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeLogGroups")
			return err
		}

		for _, var0 := range output.LogGroups {

			model := new(LogGroupModel)
			copier.Copy(&model, &var0)

			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customLogGroupModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing LogGroupModel: %v", err))
			}
		}

	}

	return nil
}

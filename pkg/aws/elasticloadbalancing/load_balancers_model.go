// AUTOGENERATED, DO NOT EDIT
package elasticloadbalancing

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing"
	"sync"
)

var customLoadBalancerDescriptionModelPostprocessingFuncs []func(ctx context.Context, client *elasticloadbalancing.Client, cfg aws.Config, x *LoadBalancerDescriptionModel) = []func(ctx context.Context, client *elasticloadbalancing.Client, cfg aws.Config, x *LoadBalancerDescriptionModel){}
var customLoadBalancerDescriptionModelFuncsLock sync.Mutex

func registerCustomLoadBalancerDescriptionModelPostprocessingFunc(f func(ctx context.Context, client *elasticloadbalancing.Client, cfg aws.Config, x *LoadBalancerDescriptionModel)) {
	customLoadBalancerDescriptionModelFuncsLock.Lock()
	defer customLoadBalancerDescriptionModelFuncsLock.Unlock()

	customLoadBalancerDescriptionModelPostprocessingFuncs = append(customLoadBalancerDescriptionModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("load_balancers", LoadBalancerDescriptionDataSource)
}

type LoadBalancerDescriptionModel struct {
	AvailabilityZones         []string                                                `parquet:"name=availability_zones,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	BackendServerDescriptions []*BackendServerDescriptionLoadBalancerDescriptionModel `parquet:"name=backend_server_descriptions,type=LIST"`
	CanonicalHostedZoneName   string                                                  `parquet:"name=canonical_hosted_zone_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	CanonicalHostedZoneNameID string                                                  `parquet:"name=canonical_hosted_zone_name_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	CreatedTime               *time.Time
	CreatedTimeMilli          int64                                              `parquet:"name=created_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
	DNSName                   string                                             `parquet:"name=dns_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	HealthCheck               *HealthCheckLoadBalancerDescriptionModel           `parquet:"name=health_check"`
	Instances                 []*InstanceLoadBalancerDescriptionModel            `parquet:"name=instances,type=LIST"`
	ListenerDescriptions      []*ListenerDescriptionLoadBalancerDescriptionModel `parquet:"name=listener_descriptions,type=LIST"`
	LoadBalancerName          string                                             `parquet:"name=load_balancer_name,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	Policies                  *PoliciesLoadBalancerDescriptionModel              `parquet:"name=policies"`
	Scheme                    string                                             `parquet:"name=scheme,type=BYTE_ARRAY,convertedtype=UTF8"`
	SecurityGroups            []string                                           `parquet:"name=security_groups,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	SourceSecurityGroup       *SourceSecurityGroupLoadBalancerDescriptionModel   `parquet:"name=source_security_group"`
	Subnets                   []string                                           `parquet:"name=subnets,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	VPCId                     string                                             `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	AccountId                 string                                             `parquet:"name=account_id, type=BYTE_ARRAY, convertedtype=UTF8"`
	Region                    string                                             `parquet:"name=region, type=BYTE_ARRAY, convertedtype=UTF8"`
	ReportTime                int64                                              `parquet:"name=report_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
}

type BackendServerDescriptionLoadBalancerDescriptionModel struct {
	InstancePort int32    `parquet:"name=instance_port,type=INT32"`
	PolicyNames  []string `parquet:"name=policy_names,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
}

type HealthCheckLoadBalancerDescriptionModel struct {
	HealthyThreshold   int32  `parquet:"name=healthy_threshold,type=INT32"`
	Interval           int32  `parquet:"name=interval,type=INT32"`
	Target             string `parquet:"name=target,type=BYTE_ARRAY,convertedtype=UTF8"`
	Timeout            int32  `parquet:"name=timeout,type=INT32"`
	UnhealthyThreshold int32  `parquet:"name=unhealthy_threshold,type=INT32"`
}

type InstanceLoadBalancerDescriptionModel struct {
	InstanceId string `parquet:"name=instance_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ListenerDescriptionLoadBalancerDescriptionModel struct {
	Listener    *ListenerLoadBalancerDescriptionModel `parquet:"name=listener"`
	PolicyNames []string                              `parquet:"name=policy_names,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
}

type ListenerLoadBalancerDescriptionModel struct {
	InstancePort     int32  `parquet:"name=instance_port,type=INT32"`
	LoadBalancerPort int32  `parquet:"name=load_balancer_port,type=INT32"`
	Protocol         string `parquet:"name=protocol,type=BYTE_ARRAY,convertedtype=UTF8"`
	InstanceProtocol string `parquet:"name=instance_protocol,type=BYTE_ARRAY,convertedtype=UTF8"`
	SSLCertificateId string `parquet:"name=ssl_certificate_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type PoliciesLoadBalancerDescriptionModel struct {
	AppCookieStickinessPolicies []*AppCookieStickinessPolicyLoadBalancerDescriptionModel `parquet:"name=app_cookie_stickiness_policies,type=LIST"`
	LBCookieStickinessPolicies  []*LBCookieStickinessPolicyLoadBalancerDescriptionModel  `parquet:"name=lb_cookie_stickiness_policies,type=LIST"`
	OtherPolicies               []string                                                 `parquet:"name=other_policies,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
}

type AppCookieStickinessPolicyLoadBalancerDescriptionModel struct {
	CookieName string `parquet:"name=cookie_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	PolicyName string `parquet:"name=policy_name,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type LBCookieStickinessPolicyLoadBalancerDescriptionModel struct {
	CookieExpirationPeriod int64  `parquet:"name=cookie_expiration_period,type=INT64"`
	PolicyName             string `parquet:"name=policy_name,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type SourceSecurityGroupLoadBalancerDescriptionModel struct {
	GroupName  string `parquet:"name=group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	OwnerAlias string `parquet:"name=owner_alias,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func LoadBalancerDescriptionDataSource(ctx context.Context, client *elasticloadbalancing.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(LoadBalancerDescriptionModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := elasticloadbalancing.NewDescribeLoadBalancersPaginator(client, &elasticloadbalancing.DescribeLoadBalancersInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeLoadBalancers")
			return err
		}

		for _, var0 := range output.LoadBalancerDescriptions {

			model := new(LoadBalancerDescriptionModel)
			copier.Copy(&model, &var0)

			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customLoadBalancerDescriptionModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing LoadBalancerDescriptionModel: %v", err))
			}
		}

	}

	return nil
}

//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_referenced_resource_file.tmpl
package apigatewayv2

type Cors struct {
	AllowCredentials bool     `bson:"allow_credentials,omitempty" ion:"allow_credentials" dynamodbav:"allow_credentials" parquet:"name=allow_credentials,type=BOOLEAN" json:"allow_credentials,omitempty" diff:"allow_credentials"`
	AllowHeaders     []string `bson:"allow_headers,omitempty" ion:"allow_headers" dynamodbav:"allow_headers,omitempty" parquet:"name=allow_headers,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"allow_headers,omitempty" diff:"allow_headers"`
	AllowMethods     []string `bson:"allow_methods,omitempty" ion:"allow_methods" dynamodbav:"allow_methods,omitempty" parquet:"name=allow_methods,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"allow_methods,omitempty" diff:"allow_methods"`
	AllowOrigins     []string `bson:"allow_origins,omitempty" ion:"allow_origins" dynamodbav:"allow_origins,omitempty" parquet:"name=allow_origins,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"allow_origins,omitempty" diff:"allow_origins"`
	ExposeHeaders    []string `bson:"expose_headers,omitempty" ion:"expose_headers" dynamodbav:"expose_headers,omitempty" parquet:"name=expose_headers,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"expose_headers,omitempty" diff:"expose_headers"`
	MaxAge           int32    `bson:"max_age,omitempty" ion:"max_age" dynamodbav:"max_age,omitempty" parquet:"name=max_age,type=INT32" json:"max_age,omitempty" diff:"max_age"`
}

type Stage struct {
	StageName                   string                    `bson:"stage_name,omitempty" ion:"stage_name" dynamodbav:"stage_name,omitempty" parquet:"name=stage_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"stage_name,omitempty" diff:"stage_name"`
	AccessLogSettings           *AccessLogSettings        `bson:"access_log_settings,omitempty" ion:"access_log_settings" dynamodbav:"access_log_settings,omitempty" parquet:"name=access_log_settings" json:"access_log_settings,omitempty" diff:"access_log_settings"`
	ApiGatewayManaged           bool                      `bson:"api_gateway_managed,omitempty" ion:"api_gateway_managed" dynamodbav:"api_gateway_managed" parquet:"name=api_gateway_managed,type=BOOLEAN" json:"api_gateway_managed,omitempty" diff:"api_gateway_managed"`
	AutoDeploy                  bool                      `bson:"auto_deploy,omitempty" ion:"auto_deploy" dynamodbav:"auto_deploy" parquet:"name=auto_deploy,type=BOOLEAN" json:"auto_deploy,omitempty" diff:"auto_deploy"`
	ClientCertificateId         string                    `bson:"client_certificate_id,omitempty" ion:"client_certificate_id" dynamodbav:"client_certificate_id,omitempty" parquet:"name=client_certificate_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"client_certificate_id,omitempty" diff:"client_certificate_id"`
	CreatedDate                 int64                     `bson:"created_date,omitempty" ion:"created_date" dynamodbav:"created_date,omitempty" parquet:"name=created_date,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"created_date,omitempty" diff:"created_date"`
	DefaultRouteSettings        *RouteSettings            `bson:"default_route_settings,omitempty" ion:"default_route_settings" dynamodbav:"default_route_settings,omitempty" parquet:"name=default_route_settings" json:"default_route_settings,omitempty" diff:"default_route_settings"`
	DeploymentId                string                    `bson:"deployment_id,omitempty" ion:"deployment_id" dynamodbav:"deployment_id,omitempty" parquet:"name=deployment_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"deployment_id,omitempty" diff:"deployment_id"`
	Description                 string                    `bson:"description,omitempty" ion:"description" dynamodbav:"description,omitempty" parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8" json:"description,omitempty" diff:"description"`
	LastDeploymentStatusMessage string                    `bson:"last_deployment_status_message,omitempty" ion:"last_deployment_status_message" dynamodbav:"last_deployment_status_message,omitempty" parquet:"name=last_deployment_status_message,type=BYTE_ARRAY,convertedtype=UTF8" json:"last_deployment_status_message,omitempty" diff:"last_deployment_status_message"`
	LastUpdatedDate             int64                     `bson:"last_updated_date,omitempty" ion:"last_updated_date" dynamodbav:"last_updated_date,omitempty" parquet:"name=last_updated_date,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"last_updated_date,omitempty" diff:"last_updated_date"`
	RouteSettings               map[string]*RouteSettings `bson:"route_settings,omitempty" ion:"route_settings" dynamodbav:"route_settings,omitempty" parquet:"name=route_settings,type=MAP,keytype=BYTE_ARRAY,keyconvertedtype=UTF8" json:"route_settings,omitempty" diff:"route_settings"`
	StageVariables              map[string]string         `bson:"stage_variables,omitempty" ion:"stage_variables" dynamodbav:"stage_variables,omitempty" parquet:"name=stage_variables,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"stage_variables,omitempty" diff:"stage_variables"`
	Tags                        map[string]string         `bson:"tags,omitempty" ion:"tags" dynamodbav:"tags,omitempty" parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"tags,omitempty" diff:"tags"`
}

type AccessLogSettings struct {
	DestinationArn string `bson:"destination_arn,omitempty" ion:"destination_arn" dynamodbav:"destination_arn,omitempty" parquet:"name=destination_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"destination_arn,omitempty" diff:"destination_arn"`
	Format         string `bson:"format,omitempty" ion:"format" dynamodbav:"format,omitempty" parquet:"name=format,type=BYTE_ARRAY,convertedtype=UTF8" json:"format,omitempty" diff:"format"`
}

type RouteSettings struct {
	DataTraceEnabled       bool    `bson:"data_trace_enabled,omitempty" ion:"data_trace_enabled" dynamodbav:"data_trace_enabled" parquet:"name=data_trace_enabled,type=BOOLEAN" json:"data_trace_enabled,omitempty" diff:"data_trace_enabled"`
	DetailedMetricsEnabled bool    `bson:"detailed_metrics_enabled,omitempty" ion:"detailed_metrics_enabled" dynamodbav:"detailed_metrics_enabled" parquet:"name=detailed_metrics_enabled,type=BOOLEAN" json:"detailed_metrics_enabled,omitempty" diff:"detailed_metrics_enabled"`
	LoggingLevel           string  `bson:"logging_level,omitempty" ion:"logging_level" dynamodbav:"logging_level,omitempty" parquet:"name=logging_level,type=BYTE_ARRAY,convertedtype=UTF8" json:"logging_level,omitempty" diff:"logging_level"`
	ThrottlingBurstLimit   int32   `bson:"throttling_burst_limit,omitempty" ion:"throttling_burst_limit" dynamodbav:"throttling_burst_limit,omitempty" parquet:"name=throttling_burst_limit,type=INT32" json:"throttling_burst_limit,omitempty" diff:"throttling_burst_limit"`
	ThrottlingRateLimit    float64 `bson:"throttling_rate_limit,omitempty" ion:"throttling_rate_limit" dynamodbav:"throttling_rate_limit,omitempty" parquet:"name=throttling_rate_limit,type=DOUBLE" json:"throttling_rate_limit,omitempty" diff:"throttling_rate_limit"`
}

type GetRouteOutput struct {
	ApiGatewayManaged                bool                             `bson:"api_gateway_managed,omitempty" ion:"api_gateway_managed" dynamodbav:"api_gateway_managed" parquet:"name=api_gateway_managed,type=BOOLEAN" json:"api_gateway_managed,omitempty" diff:"api_gateway_managed"`
	ApiKeyRequired                   bool                             `bson:"api_key_required,omitempty" ion:"api_key_required" dynamodbav:"api_key_required" parquet:"name=api_key_required,type=BOOLEAN" json:"api_key_required,omitempty" diff:"api_key_required"`
	AuthorizationScopes              []string                         `bson:"authorization_scopes,omitempty" ion:"authorization_scopes" dynamodbav:"authorization_scopes,omitempty" parquet:"name=authorization_scopes,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"authorization_scopes,omitempty" diff:"authorization_scopes"`
	AuthorizationType                string                           `bson:"authorization_type,omitempty" ion:"authorization_type" dynamodbav:"authorization_type,omitempty" parquet:"name=authorization_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"authorization_type,omitempty" diff:"authorization_type"`
	AuthorizerId                     string                           `bson:"authorizer_id,omitempty" ion:"authorizer_id" dynamodbav:"authorizer_id,omitempty" parquet:"name=authorizer_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"authorizer_id,omitempty" diff:"authorizer_id"`
	ModelSelectionExpression         string                           `bson:"model_selection_expression,omitempty" ion:"model_selection_expression" dynamodbav:"model_selection_expression,omitempty" parquet:"name=model_selection_expression,type=BYTE_ARRAY,convertedtype=UTF8" json:"model_selection_expression,omitempty" diff:"model_selection_expression"`
	OperationName                    string                           `bson:"operation_name,omitempty" ion:"operation_name" dynamodbav:"operation_name,omitempty" parquet:"name=operation_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"operation_name,omitempty" diff:"operation_name"`
	RequestModels                    map[string]string                `bson:"request_models,omitempty" ion:"request_models" dynamodbav:"request_models,omitempty" parquet:"name=request_models,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"request_models,omitempty" diff:"request_models"`
	RequestParameters                map[string]*ParameterConstraints `bson:"request_parameters,omitempty" ion:"request_parameters" dynamodbav:"request_parameters,omitempty" parquet:"name=request_parameters,type=MAP,keytype=BYTE_ARRAY,keyconvertedtype=UTF8" json:"request_parameters,omitempty" diff:"request_parameters"`
	RouteId                          string                           `bson:"route_id,omitempty" ion:"route_id" dynamodbav:"route_id,omitempty" parquet:"name=route_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"route_id,omitempty" diff:"route_id"`
	RouteKey                         string                           `bson:"route_key,omitempty" ion:"route_key" dynamodbav:"route_key,omitempty" parquet:"name=route_key,type=BYTE_ARRAY,convertedtype=UTF8" json:"route_key,omitempty" diff:"route_key"`
	RouteResponseSelectionExpression string                           `bson:"route_response_selection_expression,omitempty" ion:"route_response_selection_expression" dynamodbav:"route_response_selection_expression,omitempty" parquet:"name=route_response_selection_expression,type=BYTE_ARRAY,convertedtype=UTF8" json:"route_response_selection_expression,omitempty" diff:"route_response_selection_expression"`
	Target                           string                           `bson:"target,omitempty" ion:"target" dynamodbav:"target,omitempty" parquet:"name=target,type=BYTE_ARRAY,convertedtype=UTF8" json:"target,omitempty" diff:"target"`
}

type ParameterConstraints struct {
	Required bool `bson:"required,omitempty" ion:"required" dynamodbav:"required" parquet:"name=required,type=BOOLEAN" json:"required,omitempty" diff:"required"`
}

type Integration struct {
	ApiGatewayManaged                      bool              `bson:"api_gateway_managed,omitempty" ion:"api_gateway_managed" dynamodbav:"api_gateway_managed" parquet:"name=api_gateway_managed,type=BOOLEAN" json:"api_gateway_managed,omitempty" diff:"api_gateway_managed"`
	ConnectionId                           string            `bson:"connection_id,omitempty" ion:"connection_id" dynamodbav:"connection_id,omitempty" parquet:"name=connection_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"connection_id,omitempty" diff:"connection_id"`
	ConnectionType                         string            `bson:"connection_type,omitempty" ion:"connection_type" dynamodbav:"connection_type,omitempty" parquet:"name=connection_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"connection_type,omitempty" diff:"connection_type"`
	ContentHandlingStrategy                string            `bson:"content_handling_strategy,omitempty" ion:"content_handling_strategy" dynamodbav:"content_handling_strategy,omitempty" parquet:"name=content_handling_strategy,type=BYTE_ARRAY,convertedtype=UTF8" json:"content_handling_strategy,omitempty" diff:"content_handling_strategy"`
	CredentialsArn                         string            `bson:"credentials_arn,omitempty" ion:"credentials_arn" dynamodbav:"credentials_arn,omitempty" parquet:"name=credentials_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"credentials_arn,omitempty" diff:"credentials_arn"`
	Description                            string            `bson:"description,omitempty" ion:"description" dynamodbav:"description,omitempty" parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8" json:"description,omitempty" diff:"description"`
	IntegrationId                          string            `bson:"integration_id,omitempty" ion:"integration_id" dynamodbav:"integration_id,omitempty" parquet:"name=integration_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"integration_id,omitempty" diff:"integration_id"`
	IntegrationMethod                      string            `bson:"integration_method,omitempty" ion:"integration_method" dynamodbav:"integration_method,omitempty" parquet:"name=integration_method,type=BYTE_ARRAY,convertedtype=UTF8" json:"integration_method,omitempty" diff:"integration_method"`
	IntegrationResponseSelectionExpression string            `bson:"integration_response_selection_expression,omitempty" ion:"integration_response_selection_expression" dynamodbav:"integration_response_selection_expression,omitempty" parquet:"name=integration_response_selection_expression,type=BYTE_ARRAY,convertedtype=UTF8" json:"integration_response_selection_expression,omitempty" diff:"integration_response_selection_expression"`
	IntegrationSubtype                     string            `bson:"integration_subtype,omitempty" ion:"integration_subtype" dynamodbav:"integration_subtype,omitempty" parquet:"name=integration_subtype,type=BYTE_ARRAY,convertedtype=UTF8" json:"integration_subtype,omitempty" diff:"integration_subtype"`
	IntegrationType                        string            `bson:"integration_type,omitempty" ion:"integration_type" dynamodbav:"integration_type,omitempty" parquet:"name=integration_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"integration_type,omitempty" diff:"integration_type"`
	IntegrationUri                         string            `bson:"integration_uri,omitempty" ion:"integration_uri" dynamodbav:"integration_uri,omitempty" parquet:"name=integration_uri,type=BYTE_ARRAY,convertedtype=UTF8" json:"integration_uri,omitempty" diff:"integration_uri"`
	PassthroughBehavior                    string            `bson:"passthrough_behavior,omitempty" ion:"passthrough_behavior" dynamodbav:"passthrough_behavior,omitempty" parquet:"name=passthrough_behavior,type=BYTE_ARRAY,convertedtype=UTF8" json:"passthrough_behavior,omitempty" diff:"passthrough_behavior"`
	PayloadFormatVersion                   string            `bson:"payload_format_version,omitempty" ion:"payload_format_version" dynamodbav:"payload_format_version,omitempty" parquet:"name=payload_format_version,type=BYTE_ARRAY,convertedtype=UTF8" json:"payload_format_version,omitempty" diff:"payload_format_version"`
	RequestParameters                      map[string]string `bson:"request_parameters,omitempty" ion:"request_parameters" dynamodbav:"request_parameters,omitempty" parquet:"name=request_parameters,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"request_parameters,omitempty" diff:"request_parameters"`
	RequestTemplates                       map[string]string `bson:"request_templates,omitempty" ion:"request_templates" dynamodbav:"request_templates,omitempty" parquet:"name=request_templates,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"request_templates,omitempty" diff:"request_templates"`
	TemplateSelectionExpression            string            `bson:"template_selection_expression,omitempty" ion:"template_selection_expression" dynamodbav:"template_selection_expression,omitempty" parquet:"name=template_selection_expression,type=BYTE_ARRAY,convertedtype=UTF8" json:"template_selection_expression,omitempty" diff:"template_selection_expression"`
	TimeoutInMillis                        int32             `bson:"timeout_in_millis,omitempty" ion:"timeout_in_millis" dynamodbav:"timeout_in_millis,omitempty" parquet:"name=timeout_in_millis,type=INT32" json:"timeout_in_millis,omitempty" diff:"timeout_in_millis"`
	TlsConfig                              *TlsConfig        `bson:"tls_config,omitempty" ion:"tls_config" dynamodbav:"tls_config,omitempty" parquet:"name=tls_config" json:"tls_config,omitempty" diff:"tls_config"`
}

type TlsConfig struct {
	ServerNameToVerify string `bson:"server_name_to_verify,omitempty" ion:"server_name_to_verify" dynamodbav:"server_name_to_verify,omitempty" parquet:"name=server_name_to_verify,type=BYTE_ARRAY,convertedtype=UTF8" json:"server_name_to_verify,omitempty" diff:"server_name_to_verify"`
}

type Authorizer struct {
	Name                           string            `bson:"name,omitempty" ion:"name" dynamodbav:"name,omitempty" parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" json:"name,omitempty" diff:"name"`
	AuthorizerCredentialsArn       string            `bson:"authorizer_credentials_arn,omitempty" ion:"authorizer_credentials_arn" dynamodbav:"authorizer_credentials_arn,omitempty" parquet:"name=authorizer_credentials_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"authorizer_credentials_arn,omitempty" diff:"authorizer_credentials_arn"`
	AuthorizerId                   string            `bson:"authorizer_id,omitempty" ion:"authorizer_id" dynamodbav:"authorizer_id,omitempty" parquet:"name=authorizer_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"authorizer_id,omitempty" diff:"authorizer_id"`
	AuthorizerPayloadFormatVersion string            `bson:"authorizer_payload_format_version,omitempty" ion:"authorizer_payload_format_version" dynamodbav:"authorizer_payload_format_version,omitempty" parquet:"name=authorizer_payload_format_version,type=BYTE_ARRAY,convertedtype=UTF8" json:"authorizer_payload_format_version,omitempty" diff:"authorizer_payload_format_version"`
	AuthorizerResultTtlInSeconds   int32             `bson:"authorizer_result_ttl_in_seconds,omitempty" ion:"authorizer_result_ttl_in_seconds" dynamodbav:"authorizer_result_ttl_in_seconds,omitempty" parquet:"name=authorizer_result_ttl_in_seconds,type=INT32" json:"authorizer_result_ttl_in_seconds,omitempty" diff:"authorizer_result_ttl_in_seconds"`
	AuthorizerType                 string            `bson:"authorizer_type,omitempty" ion:"authorizer_type" dynamodbav:"authorizer_type,omitempty" parquet:"name=authorizer_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"authorizer_type,omitempty" diff:"authorizer_type"`
	AuthorizerUri                  string            `bson:"authorizer_uri,omitempty" ion:"authorizer_uri" dynamodbav:"authorizer_uri,omitempty" parquet:"name=authorizer_uri,type=BYTE_ARRAY,convertedtype=UTF8" json:"authorizer_uri,omitempty" diff:"authorizer_uri"`
	EnableSimpleResponses          bool              `bson:"enable_simple_responses,omitempty" ion:"enable_simple_responses" dynamodbav:"enable_simple_responses" parquet:"name=enable_simple_responses,type=BOOLEAN" json:"enable_simple_responses,omitempty" diff:"enable_simple_responses"`
	IdentitySource                 []string          `bson:"identity_source,omitempty" ion:"identity_source" dynamodbav:"identity_source,omitempty" parquet:"name=identity_source,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"identity_source,omitempty" diff:"identity_source"`
	IdentityValidationExpression   string            `bson:"identity_validation_expression,omitempty" ion:"identity_validation_expression" dynamodbav:"identity_validation_expression,omitempty" parquet:"name=identity_validation_expression,type=BYTE_ARRAY,convertedtype=UTF8" json:"identity_validation_expression,omitempty" diff:"identity_validation_expression"`
	JwtConfiguration               *JWTConfiguration `bson:"jwt_configuration,omitempty" ion:"jwt_configuration" dynamodbav:"jwt_configuration,omitempty" parquet:"name=jwt_configuration" json:"jwt_configuration,omitempty" diff:"jwt_configuration"`
}

type JWTConfiguration struct {
	Audience []string `bson:"audience,omitempty" ion:"audience" dynamodbav:"audience,omitempty" parquet:"name=audience,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"audience,omitempty" diff:"audience"`
	Issuer   string   `bson:"issuer,omitempty" ion:"issuer" dynamodbav:"issuer,omitempty" parquet:"name=issuer,type=BYTE_ARRAY,convertedtype=UTF8" json:"issuer,omitempty" diff:"issuer"`
}

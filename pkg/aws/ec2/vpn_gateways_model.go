// AUTOGENERATED, DO NOT EDIT
package ec2

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"sync"
)

var customVpnGatewayModelPostprocessingFuncs []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *VpnGatewayModel) = []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *VpnGatewayModel){}
var customVpnGatewayModelFuncsLock sync.Mutex

func registerCustomVpnGatewayModelPostprocessingFunc(f func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *VpnGatewayModel)) {
	customVpnGatewayModelFuncsLock.Lock()
	defer customVpnGatewayModelFuncsLock.Unlock()

	customVpnGatewayModelPostprocessingFuncs = append(customVpnGatewayModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("vpn_gateways", VpnGatewayDataSource)
}

type VpnGatewayModel struct {
	AmazonSideAsn    int64  `parquet:"name=amazon_side_asn,type=INT64"`
	AvailabilityZone string `parquet:"name=availability_zone,type=BYTE_ARRAY,convertedtype=UTF8"`
	State            string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
	TagsOld          []*TagVpnGatewayModel
	Type             string                          `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8"`
	VpcAttachments   []*VpcAttachmentVpnGatewayModel `parquet:"name=vpc_attachments,type=MAP,convertedtype=LIST"`
	VpnGatewayId     string                          `parquet:"name=vpn_gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	Tags             map[string]string               `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	AccountId        string                          `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Region           string                          `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReportTime       int64                           `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type TagVpnGatewayModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type VpcAttachmentVpnGatewayModel struct {
	State string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
	VpcId string `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func VpnGatewayDataSource(ctx context.Context, client *ec2.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(VpnGatewayModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	params := &ec2.DescribeVpnGatewaysInput{}

	result, err := client.DescribeVpnGateways(ctx, params)
	if err != nil {
		logrus.WithFields(logrus.Fields{
			"service":     storageConfig.Service,
			"data_source": storageConfig.DataSource,
			"account_id":  storageConfig.AccountId,
			"region":      storageConfig.Region,
			"cloud":       storageConfig.Cloud,
			"error":       err,
		}).Error("error calling DescribeVpnGateways")
		return err
	}

	results := []*ec2.DescribeVpnGatewaysOutput{result}
	for _, output := range results {

		for _, var0 := range output.VpnGateways {

			model := new(VpnGatewayModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customVpnGatewayModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing VpnGatewayModel: %v", err))
			}
		}

	}

	return nil
}

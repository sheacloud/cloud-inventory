// AUTOGENERATED, DO NOT EDIT
package ec2

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"sync"
)

var customSecurityGroupModelPostprocessingFuncs []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *SecurityGroupModel) = []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *SecurityGroupModel){}
var customSecurityGroupModelFuncsLock sync.Mutex

func registerCustomSecurityGroupModelPostprocessingFunc(f func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *SecurityGroupModel)) {
	customSecurityGroupModelFuncsLock.Lock()
	defer customSecurityGroupModelFuncsLock.Unlock()

	customSecurityGroupModelPostprocessingFuncs = append(customSecurityGroupModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("security_groups", SecurityGroupDataSource)
}

type SecurityGroupModel struct {
	Description         string                            `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8"`
	GroupId             string                            `parquet:"name=group_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	GroupName           string                            `parquet:"name=group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	IpPermissions       []*IpPermissionSecurityGroupModel `parquet:"name=ip_permissions,type=LIST"`
	IpPermissionsEgress []*IpPermissionSecurityGroupModel `parquet:"name=ip_permissions_egress,type=LIST"`
	OwnerId             string                            `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Tags                map[string]string                 `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	VpcId               string                            `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	AccountId           string                            `parquet:"name=account_id, type=BYTE_ARRAY, convertedtype=UTF8"`
	Region              string                            `parquet:"name=region, type=BYTE_ARRAY, convertedtype=UTF8"`
	ReportTime          int64                             `parquet:"name=report_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
}

type IpPermissionSecurityGroupModel struct {
	FromPort         int32                                `parquet:"name=from_port,type=INT32"`
	IpProtocol       string                               `parquet:"name=ip_protocol,type=BYTE_ARRAY,convertedtype=UTF8"`
	IpRanges         []*IpRangeSecurityGroupModel         `parquet:"name=ip_ranges,type=LIST"`
	Ipv6Ranges       []*Ipv6RangeSecurityGroupModel       `parquet:"name=ipv6_ranges,type=LIST"`
	PrefixListIds    []*PrefixListIdSecurityGroupModel    `parquet:"name=prefix_list_ids,type=LIST"`
	ToPort           int32                                `parquet:"name=to_port,type=INT32"`
	UserIdGroupPairs []*UserIdGroupPairSecurityGroupModel `parquet:"name=user_id_group_pairs,type=LIST"`
}

type IpRangeSecurityGroupModel struct {
	CidrIp      string `parquet:"name=cidr_ip,type=BYTE_ARRAY,convertedtype=UTF8"`
	Description string `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Ipv6RangeSecurityGroupModel struct {
	CidrIpv6    string `parquet:"name=cidr_ipv6,type=BYTE_ARRAY,convertedtype=UTF8"`
	Description string `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type PrefixListIdSecurityGroupModel struct {
	Description  string `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8"`
	PrefixListId string `parquet:"name=prefix_list_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type UserIdGroupPairSecurityGroupModel struct {
	Description            string `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8"`
	GroupId                string `parquet:"name=group_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	GroupName              string `parquet:"name=group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	PeeringStatus          string `parquet:"name=peering_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	UserId                 string `parquet:"name=user_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	VpcId                  string `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	VpcPeeringConnectionId string `parquet:"name=vpc_peering_connection_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TagSecurityGroupModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func SecurityGroupDataSource(ctx context.Context, client *ec2.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(SecurityGroupModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := ec2.NewDescribeSecurityGroupsPaginator(client, &ec2.DescribeSecurityGroupsInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeSecurityGroups")
			return err
		}

		for _, var0 := range output.SecurityGroups {

			model := new(SecurityGroupModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customSecurityGroupModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing SecurityGroupModel: %v", err))
			}
		}

	}

	return nil
}

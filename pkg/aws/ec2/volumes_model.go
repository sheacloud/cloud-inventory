// AUTOGENERATED, DO NOT EDIT
package ec2

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"sync"
)

var customVolumeModelPostprocessingFuncs []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *VolumeModel) = []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *VolumeModel){}
var customVolumeModelFuncsLock sync.Mutex

func registerCustomVolumeModelPostprocessingFunc(f func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *VolumeModel)) {
	customVolumeModelFuncsLock.Lock()
	defer customVolumeModelFuncsLock.Unlock()

	customVolumeModelPostprocessingFuncs = append(customVolumeModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("volumes", VolumeDataSource)
}

type VolumeModel struct {
	Attachments        []*VolumeAttachmentVolumeModel `parquet:"name=attachments,type=MAP,convertedtype=LIST"`
	AvailabilityZone   string                         `parquet:"name=availability_zone,type=BYTE_ARRAY,convertedtype=UTF8"`
	CreateTime         *time.Time
	Encrypted          bool   `parquet:"name=encrypted,type=BOOLEAN"`
	FastRestored       bool   `parquet:"name=fast_restored,type=BOOLEAN"`
	Iops               int32  `parquet:"name=iops,type=INT32"`
	KmsKeyId           string `parquet:"name=kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	MultiAttachEnabled bool   `parquet:"name=multi_attach_enabled,type=BOOLEAN"`
	OutpostArn         string `parquet:"name=outpost_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	Size               int32  `parquet:"name=size,type=INT32"`
	SnapshotId         string `parquet:"name=snapshot_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	State              string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
	TagsOld            []*TagVolumeModel
	Throughput         int32             `parquet:"name=throughput,type=INT32"`
	VolumeId           string            `parquet:"name=volume_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	VolumeType         string            `parquet:"name=volume_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	CreateTimeMilli    int64             `parquet:"name=create_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	Tags               map[string]string `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	AccountId          string            `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Region             string            `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReportTime         int64             `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type VolumeAttachmentVolumeModel struct {
	AttachTime          *time.Time
	DeleteOnTermination bool   `parquet:"name=delete_on_termination,type=BOOLEAN"`
	Device              string `parquet:"name=device,type=BYTE_ARRAY,convertedtype=UTF8"`
	InstanceId          string `parquet:"name=instance_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	State               string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
	VolumeId            string `parquet:"name=volume_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	AttachTimeMilli     int64  `parquet:"name=attach_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type TagVolumeModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func VolumeDataSource(ctx context.Context, client *ec2.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(VolumeModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := ec2.NewDescribeVolumesPaginator(client, &ec2.DescribeVolumesInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeVolumes")
			return err
		}

		for _, var0 := range output.Volumes {

			model := new(VolumeModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customVolumeModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing VolumeModel: %v", err))
			}
		}

	}

	return nil
}

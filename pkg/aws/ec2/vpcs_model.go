// AUTOGENERATED, DO NOT EDIT
package ec2

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"sync"
)

var customVpcModelPostprocessingFuncs []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *VpcModel) = []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *VpcModel){}
var customVpcModelFuncsLock sync.Mutex

func registerCustomVpcModelPostprocessingFunc(f func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *VpcModel)) {
	customVpcModelFuncsLock.Lock()
	defer customVpcModelFuncsLock.Unlock()

	customVpcModelPostprocessingFuncs = append(customVpcModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("vpcs", VpcDataSource)
}

type VpcModel struct {
	CidrBlock                   string                                 `parquet:"name=cidr_block,type=BYTE_ARRAY,convertedtype=UTF8"`
	CidrBlockAssociationSet     []*VpcCidrBlockAssociationVpcModel     `parquet:"name=cidr_block_association_set,type=LIST"`
	DhcpOptionsId               string                                 `parquet:"name=dhcp_options_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	InstanceTenancy             string                                 `parquet:"name=instance_tenancy,type=BYTE_ARRAY,convertedtype=UTF8"`
	Ipv6CidrBlockAssociationSet []*VpcIpv6CidrBlockAssociationVpcModel `parquet:"name=ipv6_cidr_block_association_set,type=LIST"`
	IsDefault                   bool                                   `parquet:"name=is_default,type=BOOLEAN"`
	OwnerId                     string                                 `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	State                       string                                 `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
	Tags                        map[string]string                      `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	VpcId                       string                                 `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	AccountId                   string                                 `parquet:"name=account_id, type=BYTE_ARRAY, convertedtype=UTF8"`
	Region                      string                                 `parquet:"name=region, type=BYTE_ARRAY, convertedtype=UTF8"`
	ReportTime                  int64                                  `parquet:"name=report_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
}

type VpcCidrBlockAssociationVpcModel struct {
	AssociationId  string                     `parquet:"name=association_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	CidrBlock      string                     `parquet:"name=cidr_block,type=BYTE_ARRAY,convertedtype=UTF8"`
	CidrBlockState *VpcCidrBlockStateVpcModel `parquet:"name=cidr_block_state"`
}

type VpcCidrBlockStateVpcModel struct {
	State         string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
	StatusMessage string `parquet:"name=status_message,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type VpcIpv6CidrBlockAssociationVpcModel struct {
	AssociationId      string                     `parquet:"name=association_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Ipv6CidrBlock      string                     `parquet:"name=ipv6_cidr_block,type=BYTE_ARRAY,convertedtype=UTF8"`
	Ipv6CidrBlockState *VpcCidrBlockStateVpcModel `parquet:"name=ipv6_cidr_block_state"`
	Ipv6Pool           string                     `parquet:"name=ipv6_pool,type=BYTE_ARRAY,convertedtype=UTF8"`
	NetworkBorderGroup string                     `parquet:"name=network_border_group,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TagVpcModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func VpcDataSource(ctx context.Context, client *ec2.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(VpcModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := ec2.NewDescribeVpcsPaginator(client, &ec2.DescribeVpcsInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeVpcs")
			return err
		}

		for _, var0 := range output.Vpcs {

			model := new(VpcModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customVpcModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing VpcModel: %v", err))
			}
		}

	}

	return nil
}

// AUTOGENERATED, DO NOT EDIT
package ec2

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
)

var customVpcPeeringConnectionModelPostprocessingFuncs []func(x *VpcPeeringConnectionModel) = []func(x *VpcPeeringConnectionModel){}
var customVpcPeeringConnectionModelFuncsLock sync.Mutex

func registerCustomVpcPeeringConnectionModelPostprocessingFunc(f func(x *VpcPeeringConnectionModel)) {
	customVpcPeeringConnectionModelFuncsLock.Lock()
	defer customVpcPeeringConnectionModelFuncsLock.Unlock()

	customVpcPeeringConnectionModelPostprocessingFuncs = append(customVpcPeeringConnectionModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("vpc_peering_connections", VpcPeeringConnectionDataSource)
}

type VpcPeeringConnectionModel struct {
	AccepterVpcInfo        *VpcPeeringConnectionVpcInfoVpcPeeringConnectionModel `parquet:"name=accepter_vpc_info"`
	ExpirationTime         *time.Time
	ExpirationTimeMilli    int64                                                     `parquet:"name=expiration_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
	RequesterVpcInfo       *VpcPeeringConnectionVpcInfoVpcPeeringConnectionModel     `parquet:"name=requester_vpc_info"`
	Status                 *VpcPeeringConnectionStateReasonVpcPeeringConnectionModel `parquet:"name=status"`
	Tags                   map[string]string                                         `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	VpcPeeringConnectionId string                                                    `parquet:"name=vpc_peering_connection_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	AccountId              string                                                    `parquet:"name=account_id, type=BYTE_ARRAY, convertedtype=UTF8"`
	Region                 string                                                    `parquet:"name=region, type=BYTE_ARRAY, convertedtype=UTF8"`
	ReportTime             int64                                                     `parquet:"name=report_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
}

type VpcPeeringConnectionVpcInfoVpcPeeringConnectionModel struct {
	CidrBlock        string                                                           `parquet:"name=cidr_block,type=BYTE_ARRAY,convertedtype=UTF8"`
	CidrBlockSet     []*CidrBlockVpcPeeringConnectionModel                            `parquet:"name=cidr_block_set,type=LIST"`
	Ipv6CidrBlockSet []*Ipv6CidrBlockVpcPeeringConnectionModel                        `parquet:"name=ipv6_cidr_block_set,type=LIST"`
	OwnerId          string                                                           `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	PeeringOptions   *VpcPeeringConnectionOptionsDescriptionVpcPeeringConnectionModel `parquet:"name=peering_options"`
	Region           string                                                           `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
	VpcId            string                                                           `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type CidrBlockVpcPeeringConnectionModel struct {
	CidrBlock string `parquet:"name=cidr_block,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Ipv6CidrBlockVpcPeeringConnectionModel struct {
	Ipv6CidrBlock string `parquet:"name=ipv6_cidr_block,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type VpcPeeringConnectionOptionsDescriptionVpcPeeringConnectionModel struct {
	AllowDnsResolutionFromRemoteVpc            bool `parquet:"name=allow_dns_resolution_from_remote_vpc,type=BOOLEAN"`
	AllowEgressFromLocalClassicLinkToRemoteVpc bool `parquet:"name=allow_egress_from_local_classic_link_to_remote_vpc,type=BOOLEAN"`
	AllowEgressFromLocalVpcToRemoteClassicLink bool `parquet:"name=allow_egress_from_local_vpc_to_remote_classic_link,type=BOOLEAN"`
}

type VpcPeeringConnectionStateReasonVpcPeeringConnectionModel struct {
	Code    string `parquet:"name=code,type=BYTE_ARRAY,convertedtype=UTF8"`
	Message string `parquet:"name=message,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TagVpcPeeringConnectionModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func VpcPeeringConnectionDataSource(ctx context.Context, client *ec2.Client, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(VpcPeeringConnectionModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := ec2.NewDescribeVpcPeeringConnectionsPaginator(client, &ec2.DescribeVpcPeeringConnectionsInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeVpcPeeringConnections")
			return err
		}

		for _, var0 := range output.VpcPeeringConnections {

			model := new(VpcPeeringConnectionModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customVpcPeeringConnectionModelPostprocessingFuncs {
				f(model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing VpcPeeringConnectionModel: %v", err))
			}
		}

	}

	return nil
}

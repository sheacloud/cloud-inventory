// AUTOGENERATED, DO NOT EDIT
package ec2

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"sync"
)

var customInternetGatewayModelPostprocessingFuncs []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *InternetGatewayModel) = []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *InternetGatewayModel){}
var customInternetGatewayModelFuncsLock sync.Mutex

func registerCustomInternetGatewayModelPostprocessingFunc(f func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *InternetGatewayModel)) {
	customInternetGatewayModelFuncsLock.Lock()
	defer customInternetGatewayModelFuncsLock.Unlock()

	customInternetGatewayModelPostprocessingFuncs = append(customInternetGatewayModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("internet_gateways", InternetGatewayDataSource)
}

type InternetGatewayModel struct {
	Attachments       []*InternetGatewayAttachmentInternetGatewayModel `parquet:"name=attachments,type=LIST"`
	InternetGatewayId string                                           `parquet:"name=internet_gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	OwnerId           string                                           `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Tags              map[string]string                                `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	AccountId         string                                           `parquet:"name=account_id, type=BYTE_ARRAY, convertedtype=UTF8"`
	Region            string                                           `parquet:"name=region, type=BYTE_ARRAY, convertedtype=UTF8"`
	ReportTime        int64                                            `parquet:"name=report_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
}

type InternetGatewayAttachmentInternetGatewayModel struct {
	State string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
	VpcId string `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TagInternetGatewayModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func InternetGatewayDataSource(ctx context.Context, client *ec2.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(InternetGatewayModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := ec2.NewDescribeInternetGatewaysPaginator(client, &ec2.DescribeInternetGatewaysInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeInternetGateways")
			return err
		}

		for _, var0 := range output.InternetGateways {

			model := new(InternetGatewayModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customInternetGatewayModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing InternetGatewayModel: %v", err))
			}
		}

	}

	return nil
}

// AUTOGENERATED, DO NOT EDIT
package ec2

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
)

var customTransitGatewayRouteTableModelPostprocessingFuncs []func(x *TransitGatewayRouteTableModel) = []func(x *TransitGatewayRouteTableModel){}
var customTransitGatewayRouteTableModelFuncsLock sync.Mutex

func registerCustomTransitGatewayRouteTableModelPostprocessingFunc(f func(x *TransitGatewayRouteTableModel)) {
	customTransitGatewayRouteTableModelFuncsLock.Lock()
	defer customTransitGatewayRouteTableModelFuncsLock.Unlock()

	customTransitGatewayRouteTableModelPostprocessingFuncs = append(customTransitGatewayRouteTableModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("transit_gateway_route_tables", TransitGatewayRouteTableDataSource)
}

type TransitGatewayRouteTableModel struct {
	CreationTime                 *time.Time
	CreationTimeMilli            int64             `parquet:"name=creation_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
	DefaultAssociationRouteTable bool              `parquet:"name=default_association_route_table,type=BOOLEAN"`
	DefaultPropagationRouteTable bool              `parquet:"name=default_propagation_route_table,type=BOOLEAN"`
	State                        string            `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
	Tags                         map[string]string `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	TransitGatewayId             string            `parquet:"name=transit_gateway_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	TransitGatewayRouteTableId   string            `parquet:"name=transit_gateway_route_table_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	AccountId                    string            `parquet:"name=account_id, type=BYTE_ARRAY, convertedtype=UTF8"`
	Region                       string            `parquet:"name=region, type=BYTE_ARRAY, convertedtype=UTF8"`
	ReportTime                   int64             `parquet:"name=report_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
}

type TagTransitGatewayRouteTableModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func TransitGatewayRouteTableDataSource(ctx context.Context, client *ec2.Client, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(TransitGatewayRouteTableModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := ec2.NewDescribeTransitGatewayRouteTablesPaginator(client, &ec2.DescribeTransitGatewayRouteTablesInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeTransitGatewayRouteTables")
			return err
		}

		for _, var0 := range output.TransitGatewayRouteTables {

			model := new(TransitGatewayRouteTableModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customTransitGatewayRouteTableModelPostprocessingFuncs {
				f(model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing TransitGatewayRouteTableModel: %v", err))
			}
		}

	}

	return nil
}

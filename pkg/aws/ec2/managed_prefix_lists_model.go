// AUTOGENERATED, DO NOT EDIT
package ec2

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"sync"
)

var customManagedPrefixListModelPostprocessingFuncs []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *ManagedPrefixListModel) = []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *ManagedPrefixListModel){}
var customManagedPrefixListModelFuncsLock sync.Mutex

func registerCustomManagedPrefixListModelPostprocessingFunc(f func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *ManagedPrefixListModel)) {
	customManagedPrefixListModelFuncsLock.Lock()
	defer customManagedPrefixListModelFuncsLock.Unlock()

	customManagedPrefixListModelPostprocessingFuncs = append(customManagedPrefixListModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("managed_prefix_lists", ManagedPrefixListDataSource)
}

type ManagedPrefixListModel struct {
	AddressFamily  string `parquet:"name=address_family,type=BYTE_ARRAY,convertedtype=UTF8"`
	MaxEntries     int32  `parquet:"name=max_entries,type=INT32"`
	OwnerId        string `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	PrefixListArn  string `parquet:"name=prefix_list_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	PrefixListId   string `parquet:"name=prefix_list_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	PrefixListName string `parquet:"name=prefix_list_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	State          string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
	StateMessage   string `parquet:"name=state_message,type=BYTE_ARRAY,convertedtype=UTF8"`
	TagsOld        []*TagManagedPrefixListModel
	Version        int64             `parquet:"name=version,type=INT64"`
	Tags           map[string]string `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	AccountId      string            `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Region         string            `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReportTime     int64             `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type TagManagedPrefixListModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func ManagedPrefixListDataSource(ctx context.Context, client *ec2.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(ManagedPrefixListModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := ec2.NewDescribeManagedPrefixListsPaginator(client, &ec2.DescribeManagedPrefixListsInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeManagedPrefixLists")
			return err
		}

		for _, var0 := range output.PrefixLists {

			model := new(ManagedPrefixListModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.Tags)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customManagedPrefixListModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing ManagedPrefixListModel: %v", err))
			}
		}

	}

	return nil
}

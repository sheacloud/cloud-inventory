// AUTOGENERATED, DO NOT EDIT
package ec2

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"sync"
)

var customImageModelPostprocessingFuncs []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *ImageModel) = []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *ImageModel){}
var customImageModelFuncsLock sync.Mutex

func registerCustomImageModelPostprocessingFunc(f func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *ImageModel)) {
	customImageModelFuncsLock.Lock()
	defer customImageModelFuncsLock.Unlock()

	customImageModelPostprocessingFuncs = append(customImageModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("images", ImageDataSource)
}

type ImageModel struct {
	Architecture        string                          `parquet:"name=architecture,type=BYTE_ARRAY,convertedtype=UTF8"`
	BlockDeviceMappings []*BlockDeviceMappingImageModel `parquet:"name=block_device_mappings,type=LIST"`
	BootMode            string                          `parquet:"name=boot_mode,type=BYTE_ARRAY,convertedtype=UTF8"`
	CreationDate        string                          `parquet:"name=creation_date,type=BYTE_ARRAY,convertedtype=UTF8"`
	DeprecationTime     string                          `parquet:"name=deprecation_time,type=BYTE_ARRAY,convertedtype=UTF8"`
	Description         string                          `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8"`
	EnaSupport          bool                            `parquet:"name=ena_support,type=BOOLEAN"`
	Hypervisor          string                          `parquet:"name=hypervisor,type=BYTE_ARRAY,convertedtype=UTF8"`
	ImageId             string                          `parquet:"name=image_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	ImageLocation       string                          `parquet:"name=image_location,type=BYTE_ARRAY,convertedtype=UTF8"`
	ImageOwnerAlias     string                          `parquet:"name=image_owner_alias,type=BYTE_ARRAY,convertedtype=UTF8"`
	ImageType           string                          `parquet:"name=image_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	KernelId            string                          `parquet:"name=kernel_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Name                string                          `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8"`
	OwnerId             string                          `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Platform            string                          `parquet:"name=platform,type=BYTE_ARRAY,convertedtype=UTF8"`
	PlatformDetails     string                          `parquet:"name=platform_details,type=BYTE_ARRAY,convertedtype=UTF8"`
	ProductCodes        []*ProductCodeImageModel        `parquet:"name=product_codes,type=LIST"`
	Public              bool                            `parquet:"name=public,type=BOOLEAN"`
	RamdiskId           string                          `parquet:"name=ramdisk_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	RootDeviceName      string                          `parquet:"name=root_device_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	RootDeviceType      string                          `parquet:"name=root_device_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	SriovNetSupport     string                          `parquet:"name=sriov_net_support,type=BYTE_ARRAY,convertedtype=UTF8"`
	State               string                          `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
	StateReason         *StateReasonImageModel          `parquet:"name=state_reason"`
	Tags                map[string]string               `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	UsageOperation      string                          `parquet:"name=usage_operation,type=BYTE_ARRAY,convertedtype=UTF8"`
	VirtualizationType  string                          `parquet:"name=virtualization_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	AccountId           string                          `parquet:"name=account_id, type=BYTE_ARRAY, convertedtype=UTF8"`
	Region              string                          `parquet:"name=region, type=BYTE_ARRAY, convertedtype=UTF8"`
	ReportTime          int64                           `parquet:"name=report_time, type=INT64, convertedtype=TIMESTAMP_MILLIS"`
}

type BlockDeviceMappingImageModel struct {
	DeviceName  string                    `parquet:"name=device_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Ebs         *EbsBlockDeviceImageModel `parquet:"name=ebs"`
	NoDevice    string                    `parquet:"name=no_device,type=BYTE_ARRAY,convertedtype=UTF8"`
	VirtualName string                    `parquet:"name=virtual_name,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type EbsBlockDeviceImageModel struct {
	DeleteOnTermination bool   `parquet:"name=delete_on_termination,type=BOOLEAN"`
	Encrypted           bool   `parquet:"name=encrypted,type=BOOLEAN"`
	Iops                int32  `parquet:"name=iops,type=INT32"`
	KmsKeyId            string `parquet:"name=kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	OutpostArn          string `parquet:"name=outpost_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	SnapshotId          string `parquet:"name=snapshot_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Throughput          int32  `parquet:"name=throughput,type=INT32"`
	VolumeSize          int32  `parquet:"name=volume_size,type=INT32"`
	VolumeType          string `parquet:"name=volume_type,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ProductCodeImageModel struct {
	ProductCodeId   string `parquet:"name=product_code_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	ProductCodeType string `parquet:"name=product_code_type,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type StateReasonImageModel struct {
	Code    string `parquet:"name=code,type=BYTE_ARRAY,convertedtype=UTF8"`
	Message string `parquet:"name=message,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TagImageModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

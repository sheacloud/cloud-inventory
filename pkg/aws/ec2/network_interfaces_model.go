// AUTOGENERATED, DO NOT EDIT
package ec2

import (
	"fmt"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/internal/storage"
	"github.com/sirupsen/logrus"
	"time"

	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"sync"
)

var customNetworkInterfaceModelPostprocessingFuncs []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *NetworkInterfaceModel) = []func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *NetworkInterfaceModel){}
var customNetworkInterfaceModelFuncsLock sync.Mutex

func registerCustomNetworkInterfaceModelPostprocessingFunc(f func(ctx context.Context, client *ec2.Client, cfg aws.Config, x *NetworkInterfaceModel)) {
	customNetworkInterfaceModelFuncsLock.Lock()
	defer customNetworkInterfaceModelFuncsLock.Unlock()

	customNetworkInterfaceModelPostprocessingFuncs = append(customNetworkInterfaceModelPostprocessingFuncs, f)
}

func init() {
	Controller.RegisterDataSource("network_interfaces", NetworkInterfaceDataSource)
}

type NetworkInterfaceModel struct {
	Association        *NetworkInterfaceAssociationNetworkInterfaceModel        `parquet:"name=association"`
	Attachment         *NetworkInterfaceAttachmentNetworkInterfaceModel         `parquet:"name=attachment"`
	AvailabilityZone   string                                                   `parquet:"name=availability_zone,type=BYTE_ARRAY,convertedtype=UTF8"`
	Description        string                                                   `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8"`
	Groups             []*GroupIdentifierNetworkInterfaceModel                  `parquet:"name=groups,type=MAP,convertedtype=LIST"`
	InterfaceType      string                                                   `parquet:"name=interface_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	Ipv4Prefixes       []*Ipv4PrefixSpecificationNetworkInterfaceModel          `parquet:"name=ipv4_prefixes,type=MAP,convertedtype=LIST"`
	Ipv6Addresses      []*NetworkInterfaceIpv6AddressNetworkInterfaceModel      `parquet:"name=ipv6_addresses,type=MAP,convertedtype=LIST"`
	Ipv6Prefixes       []*Ipv6PrefixSpecificationNetworkInterfaceModel          `parquet:"name=ipv6_prefixes,type=MAP,convertedtype=LIST"`
	MacAddress         string                                                   `parquet:"name=mac_address,type=BYTE_ARRAY,convertedtype=UTF8"`
	NetworkInterfaceId string                                                   `parquet:"name=network_interface_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	OutpostArn         string                                                   `parquet:"name=outpost_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	OwnerId            string                                                   `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	PrivateDnsName     string                                                   `parquet:"name=private_dns_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	PrivateIpAddress   string                                                   `parquet:"name=private_ip_address,type=BYTE_ARRAY,convertedtype=UTF8"`
	PrivateIpAddresses []*NetworkInterfacePrivateIpAddressNetworkInterfaceModel `parquet:"name=private_ip_addresses,type=MAP,convertedtype=LIST"`
	RequesterId        string                                                   `parquet:"name=requester_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	RequesterManaged   bool                                                     `parquet:"name=requester_managed,type=BOOLEAN"`
	SourceDestCheck    bool                                                     `parquet:"name=source_dest_check,type=BOOLEAN"`
	Status             string                                                   `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
	SubnetId           string                                                   `parquet:"name=subnet_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	TagSet             []*TagNetworkInterfaceModel
	VpcId              string            `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Tags               map[string]string `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	AccountId          string            `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Region             string            `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReportTime         int64             `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type NetworkInterfaceAssociationNetworkInterfaceModel struct {
	AllocationId    string `parquet:"name=allocation_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	AssociationId   string `parquet:"name=association_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	CarrierIp       string `parquet:"name=carrier_ip,type=BYTE_ARRAY,convertedtype=UTF8"`
	CustomerOwnedIp string `parquet:"name=customer_owned_ip,type=BYTE_ARRAY,convertedtype=UTF8"`
	IpOwnerId       string `parquet:"name=ip_owner_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	PublicDnsName   string `parquet:"name=public_dns_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	PublicIp        string `parquet:"name=public_ip,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type NetworkInterfaceAttachmentNetworkInterfaceModel struct {
	AttachTime          *time.Time
	AttachmentId        string `parquet:"name=attachment_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	DeleteOnTermination bool   `parquet:"name=delete_on_termination,type=BOOLEAN"`
	DeviceIndex         int32  `parquet:"name=device_index,type=INT32"`
	InstanceId          string `parquet:"name=instance_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	InstanceOwnerId     string `parquet:"name=instance_owner_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	NetworkCardIndex    int32  `parquet:"name=network_card_index,type=INT32"`
	Status              string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
	AttachTimeMilli     int64  `parquet:"name=attach_time_milli,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type GroupIdentifierNetworkInterfaceModel struct {
	GroupId   string `parquet:"name=group_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	GroupName string `parquet:"name=group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Ipv4PrefixSpecificationNetworkInterfaceModel struct {
	Ipv4Prefix string `parquet:"name=ipv4_prefix,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type NetworkInterfaceIpv6AddressNetworkInterfaceModel struct {
	Ipv6Address string `parquet:"name=ipv6_address,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Ipv6PrefixSpecificationNetworkInterfaceModel struct {
	Ipv6Prefix string `parquet:"name=ipv6_prefix,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type NetworkInterfacePrivateIpAddressNetworkInterfaceModel struct {
	Association      *NetworkInterfaceAssociationNetworkInterfaceModel `parquet:"name=association"`
	Primary          bool                                              `parquet:"name=primary,type=BOOLEAN"`
	PrivateDnsName   string                                            `parquet:"name=private_dns_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	PrivateIpAddress string                                            `parquet:"name=private_ip_address,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TagNetworkInterfaceModel struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

func NetworkInterfaceDataSource(ctx context.Context, client *ec2.Client, cfg aws.Config, reportTime time.Time, storageConfig storage.StorageContextConfig, storageManager *storage.StorageManager) error {
	storageContextSet, err := storageManager.GetStorageContextSet(storageConfig, new(NetworkInterfaceModel))
	if err != nil {
		return err
	}
	defer storageContextSet.Close(ctx)

	paginator := ec2.NewDescribeNetworkInterfacesPaginator(client, &ec2.DescribeNetworkInterfacesInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
		if err != nil {
			logrus.WithFields(logrus.Fields{
				"service":     storageConfig.Service,
				"data_source": storageConfig.DataSource,
				"account_id":  storageConfig.AccountId,
				"region":      storageConfig.Region,
				"cloud":       storageConfig.Cloud,
				"error":       err,
			}).Error("error calling DescribeNetworkInterfaces")
			return err
		}

		for _, var0 := range output.NetworkInterfaces {

			model := new(NetworkInterfaceModel)
			copier.Copy(&model, &var0)

			model.Tags = GetTagMap(var0.TagSet)
			model.AccountId = storageConfig.AccountId
			model.Region = storageConfig.Region
			model.ReportTime = reportTime.UTC().UnixMilli()

			for _, f := range customNetworkInterfaceModelPostprocessingFuncs {
				f(ctx, client, cfg, model)
			}

			errors := storageContextSet.Store(ctx, model)
			for storageContext, err := range errors {
				storage.LogContextError(storageContext, fmt.Sprintf("Error storing NetworkInterfaceModel: %v", err))
			}
		}

	}

	return nil
}

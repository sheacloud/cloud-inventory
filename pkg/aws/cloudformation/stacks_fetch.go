//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_fetching_file.tmpl
package cloudformation

import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	"github.com/google/uuid"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/pkg/aws"
	"github.com/sheacloud/cloud-inventory/pkg/meta"
)

func FetchStacks(ctx context.Context, params *aws.AwsFetchInput) ([]*Stack, *aws.AwsFetchOutputMetadata) {
	fetchingErrors := []error{}
	var fetchedResources int
	var failedResources int
	inventoryResults := &meta.InventoryResults{
		Cloud:      "aws",
		Service:    "cloudformation",
		Resource:   "stacks",
		AccountId:  params.AccountId,
		Region:     params.Region,
		ReportTime: params.ReportTime,
	}
	resources := []*Stack{}

	awsClient := params.RegionalClients[params.Region]
	client := awsClient.CloudFormation()

	paginator := cloudformation.NewListStacksPaginator(client, &cloudformation.ListStacksInput{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)

		if err != nil {
			fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling ListStacks in %s/%s: %w", params.AccountId, params.Region, err))
			break
		}

		for _, object := range output.StackSummaries {

			result, err := client.DescribeStacks(ctx, &cloudformation.DescribeStacksInput{
				StackName: object.StackId,
			})
			if err != nil {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling DescribeStacks in %s/%s: %w", params.AccountId, params.Region, err))
				failedResources++
				continue
			}

			if len(result.Stacks) == 0 {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("no stack found for %s/%s", params.AccountId, params.Region))
				failedResources++
				continue
			} else if len(result.Stacks) > 1 {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("more than one stack found for %s/%s", params.AccountId, params.Region))
				failedResources++
				continue
			}

			model := new(Stack)
			copier.CopyWithOption(&model, &result.Stacks[0], aws.CopyOption)

			model.Tags = ConvertTags(result.Stacks[0].Tags)
			model.AccountId = params.AccountId
			model.Region = params.Region
			model.ReportTime = params.ReportTime
			model.InventoryUUID = uuid.New().String()

			resources = append(resources, model)
			fetchedResources++
		}

	}

	inventoryResults.FetchedResources = fetchedResources
	inventoryResults.FailedResources = failedResources
	inventoryResults.HadErrors = len(fetchingErrors) > 0

	return resources, &aws.AwsFetchOutputMetadata{
		FetchingErrors:   fetchingErrors,
		InventoryResults: inventoryResults,
	}
}

//AUTOGENERATED CODE DO NOT EDIT
package elasticloadbalancing

type BackendServerDescription struct {
	InstancePort int32    `parquet:"name=instance_port,type=INT32" json:"instance_port" diff:"instance_port"`
	PolicyNames  []string `parquet:"name=policy_names,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"policy_names" diff:"policy_names"`
}

type HealthCheck struct {
	HealthyThreshold   int32  `parquet:"name=healthy_threshold,type=INT32" json:"healthy_threshold" diff:"healthy_threshold"`
	Interval           int32  `parquet:"name=interval,type=INT32" json:"interval" diff:"interval"`
	Target             string `parquet:"name=target,type=BYTE_ARRAY,convertedtype=UTF8" json:"target" diff:"target"`
	Timeout            int32  `parquet:"name=timeout,type=INT32" json:"timeout" diff:"timeout"`
	UnhealthyThreshold int32  `parquet:"name=unhealthy_threshold,type=INT32" json:"unhealthy_threshold" diff:"unhealthy_threshold"`
}

type Instance struct {
	InstanceId string `parquet:"name=instance_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_id" diff:"instance_id"`
}

type ListenerDescription struct {
	Listener    *Listener `parquet:"name=listener" json:"listener" diff:"listener"`
	PolicyNames []string  `parquet:"name=policy_names,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"policy_names" diff:"policy_names"`
}

type Listener struct {
	InstancePort     int32  `parquet:"name=instance_port,type=INT32" json:"instance_port" diff:"instance_port"`
	LoadBalancerPort int32  `parquet:"name=load_balancer_port,type=INT32" json:"load_balancer_port" diff:"load_balancer_port"`
	Protocol         string `parquet:"name=protocol,type=BYTE_ARRAY,convertedtype=UTF8" json:"protocol" diff:"protocol"`
	InstanceProtocol string `parquet:"name=instance_protocol,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_protocol" diff:"instance_protocol"`
	SSLCertificateId string `parquet:"name=ssl_certificate_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"ssl_certificate_id" diff:"ssl_certificate_id"`
}

type Policies struct {
	AppCookieStickinessPolicies []*AppCookieStickinessPolicy `parquet:"name=app_cookie_stickiness_policies,type=MAP,convertedtype=LIST" json:"app_cookie_stickiness_policies" diff:"app_cookie_stickiness_policies"`
	LBCookieStickinessPolicies  []*LBCookieStickinessPolicy  `parquet:"name=lb_cookie_stickiness_policies,type=MAP,convertedtype=LIST" json:"lb_cookie_stickiness_policies" diff:"lb_cookie_stickiness_policies"`
	OtherPolicies               []string                     `parquet:"name=other_policies,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"other_policies" diff:"other_policies"`
}

type AppCookieStickinessPolicy struct {
	CookieName string `parquet:"name=cookie_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"cookie_name" diff:"cookie_name"`
	PolicyName string `parquet:"name=policy_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"policy_name" diff:"policy_name"`
}

type LBCookieStickinessPolicy struct {
	CookieExpirationPeriod int64  `parquet:"name=cookie_expiration_period,type=INT64" json:"cookie_expiration_period" diff:"cookie_expiration_period"`
	PolicyName             string `parquet:"name=policy_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"policy_name" diff:"policy_name"`
}

type SourceSecurityGroup struct {
	GroupName  string `parquet:"name=group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"group_name" diff:"group_name"`
	OwnerAlias string `parquet:"name=owner_alias,type=BYTE_ARRAY,convertedtype=UTF8" json:"owner_alias" diff:"owner_alias"`
}

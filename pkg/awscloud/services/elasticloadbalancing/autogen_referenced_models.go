//AUTOGENERATED CODE DO NOT EDIT
package elasticloadbalancing



type BackendServerDescription struct {
	InstancePort int32 `parquet:"name=instance_port,type=INT32"`
	PolicyNames []string `parquet:"name=policy_names,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
}

type HealthCheck struct {
	HealthyThreshold int32 `parquet:"name=healthy_threshold,type=INT32"`
	Interval int32 `parquet:"name=interval,type=INT32"`
	Target string `parquet:"name=target,type=BYTE_ARRAY,convertedtype=UTF8"`
	Timeout int32 `parquet:"name=timeout,type=INT32"`
	UnhealthyThreshold int32 `parquet:"name=unhealthy_threshold,type=INT32"`
}

type Instance struct {
	InstanceId string `parquet:"name=instance_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ListenerDescription struct {
	Listener *Listener `parquet:"name=listener"`
	PolicyNames []string `parquet:"name=policy_names,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
}

type Listener struct {
	InstancePort int32 `parquet:"name=instance_port,type=INT32"`
	LoadBalancerPort int32 `parquet:"name=load_balancer_port,type=INT32"`
	Protocol string `parquet:"name=protocol,type=BYTE_ARRAY,convertedtype=UTF8"`
	InstanceProtocol string `parquet:"name=instance_protocol,type=BYTE_ARRAY,convertedtype=UTF8"`
	SSLCertificateId string `parquet:"name=ssl_certificate_id,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Policies struct {
	AppCookieStickinessPolicies []*AppCookieStickinessPolicy `parquet:"name=app_cookie_stickiness_policies,type=MAP,convertedtype=LIST"`
	LBCookieStickinessPolicies []*LBCookieStickinessPolicy `parquet:"name=lb_cookie_stickiness_policies,type=MAP,convertedtype=LIST"`
	OtherPolicies []string `parquet:"name=other_policies,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
}

type AppCookieStickinessPolicy struct {
	CookieName string `parquet:"name=cookie_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	PolicyName string `parquet:"name=policy_name,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type LBCookieStickinessPolicy struct {
	CookieExpirationPeriod int64 `parquet:"name=cookie_expiration_period,type=INT64"`
	PolicyName string `parquet:"name=policy_name,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type SourceSecurityGroup struct {
	GroupName string `parquet:"name=group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	OwnerAlias string `parquet:"name=owner_alias,type=BYTE_ARRAY,convertedtype=UTF8"`
}



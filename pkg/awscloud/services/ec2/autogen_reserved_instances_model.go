//AUTOGENERATED CODE DO NOT EDIT
package ec2

import (
	"time"
)

type ReservedInstances struct {
	AvailabilityZone    string `parquet:"name=availability_zone,type=BYTE_ARRAY,convertedtype=UTF8" json:"availability_zone" diff:"availability_zone"`
	CurrencyCode        string `parquet:"name=currency_code,type=BYTE_ARRAY,convertedtype=UTF8" json:"currency_code" diff:"currency_code"`
	Duration            int64  `parquet:"name=duration,type=INT64" json:"duration" diff:"duration"`
	End                 *time.Time
	FixedPrice          float32            `parquet:"name=fixed_price,type=FLOAT" json:"fixed_price" diff:"fixed_price"`
	InstanceCount       int32              `parquet:"name=instance_count,type=INT32" json:"instance_count" diff:"instance_count"`
	InstanceTenancy     string             `parquet:"name=instance_tenancy,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_tenancy" diff:"instance_tenancy"`
	InstanceType        string             `parquet:"name=instance_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_type" diff:"instance_type"`
	OfferingClass       string             `parquet:"name=offering_class,type=BYTE_ARRAY,convertedtype=UTF8" json:"offering_class" diff:"offering_class"`
	OfferingType        string             `parquet:"name=offering_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"offering_type" diff:"offering_type"`
	ProductDescription  string             `parquet:"name=product_description,type=BYTE_ARRAY,convertedtype=UTF8" json:"product_description" diff:"product_description"`
	RecurringCharges    []*RecurringCharge `parquet:"name=recurring_charges,type=MAP,convertedtype=LIST" json:"recurring_charges" diff:"recurring_charges"`
	ReservedInstancesId string             `parquet:"name=reserved_instances_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"reserved_instances_id" diff:"reserved_instances_id,identifier"`
	Scope               string             `parquet:"name=scope,type=BYTE_ARRAY,convertedtype=UTF8" json:"scope" diff:"scope"`
	Start               *time.Time
	State               string            `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
	Tags                map[string]string `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"tags" diff:"tags"`
	UsagePrice          float32           `parquet:"name=usage_price,type=FLOAT" json:"usage_price" diff:"usage_price"`
	AccountId           string            `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"account_id" diff:"account_id"`
	Region              string            `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8" json:"region" diff:"region"`
	ReportTime          int64             `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"report_time" diff:"report_time,immutable"`
	EndMilli            int64             `parquet:"name=end,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"end" diff:"end"`
	StartMilli          int64             `parquet:"name=start,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"start" diff:"start"`
}

func (x *ReservedInstances) GetReportTime() int64 {
	return x.ReportTime
}

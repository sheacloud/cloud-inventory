//AUTOGENERATED CODE DO NOT EDIT
package ec2

type Image struct {
	Architecture        string                `parquet:"name=architecture,type=BYTE_ARRAY,convertedtype=UTF8" json:"architecture" diff:"architecture"`
	BlockDeviceMappings []*BlockDeviceMapping `parquet:"name=block_device_mappings,type=MAP,convertedtype=LIST" json:"block_device_mappings" diff:"block_device_mappings"`
	BootMode            string                `parquet:"name=boot_mode,type=BYTE_ARRAY,convertedtype=UTF8" json:"boot_mode" diff:"boot_mode"`
	CreationDate        string                `parquet:"name=creation_date,type=BYTE_ARRAY,convertedtype=UTF8" json:"creation_date" diff:"creation_date"`
	DeprecationTime     string                `parquet:"name=deprecation_time,type=BYTE_ARRAY,convertedtype=UTF8" json:"deprecation_time" diff:"deprecation_time"`
	Description         string                `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8" json:"description" diff:"description"`
	EnaSupport          bool                  `parquet:"name=ena_support,type=BOOLEAN" json:"ena_support" diff:"ena_support"`
	Hypervisor          string                `parquet:"name=hypervisor,type=BYTE_ARRAY,convertedtype=UTF8" json:"hypervisor" diff:"hypervisor"`
	ImageId             string                `parquet:"name=image_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"image_id" diff:"image_id,identifier"`
	ImageLocation       string                `parquet:"name=image_location,type=BYTE_ARRAY,convertedtype=UTF8" json:"image_location" diff:"image_location"`
	ImageOwnerAlias     string                `parquet:"name=image_owner_alias,type=BYTE_ARRAY,convertedtype=UTF8" json:"image_owner_alias" diff:"image_owner_alias"`
	ImageType           string                `parquet:"name=image_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"image_type" diff:"image_type"`
	KernelId            string                `parquet:"name=kernel_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"kernel_id" diff:"kernel_id"`
	Name                string                `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" json:"name" diff:"name"`
	OwnerId             string                `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"owner_id" diff:"owner_id"`
	Platform            string                `parquet:"name=platform,type=BYTE_ARRAY,convertedtype=UTF8" json:"platform" diff:"platform"`
	PlatformDetails     string                `parquet:"name=platform_details,type=BYTE_ARRAY,convertedtype=UTF8" json:"platform_details" diff:"platform_details"`
	ProductCodes        []*ProductCode        `parquet:"name=product_codes,type=MAP,convertedtype=LIST" json:"product_codes" diff:"product_codes"`
	Public              bool                  `parquet:"name=public,type=BOOLEAN" json:"public" diff:"public"`
	RamdiskId           string                `parquet:"name=ramdisk_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"ramdisk_id" diff:"ramdisk_id"`
	RootDeviceName      string                `parquet:"name=root_device_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"root_device_name" diff:"root_device_name"`
	RootDeviceType      string                `parquet:"name=root_device_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"root_device_type" diff:"root_device_type"`
	SriovNetSupport     string                `parquet:"name=sriov_net_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"sriov_net_support" diff:"sriov_net_support"`
	State               string                `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
	StateReason         *StateReason          `parquet:"name=state_reason" json:"state_reason" diff:"state_reason"`
	Tags                map[string]string     `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"tags" diff:"tags"`
	UsageOperation      string                `parquet:"name=usage_operation,type=BYTE_ARRAY,convertedtype=UTF8" json:"usage_operation" diff:"usage_operation"`
	VirtualizationType  string                `parquet:"name=virtualization_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"virtualization_type" diff:"virtualization_type"`
	AccountId           string                `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"account_id" diff:"account_id"`
	Region              string                `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8" json:"region" diff:"region"`
	ReportTime          int64                 `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"report_time" diff:"report_time,immutable"`
}

func (x *Image) GetReportTime() int64 {
	return x.ReportTime
}

//AUTOGENERATED CODE DO NOT EDIT
package ec2

import (
	"time"
)

type Tag struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8" json:"key" diff:"key"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8" json:"value" diff:"value"`
}

type DhcpConfiguration struct {
	Key    string            `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8" json:"key" diff:"key"`
	Values []*AttributeValue `parquet:"name=values,type=MAP,convertedtype=LIST" json:"values" diff:"values"`
}

type AttributeValue struct {
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8" json:"value" diff:"value"`
}

type BlockDeviceMapping struct {
	DeviceName  string          `parquet:"name=device_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"device_name" diff:"device_name"`
	Ebs         *EbsBlockDevice `parquet:"name=ebs" json:"ebs" diff:"ebs"`
	NoDevice    string          `parquet:"name=no_device,type=BYTE_ARRAY,convertedtype=UTF8" json:"no_device" diff:"no_device"`
	VirtualName string          `parquet:"name=virtual_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"virtual_name" diff:"virtual_name"`
}

type EbsBlockDevice struct {
	DeleteOnTermination bool   `parquet:"name=delete_on_termination,type=BOOLEAN" json:"delete_on_termination" diff:"delete_on_termination"`
	Encrypted           bool   `parquet:"name=encrypted,type=BOOLEAN" json:"encrypted" diff:"encrypted"`
	Iops                int32  `parquet:"name=iops,type=INT32" json:"iops" diff:"iops"`
	KmsKeyId            string `parquet:"name=kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"kms_key_id" diff:"kms_key_id"`
	OutpostArn          string `parquet:"name=outpost_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"outpost_arn" diff:"outpost_arn"`
	SnapshotId          string `parquet:"name=snapshot_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"snapshot_id" diff:"snapshot_id"`
	Throughput          int32  `parquet:"name=throughput,type=INT32" json:"throughput" diff:"throughput"`
	VolumeSize          int32  `parquet:"name=volume_size,type=INT32" json:"volume_size" diff:"volume_size"`
	VolumeType          string `parquet:"name=volume_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"volume_type" diff:"volume_type"`
}

type ProductCode struct {
	ProductCodeId   string `parquet:"name=product_code_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"product_code_id" diff:"product_code_id"`
	ProductCodeType string `parquet:"name=product_code_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"product_code_type" diff:"product_code_type"`
}

type StateReason struct {
	Code    string `parquet:"name=code,type=BYTE_ARRAY,convertedtype=UTF8" json:"code" diff:"code"`
	Message string `parquet:"name=message,type=BYTE_ARRAY,convertedtype=UTF8" json:"message" diff:"message"`
}

type EbsInfo struct {
	EbsOptimizedInfo    *EbsOptimizedInfo `parquet:"name=ebs_optimized_info" json:"ebs_optimized_info" diff:"ebs_optimized_info"`
	EbsOptimizedSupport string            `parquet:"name=ebs_optimized_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"ebs_optimized_support" diff:"ebs_optimized_support"`
	EncryptionSupport   string            `parquet:"name=encryption_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"encryption_support" diff:"encryption_support"`
	NvmeSupport         string            `parquet:"name=nvme_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"nvme_support" diff:"nvme_support"`
}

type EbsOptimizedInfo struct {
	BaselineBandwidthInMbps  int32   `parquet:"name=baseline_bandwidth_in_mbps,type=INT32" json:"baseline_bandwidth_in_mbps" diff:"baseline_bandwidth_in_mbps"`
	BaselineIops             int32   `parquet:"name=baseline_iops,type=INT32" json:"baseline_iops" diff:"baseline_iops"`
	BaselineThroughputInMBps float64 `parquet:"name=baseline_throughput_in_m_bps,type=DOUBLE" json:"baseline_throughput_in_m_bps" diff:"baseline_throughput_in_m_bps"`
	MaximumBandwidthInMbps   int32   `parquet:"name=maximum_bandwidth_in_mbps,type=INT32" json:"maximum_bandwidth_in_mbps" diff:"maximum_bandwidth_in_mbps"`
	MaximumIops              int32   `parquet:"name=maximum_iops,type=INT32" json:"maximum_iops" diff:"maximum_iops"`
	MaximumThroughputInMBps  float64 `parquet:"name=maximum_throughput_in_m_bps,type=DOUBLE" json:"maximum_throughput_in_m_bps" diff:"maximum_throughput_in_m_bps"`
}

type FpgaInfo struct {
	Fpgas                []*FpgaDeviceInfo `parquet:"name=fpgas,type=MAP,convertedtype=LIST" json:"fpgas" diff:"fpgas"`
	TotalFpgaMemoryInMiB int32             `parquet:"name=total_fpga_memory_in_mi_b,type=INT32" json:"total_fpga_memory_in_mi_b" diff:"total_fpga_memory_in_mi_b"`
}

type FpgaDeviceInfo struct {
	Count        int32                 `parquet:"name=count,type=INT32" json:"count" diff:"count"`
	Manufacturer string                `parquet:"name=manufacturer,type=BYTE_ARRAY,convertedtype=UTF8" json:"manufacturer" diff:"manufacturer"`
	MemoryInfo   *FpgaDeviceMemoryInfo `parquet:"name=memory_info" json:"memory_info" diff:"memory_info"`
	Name         string                `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" json:"name" diff:"name"`
}

type FpgaDeviceMemoryInfo struct {
	SizeInMiB int32 `parquet:"name=size_in_mi_b,type=INT32" json:"size_in_mi_b" diff:"size_in_mi_b"`
}

type GpuInfo struct {
	Gpus                []*GpuDeviceInfo `parquet:"name=gpus,type=MAP,convertedtype=LIST" json:"gpus" diff:"gpus"`
	TotalGpuMemoryInMiB int32            `parquet:"name=total_gpu_memory_in_mi_b,type=INT32" json:"total_gpu_memory_in_mi_b" diff:"total_gpu_memory_in_mi_b"`
}

type GpuDeviceInfo struct {
	Count        int32                `parquet:"name=count,type=INT32" json:"count" diff:"count"`
	Manufacturer string               `parquet:"name=manufacturer,type=BYTE_ARRAY,convertedtype=UTF8" json:"manufacturer" diff:"manufacturer"`
	MemoryInfo   *GpuDeviceMemoryInfo `parquet:"name=memory_info" json:"memory_info" diff:"memory_info"`
	Name         string               `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" json:"name" diff:"name"`
}

type GpuDeviceMemoryInfo struct {
	SizeInMiB int32 `parquet:"name=size_in_mi_b,type=INT32" json:"size_in_mi_b" diff:"size_in_mi_b"`
}

type InferenceAcceleratorInfo struct {
	Accelerators []*InferenceDeviceInfo `parquet:"name=accelerators,type=MAP,convertedtype=LIST" json:"accelerators" diff:"accelerators"`
}

type InferenceDeviceInfo struct {
	Count        int32  `parquet:"name=count,type=INT32" json:"count" diff:"count"`
	Manufacturer string `parquet:"name=manufacturer,type=BYTE_ARRAY,convertedtype=UTF8" json:"manufacturer" diff:"manufacturer"`
	Name         string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" json:"name" diff:"name"`
}

type InstanceStorageInfo struct {
	Disks             []*DiskInfo `parquet:"name=disks,type=MAP,convertedtype=LIST" json:"disks" diff:"disks"`
	EncryptionSupport string      `parquet:"name=encryption_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"encryption_support" diff:"encryption_support"`
	NvmeSupport       string      `parquet:"name=nvme_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"nvme_support" diff:"nvme_support"`
	TotalSizeInGB     int64       `parquet:"name=total_size_in_gb,type=INT64" json:"total_size_in_gb" diff:"total_size_in_gb"`
}

type DiskInfo struct {
	Count    int32  `parquet:"name=count,type=INT32" json:"count" diff:"count"`
	SizeInGB int64  `parquet:"name=size_in_gb,type=INT64" json:"size_in_gb" diff:"size_in_gb"`
	Type     string `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8" json:"type" diff:"type"`
}

type MemoryInfo struct {
	SizeInMiB int64 `parquet:"name=size_in_mi_b,type=INT64" json:"size_in_mi_b" diff:"size_in_mi_b"`
}

type NetworkInfo struct {
	DefaultNetworkCardIndex      int32              `parquet:"name=default_network_card_index,type=INT32" json:"default_network_card_index" diff:"default_network_card_index"`
	EfaInfo                      *EfaInfo           `parquet:"name=efa_info" json:"efa_info" diff:"efa_info"`
	EfaSupported                 bool               `parquet:"name=efa_supported,type=BOOLEAN" json:"efa_supported" diff:"efa_supported"`
	EnaSupport                   string             `parquet:"name=ena_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"ena_support" diff:"ena_support"`
	EncryptionInTransitSupported bool               `parquet:"name=encryption_in_transit_supported,type=BOOLEAN" json:"encryption_in_transit_supported" diff:"encryption_in_transit_supported"`
	Ipv4AddressesPerInterface    int32              `parquet:"name=ipv4_addresses_per_interface,type=INT32" json:"ipv4_addresses_per_interface" diff:"ipv4_addresses_per_interface"`
	Ipv6AddressesPerInterface    int32              `parquet:"name=ipv6_addresses_per_interface,type=INT32" json:"ipv6_addresses_per_interface" diff:"ipv6_addresses_per_interface"`
	Ipv6Supported                bool               `parquet:"name=ipv6_supported,type=BOOLEAN" json:"ipv6_supported" diff:"ipv6_supported"`
	MaximumNetworkCards          int32              `parquet:"name=maximum_network_cards,type=INT32" json:"maximum_network_cards" diff:"maximum_network_cards"`
	MaximumNetworkInterfaces     int32              `parquet:"name=maximum_network_interfaces,type=INT32" json:"maximum_network_interfaces" diff:"maximum_network_interfaces"`
	NetworkCards                 []*NetworkCardInfo `parquet:"name=network_cards,type=MAP,convertedtype=LIST" json:"network_cards" diff:"network_cards"`
	NetworkPerformance           string             `parquet:"name=network_performance,type=BYTE_ARRAY,convertedtype=UTF8" json:"network_performance" diff:"network_performance"`
}

type EfaInfo struct {
	MaximumEfaInterfaces int32 `parquet:"name=maximum_efa_interfaces,type=INT32" json:"maximum_efa_interfaces" diff:"maximum_efa_interfaces"`
}

type NetworkCardInfo struct {
	MaximumNetworkInterfaces int32  `parquet:"name=maximum_network_interfaces,type=INT32" json:"maximum_network_interfaces" diff:"maximum_network_interfaces"`
	NetworkCardIndex         int32  `parquet:"name=network_card_index,type=INT32" json:"network_card_index" diff:"network_card_index"`
	NetworkPerformance       string `parquet:"name=network_performance,type=BYTE_ARRAY,convertedtype=UTF8" json:"network_performance" diff:"network_performance"`
}

type PlacementGroupInfo struct {
	SupportedStrategies []string `parquet:"name=supported_strategies,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"supported_strategies" diff:"supported_strategies"`
}

type ProcessorInfo struct {
	SupportedArchitectures   []string `parquet:"name=supported_architectures,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"supported_architectures" diff:"supported_architectures"`
	SustainedClockSpeedInGhz float64  `parquet:"name=sustained_clock_speed_in_ghz,type=DOUBLE" json:"sustained_clock_speed_in_ghz" diff:"sustained_clock_speed_in_ghz"`
}

type VCpuInfo struct {
	DefaultCores          int32   `parquet:"name=default_cores,type=INT32" json:"default_cores" diff:"default_cores"`
	DefaultThreadsPerCore int32   `parquet:"name=default_threads_per_core,type=INT32" json:"default_threads_per_core" diff:"default_threads_per_core"`
	DefaultVCpus          int32   `parquet:"name=default_v_cpus,type=INT32" json:"default_v_cpus" diff:"default_v_cpus"`
	ValidCores            []int32 `parquet:"name=valid_cores,type=MAP,convertedtype=LIST,valuetype=INT32" json:"valid_cores" diff:"valid_cores"`
	ValidThreadsPerCore   []int32 `parquet:"name=valid_threads_per_core,type=MAP,convertedtype=LIST,valuetype=INT32" json:"valid_threads_per_core" diff:"valid_threads_per_core"`
}

type InstanceBlockDeviceMapping struct {
	DeviceName string                  `parquet:"name=device_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"device_name" diff:"device_name"`
	Ebs        *EbsInstanceBlockDevice `parquet:"name=ebs" json:"ebs" diff:"ebs"`
}

type EbsInstanceBlockDevice struct {
	AttachTime          *time.Time `json:"-"`
	DeleteOnTermination bool       `parquet:"name=delete_on_termination,type=BOOLEAN" json:"delete_on_termination" diff:"delete_on_termination"`
	Status              string     `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
	VolumeId            string     `parquet:"name=volume_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"volume_id" diff:"volume_id"`
	AttachTimeMilli     int64      `parquet:"name=attach_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"attach_time" diff:"attach_time"`
}

type CapacityReservationSpecificationResponse struct {
	CapacityReservationPreference string                             `parquet:"name=capacity_reservation_preference,type=BYTE_ARRAY,convertedtype=UTF8" json:"capacity_reservation_preference" diff:"capacity_reservation_preference"`
	CapacityReservationTarget     *CapacityReservationTargetResponse `parquet:"name=capacity_reservation_target" json:"capacity_reservation_target" diff:"capacity_reservation_target"`
}

type CapacityReservationTargetResponse struct {
	CapacityReservationId               string `parquet:"name=capacity_reservation_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"capacity_reservation_id" diff:"capacity_reservation_id"`
	CapacityReservationResourceGroupArn string `parquet:"name=capacity_reservation_resource_group_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"capacity_reservation_resource_group_arn" diff:"capacity_reservation_resource_group_arn"`
}

type CpuOptions struct {
	CoreCount      int32 `parquet:"name=core_count,type=INT32" json:"core_count" diff:"core_count"`
	ThreadsPerCore int32 `parquet:"name=threads_per_core,type=INT32" json:"threads_per_core" diff:"threads_per_core"`
}

type ElasticGpuAssociation struct {
	ElasticGpuAssociationId    string `parquet:"name=elastic_gpu_association_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"elastic_gpu_association_id" diff:"elastic_gpu_association_id"`
	ElasticGpuAssociationState string `parquet:"name=elastic_gpu_association_state,type=BYTE_ARRAY,convertedtype=UTF8" json:"elastic_gpu_association_state" diff:"elastic_gpu_association_state"`
	ElasticGpuAssociationTime  string `parquet:"name=elastic_gpu_association_time,type=BYTE_ARRAY,convertedtype=UTF8" json:"elastic_gpu_association_time" diff:"elastic_gpu_association_time"`
	ElasticGpuId               string `parquet:"name=elastic_gpu_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"elastic_gpu_id" diff:"elastic_gpu_id"`
}

type ElasticInferenceAcceleratorAssociation struct {
	ElasticInferenceAcceleratorArn                  string     `parquet:"name=elastic_inference_accelerator_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"elastic_inference_accelerator_arn" diff:"elastic_inference_accelerator_arn"`
	ElasticInferenceAcceleratorAssociationId        string     `parquet:"name=elastic_inference_accelerator_association_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"elastic_inference_accelerator_association_id" diff:"elastic_inference_accelerator_association_id"`
	ElasticInferenceAcceleratorAssociationState     string     `parquet:"name=elastic_inference_accelerator_association_state,type=BYTE_ARRAY,convertedtype=UTF8" json:"elastic_inference_accelerator_association_state" diff:"elastic_inference_accelerator_association_state"`
	ElasticInferenceAcceleratorAssociationTime      *time.Time `json:"-"`
	ElasticInferenceAcceleratorAssociationTimeMilli int64      `parquet:"name=elastic_inference_accelerator_association_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"elastic_inference_accelerator_association_time" diff:"elastic_inference_accelerator_association_time"`
}

type EnclaveOptions struct {
	Enabled bool `parquet:"name=enabled,type=BOOLEAN" json:"enabled" diff:"enabled"`
}

type HibernationOptions struct {
	Configured bool `parquet:"name=configured,type=BOOLEAN" json:"configured" diff:"configured"`
}

type IamInstanceProfile struct {
	Arn string `parquet:"name=arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"arn" diff:"arn"`
	Id  string `parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8" json:"id" diff:"id"`
}

type LicenseConfiguration struct {
	LicenseConfigurationArn string `parquet:"name=license_configuration_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"license_configuration_arn" diff:"license_configuration_arn"`
}

type InstanceMetadataOptionsResponse struct {
	HttpEndpoint            string `parquet:"name=http_endpoint,type=BYTE_ARRAY,convertedtype=UTF8" json:"http_endpoint" diff:"http_endpoint"`
	HttpProtocolIpv6        string `parquet:"name=http_protocol_ipv6,type=BYTE_ARRAY,convertedtype=UTF8" json:"http_protocol_ipv6" diff:"http_protocol_ipv6"`
	HttpPutResponseHopLimit int32  `parquet:"name=http_put_response_hop_limit,type=INT32" json:"http_put_response_hop_limit" diff:"http_put_response_hop_limit"`
	HttpTokens              string `parquet:"name=http_tokens,type=BYTE_ARRAY,convertedtype=UTF8" json:"http_tokens" diff:"http_tokens"`
	State                   string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
}

type Monitoring struct {
	State string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
}

type InstanceNetworkInterface struct {
	Association        *InstanceNetworkInterfaceAssociation `parquet:"name=association" json:"association" diff:"association"`
	Attachment         *InstanceNetworkInterfaceAttachment  `parquet:"name=attachment" json:"attachment" diff:"attachment"`
	Description        string                               `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8" json:"description" diff:"description"`
	Groups             []*GroupIdentifier                   `parquet:"name=groups,type=MAP,convertedtype=LIST" json:"groups" diff:"groups"`
	InterfaceType      string                               `parquet:"name=interface_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"interface_type" diff:"interface_type"`
	Ipv4Prefixes       []*InstanceIpv4Prefix                `parquet:"name=ipv4_prefixes,type=MAP,convertedtype=LIST" json:"ipv4_prefixes" diff:"ipv4_prefixes"`
	Ipv6Addresses      []*InstanceIpv6Address               `parquet:"name=ipv6_addresses,type=MAP,convertedtype=LIST" json:"ipv6_addresses" diff:"ipv6_addresses"`
	Ipv6Prefixes       []*InstanceIpv6Prefix                `parquet:"name=ipv6_prefixes,type=MAP,convertedtype=LIST" json:"ipv6_prefixes" diff:"ipv6_prefixes"`
	MacAddress         string                               `parquet:"name=mac_address,type=BYTE_ARRAY,convertedtype=UTF8" json:"mac_address" diff:"mac_address"`
	NetworkInterfaceId string                               `parquet:"name=network_interface_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"network_interface_id" diff:"network_interface_id"`
	OwnerId            string                               `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"owner_id" diff:"owner_id"`
	PrivateDnsName     string                               `parquet:"name=private_dns_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"private_dns_name" diff:"private_dns_name"`
	PrivateIpAddress   string                               `parquet:"name=private_ip_address,type=BYTE_ARRAY,convertedtype=UTF8" json:"private_ip_address" diff:"private_ip_address"`
	PrivateIpAddresses []*InstancePrivateIpAddress          `parquet:"name=private_ip_addresses,type=MAP,convertedtype=LIST" json:"private_ip_addresses" diff:"private_ip_addresses"`
	SourceDestCheck    bool                                 `parquet:"name=source_dest_check,type=BOOLEAN" json:"source_dest_check" diff:"source_dest_check"`
	Status             string                               `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
	SubnetId           string                               `parquet:"name=subnet_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"subnet_id" diff:"subnet_id"`
	VpcId              string                               `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_id" diff:"vpc_id"`
}

type InstanceNetworkInterfaceAssociation struct {
	CarrierIp       string `parquet:"name=carrier_ip,type=BYTE_ARRAY,convertedtype=UTF8" json:"carrier_ip" diff:"carrier_ip"`
	CustomerOwnedIp string `parquet:"name=customer_owned_ip,type=BYTE_ARRAY,convertedtype=UTF8" json:"customer_owned_ip" diff:"customer_owned_ip"`
	IpOwnerId       string `parquet:"name=ip_owner_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"ip_owner_id" diff:"ip_owner_id"`
	PublicDnsName   string `parquet:"name=public_dns_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"public_dns_name" diff:"public_dns_name"`
	PublicIp        string `parquet:"name=public_ip,type=BYTE_ARRAY,convertedtype=UTF8" json:"public_ip" diff:"public_ip"`
}

type InstanceNetworkInterfaceAttachment struct {
	AttachTime          *time.Time `json:"-"`
	AttachmentId        string     `parquet:"name=attachment_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"attachment_id" diff:"attachment_id"`
	DeleteOnTermination bool       `parquet:"name=delete_on_termination,type=BOOLEAN" json:"delete_on_termination" diff:"delete_on_termination"`
	DeviceIndex         int32      `parquet:"name=device_index,type=INT32" json:"device_index" diff:"device_index"`
	NetworkCardIndex    int32      `parquet:"name=network_card_index,type=INT32" json:"network_card_index" diff:"network_card_index"`
	Status              string     `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
	AttachTimeMilli     int64      `parquet:"name=attach_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"attach_time" diff:"attach_time"`
}

type GroupIdentifier struct {
	GroupId   string `parquet:"name=group_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"group_id" diff:"group_id"`
	GroupName string `parquet:"name=group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"group_name" diff:"group_name"`
}

type InstanceIpv4Prefix struct {
	Ipv4Prefix string `parquet:"name=ipv4_prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv4_prefix" diff:"ipv4_prefix"`
}

type InstanceIpv6Address struct {
	Ipv6Address string `parquet:"name=ipv6_address,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv6_address" diff:"ipv6_address"`
}

type InstanceIpv6Prefix struct {
	Ipv6Prefix string `parquet:"name=ipv6_prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv6_prefix" diff:"ipv6_prefix"`
}

type InstancePrivateIpAddress struct {
	Association      *InstanceNetworkInterfaceAssociation `parquet:"name=association" json:"association" diff:"association"`
	Primary          bool                                 `parquet:"name=primary,type=BOOLEAN" json:"primary" diff:"primary"`
	PrivateDnsName   string                               `parquet:"name=private_dns_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"private_dns_name" diff:"private_dns_name"`
	PrivateIpAddress string                               `parquet:"name=private_ip_address,type=BYTE_ARRAY,convertedtype=UTF8" json:"private_ip_address" diff:"private_ip_address"`
}

type Placement struct {
	Affinity             string `parquet:"name=affinity,type=BYTE_ARRAY,convertedtype=UTF8" json:"affinity" diff:"affinity"`
	AvailabilityZone     string `parquet:"name=availability_zone,type=BYTE_ARRAY,convertedtype=UTF8" json:"availability_zone" diff:"availability_zone"`
	GroupName            string `parquet:"name=group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"group_name" diff:"group_name"`
	HostId               string `parquet:"name=host_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"host_id" diff:"host_id"`
	HostResourceGroupArn string `parquet:"name=host_resource_group_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"host_resource_group_arn" diff:"host_resource_group_arn"`
	PartitionNumber      int32  `parquet:"name=partition_number,type=INT32" json:"partition_number" diff:"partition_number"`
	SpreadDomain         string `parquet:"name=spread_domain,type=BYTE_ARRAY,convertedtype=UTF8" json:"spread_domain" diff:"spread_domain"`
	Tenancy              string `parquet:"name=tenancy,type=BYTE_ARRAY,convertedtype=UTF8" json:"tenancy" diff:"tenancy"`
}

type PrivateDnsNameOptionsResponse struct {
	EnableResourceNameDnsAAAARecord bool   `parquet:"name=enable_resource_name_dns_aaaa_record,type=BOOLEAN" json:"enable_resource_name_dns_aaaa_record" diff:"enable_resource_name_dns_aaaa_record"`
	EnableResourceNameDnsARecord    bool   `parquet:"name=enable_resource_name_dns_a_record,type=BOOLEAN" json:"enable_resource_name_dns_a_record" diff:"enable_resource_name_dns_a_record"`
	HostnameType                    string `parquet:"name=hostname_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"hostname_type" diff:"hostname_type"`
}

type InstanceState struct {
	Code int32  `parquet:"name=code,type=INT32" json:"code" diff:"code"`
	Name string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" json:"name" diff:"name"`
}

type InternetGatewayAttachment struct {
	State string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
	VpcId string `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_id" diff:"vpc_id"`
}

type NatGatewayAddress struct {
	AllocationId       string `parquet:"name=allocation_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"allocation_id" diff:"allocation_id"`
	NetworkInterfaceId string `parquet:"name=network_interface_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"network_interface_id" diff:"network_interface_id"`
	PrivateIp          string `parquet:"name=private_ip,type=BYTE_ARRAY,convertedtype=UTF8" json:"private_ip" diff:"private_ip"`
	PublicIp           string `parquet:"name=public_ip,type=BYTE_ARRAY,convertedtype=UTF8" json:"public_ip" diff:"public_ip"`
}

type ProvisionedBandwidth struct {
	ProvisionTime      *time.Time `json:"-"`
	Provisioned        string     `parquet:"name=provisioned,type=BYTE_ARRAY,convertedtype=UTF8" json:"provisioned" diff:"provisioned"`
	RequestTime        *time.Time `json:"-"`
	Requested          string     `parquet:"name=requested,type=BYTE_ARRAY,convertedtype=UTF8" json:"requested" diff:"requested"`
	Status             string     `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
	ProvisionTimeMilli int64      `parquet:"name=provision_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"provision_time" diff:"provision_time"`
	RequestTimeMilli   int64      `parquet:"name=request_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"request_time" diff:"request_time"`
}

type NetworkAclAssociation struct {
	NetworkAclAssociationId string `parquet:"name=network_acl_association_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"network_acl_association_id" diff:"network_acl_association_id"`
	NetworkAclId            string `parquet:"name=network_acl_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"network_acl_id" diff:"network_acl_id,identifier"`
	SubnetId                string `parquet:"name=subnet_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"subnet_id" diff:"subnet_id"`
}

type NetworkAclEntry struct {
	CidrBlock     string        `parquet:"name=cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"cidr_block" diff:"cidr_block"`
	Egress        bool          `parquet:"name=egress,type=BOOLEAN" json:"egress" diff:"egress"`
	IcmpTypeCode  *IcmpTypeCode `parquet:"name=icmp_type_code" json:"icmp_type_code" diff:"icmp_type_code"`
	Ipv6CidrBlock string        `parquet:"name=ipv6_cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv6_cidr_block" diff:"ipv6_cidr_block"`
	PortRange     *PortRange    `parquet:"name=port_range" json:"port_range" diff:"port_range"`
	Protocol      string        `parquet:"name=protocol,type=BYTE_ARRAY,convertedtype=UTF8" json:"protocol" diff:"protocol"`
	RuleAction    string        `parquet:"name=rule_action,type=BYTE_ARRAY,convertedtype=UTF8" json:"rule_action" diff:"rule_action"`
	RuleNumber    int32         `parquet:"name=rule_number,type=INT32" json:"rule_number" diff:"rule_number"`
}

type IcmpTypeCode struct {
	Code int32 `parquet:"name=code,type=INT32" json:"code" diff:"code"`
	Type int32 `parquet:"name=type,type=INT32" json:"type" diff:"type"`
}

type PortRange struct {
	From int32 `parquet:"name=from,type=INT32" json:"from" diff:"from"`
	To   int32 `parquet:"name=to,type=INT32" json:"to" diff:"to"`
}

type NetworkInterfaceAssociation struct {
	AllocationId    string `parquet:"name=allocation_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"allocation_id" diff:"allocation_id"`
	AssociationId   string `parquet:"name=association_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"association_id" diff:"association_id"`
	CarrierIp       string `parquet:"name=carrier_ip,type=BYTE_ARRAY,convertedtype=UTF8" json:"carrier_ip" diff:"carrier_ip"`
	CustomerOwnedIp string `parquet:"name=customer_owned_ip,type=BYTE_ARRAY,convertedtype=UTF8" json:"customer_owned_ip" diff:"customer_owned_ip"`
	IpOwnerId       string `parquet:"name=ip_owner_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"ip_owner_id" diff:"ip_owner_id"`
	PublicDnsName   string `parquet:"name=public_dns_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"public_dns_name" diff:"public_dns_name"`
	PublicIp        string `parquet:"name=public_ip,type=BYTE_ARRAY,convertedtype=UTF8" json:"public_ip" diff:"public_ip"`
}

type NetworkInterfaceAttachment struct {
	AttachTime          *time.Time `json:"-"`
	AttachmentId        string     `parquet:"name=attachment_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"attachment_id" diff:"attachment_id"`
	DeleteOnTermination bool       `parquet:"name=delete_on_termination,type=BOOLEAN" json:"delete_on_termination" diff:"delete_on_termination"`
	DeviceIndex         int32      `parquet:"name=device_index,type=INT32" json:"device_index" diff:"device_index"`
	InstanceId          string     `parquet:"name=instance_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_id" diff:"instance_id"`
	InstanceOwnerId     string     `parquet:"name=instance_owner_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_owner_id" diff:"instance_owner_id"`
	NetworkCardIndex    int32      `parquet:"name=network_card_index,type=INT32" json:"network_card_index" diff:"network_card_index"`
	Status              string     `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
	AttachTimeMilli     int64      `parquet:"name=attach_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"attach_time" diff:"attach_time"`
}

type Ipv4PrefixSpecification struct {
	Ipv4Prefix string `parquet:"name=ipv4_prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv4_prefix" diff:"ipv4_prefix"`
}

type NetworkInterfaceIpv6Address struct {
	Ipv6Address string `parquet:"name=ipv6_address,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv6_address" diff:"ipv6_address"`
}

type Ipv6PrefixSpecification struct {
	Ipv6Prefix string `parquet:"name=ipv6_prefix,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv6_prefix" diff:"ipv6_prefix"`
}

type NetworkInterfacePrivateIpAddress struct {
	Association      *NetworkInterfaceAssociation `parquet:"name=association" json:"association" diff:"association"`
	Primary          bool                         `parquet:"name=primary,type=BOOLEAN" json:"primary" diff:"primary"`
	PrivateDnsName   string                       `parquet:"name=private_dns_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"private_dns_name" diff:"private_dns_name"`
	PrivateIpAddress string                       `parquet:"name=private_ip_address,type=BYTE_ARRAY,convertedtype=UTF8" json:"private_ip_address" diff:"private_ip_address"`
}

type RecurringCharge struct {
	Amount    float64 `parquet:"name=amount,type=DOUBLE" json:"amount" diff:"amount"`
	Frequency string  `parquet:"name=frequency,type=BYTE_ARRAY,convertedtype=UTF8" json:"frequency" diff:"frequency"`
}

type RouteTableAssociation struct {
	AssociationState        *RouteTableAssociationState `parquet:"name=association_state" json:"association_state" diff:"association_state"`
	GatewayId               string                      `parquet:"name=gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"gateway_id" diff:"gateway_id"`
	Main                    bool                        `parquet:"name=main,type=BOOLEAN" json:"main" diff:"main"`
	RouteTableAssociationId string                      `parquet:"name=route_table_association_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"route_table_association_id" diff:"route_table_association_id"`
	RouteTableId            string                      `parquet:"name=route_table_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"route_table_id" diff:"route_table_id,identifier"`
	SubnetId                string                      `parquet:"name=subnet_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"subnet_id" diff:"subnet_id"`
}

type RouteTableAssociationState struct {
	State         string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
	StatusMessage string `parquet:"name=status_message,type=BYTE_ARRAY,convertedtype=UTF8" json:"status_message" diff:"status_message"`
}

type PropagatingVgw struct {
	GatewayId string `parquet:"name=gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"gateway_id" diff:"gateway_id"`
}

type Route struct {
	CarrierGatewayId            string `parquet:"name=carrier_gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"carrier_gateway_id" diff:"carrier_gateway_id"`
	CoreNetworkArn              string `parquet:"name=core_network_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"core_network_arn" diff:"core_network_arn"`
	DestinationCidrBlock        string `parquet:"name=destination_cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"destination_cidr_block" diff:"destination_cidr_block"`
	DestinationIpv6CidrBlock    string `parquet:"name=destination_ipv6_cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"destination_ipv6_cidr_block" diff:"destination_ipv6_cidr_block"`
	DestinationPrefixListId     string `parquet:"name=destination_prefix_list_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"destination_prefix_list_id" diff:"destination_prefix_list_id"`
	EgressOnlyInternetGatewayId string `parquet:"name=egress_only_internet_gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"egress_only_internet_gateway_id" diff:"egress_only_internet_gateway_id"`
	GatewayId                   string `parquet:"name=gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"gateway_id" diff:"gateway_id"`
	InstanceId                  string `parquet:"name=instance_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_id" diff:"instance_id"`
	InstanceOwnerId             string `parquet:"name=instance_owner_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_owner_id" diff:"instance_owner_id"`
	LocalGatewayId              string `parquet:"name=local_gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"local_gateway_id" diff:"local_gateway_id"`
	NatGatewayId                string `parquet:"name=nat_gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"nat_gateway_id" diff:"nat_gateway_id"`
	NetworkInterfaceId          string `parquet:"name=network_interface_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"network_interface_id" diff:"network_interface_id"`
	Origin                      string `parquet:"name=origin,type=BYTE_ARRAY,convertedtype=UTF8" json:"origin" diff:"origin"`
	State                       string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
	TransitGatewayId            string `parquet:"name=transit_gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"transit_gateway_id" diff:"transit_gateway_id"`
	VpcPeeringConnectionId      string `parquet:"name=vpc_peering_connection_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_peering_connection_id" diff:"vpc_peering_connection_id"`
}

type IpPermission struct {
	FromPort         int32              `parquet:"name=from_port,type=INT32" json:"from_port" diff:"from_port"`
	IpProtocol       string             `parquet:"name=ip_protocol,type=BYTE_ARRAY,convertedtype=UTF8" json:"ip_protocol" diff:"ip_protocol"`
	IpRanges         []*IpRange         `parquet:"name=ip_ranges,type=MAP,convertedtype=LIST" json:"ip_ranges" diff:"ip_ranges"`
	Ipv6Ranges       []*Ipv6Range       `parquet:"name=ipv6_ranges,type=MAP,convertedtype=LIST" json:"ipv6_ranges" diff:"ipv6_ranges"`
	PrefixListIds    []*PrefixListId    `parquet:"name=prefix_list_ids,type=MAP,convertedtype=LIST" json:"prefix_list_ids" diff:"prefix_list_ids"`
	ToPort           int32              `parquet:"name=to_port,type=INT32" json:"to_port" diff:"to_port"`
	UserIdGroupPairs []*UserIdGroupPair `parquet:"name=user_id_group_pairs,type=MAP,convertedtype=LIST" json:"user_id_group_pairs" diff:"user_id_group_pairs"`
}

type IpRange struct {
	CidrIp      string `parquet:"name=cidr_ip,type=BYTE_ARRAY,convertedtype=UTF8" json:"cidr_ip" diff:"cidr_ip"`
	Description string `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8" json:"description" diff:"description"`
}

type Ipv6Range struct {
	CidrIpv6    string `parquet:"name=cidr_ipv6,type=BYTE_ARRAY,convertedtype=UTF8" json:"cidr_ipv6" diff:"cidr_ipv6"`
	Description string `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8" json:"description" diff:"description"`
}

type PrefixListId struct {
	Description  string `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8" json:"description" diff:"description"`
	PrefixListId string `parquet:"name=prefix_list_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"prefix_list_id" diff:"prefix_list_id"`
}

type UserIdGroupPair struct {
	Description            string `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8" json:"description" diff:"description"`
	GroupId                string `parquet:"name=group_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"group_id" diff:"group_id,identifier"`
	GroupName              string `parquet:"name=group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"group_name" diff:"group_name"`
	PeeringStatus          string `parquet:"name=peering_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"peering_status" diff:"peering_status"`
	UserId                 string `parquet:"name=user_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"user_id" diff:"user_id"`
	VpcId                  string `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_id" diff:"vpc_id"`
	VpcPeeringConnectionId string `parquet:"name=vpc_peering_connection_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_peering_connection_id" diff:"vpc_peering_connection_id"`
}

type SubnetIpv6CidrBlockAssociation struct {
	AssociationId      string                `parquet:"name=association_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"association_id" diff:"association_id"`
	Ipv6CidrBlock      string                `parquet:"name=ipv6_cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv6_cidr_block" diff:"ipv6_cidr_block"`
	Ipv6CidrBlockState *SubnetCidrBlockState `parquet:"name=ipv6_cidr_block_state" json:"ipv6_cidr_block_state" diff:"ipv6_cidr_block_state"`
}

type SubnetCidrBlockState struct {
	State         string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
	StatusMessage string `parquet:"name=status_message,type=BYTE_ARRAY,convertedtype=UTF8" json:"status_message" diff:"status_message"`
}

type PrivateDnsNameOptionsOnLaunch struct {
	EnableResourceNameDnsAAAARecord bool   `parquet:"name=enable_resource_name_dns_aaaa_record,type=BOOLEAN" json:"enable_resource_name_dns_aaaa_record" diff:"enable_resource_name_dns_aaaa_record"`
	EnableResourceNameDnsARecord    bool   `parquet:"name=enable_resource_name_dns_a_record,type=BOOLEAN" json:"enable_resource_name_dns_a_record" diff:"enable_resource_name_dns_a_record"`
	HostnameType                    string `parquet:"name=hostname_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"hostname_type" diff:"hostname_type"`
}

type PeeringTgwInfo struct {
	OwnerId          string `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"owner_id" diff:"owner_id"`
	Region           string `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8" json:"region" diff:"region"`
	TransitGatewayId string `parquet:"name=transit_gateway_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"transit_gateway_id" diff:"transit_gateway_id"`
}

type PeeringAttachmentStatus struct {
	Code    string `parquet:"name=code,type=BYTE_ARRAY,convertedtype=UTF8" json:"code" diff:"code"`
	Message string `parquet:"name=message,type=BYTE_ARRAY,convertedtype=UTF8" json:"message" diff:"message"`
}

type TransitGatewayVpcAttachmentOptions struct {
	ApplianceModeSupport string `parquet:"name=appliance_mode_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"appliance_mode_support" diff:"appliance_mode_support"`
	DnsSupport           string `parquet:"name=dns_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"dns_support" diff:"dns_support"`
	Ipv6Support          string `parquet:"name=ipv6_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv6_support" diff:"ipv6_support"`
}

type TransitGatewayOptions struct {
	AmazonSideAsn                  int64    `parquet:"name=amazon_side_asn,type=INT64" json:"amazon_side_asn" diff:"amazon_side_asn"`
	AssociationDefaultRouteTableId string   `parquet:"name=association_default_route_table_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"association_default_route_table_id" diff:"association_default_route_table_id"`
	AutoAcceptSharedAttachments    string   `parquet:"name=auto_accept_shared_attachments,type=BYTE_ARRAY,convertedtype=UTF8" json:"auto_accept_shared_attachments" diff:"auto_accept_shared_attachments"`
	DefaultRouteTableAssociation   string   `parquet:"name=default_route_table_association,type=BYTE_ARRAY,convertedtype=UTF8" json:"default_route_table_association" diff:"default_route_table_association"`
	DefaultRouteTablePropagation   string   `parquet:"name=default_route_table_propagation,type=BYTE_ARRAY,convertedtype=UTF8" json:"default_route_table_propagation" diff:"default_route_table_propagation"`
	DnsSupport                     string   `parquet:"name=dns_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"dns_support" diff:"dns_support"`
	MulticastSupport               string   `parquet:"name=multicast_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"multicast_support" diff:"multicast_support"`
	PropagationDefaultRouteTableId string   `parquet:"name=propagation_default_route_table_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"propagation_default_route_table_id" diff:"propagation_default_route_table_id"`
	TransitGatewayCidrBlocks       []string `parquet:"name=transit_gateway_cidr_blocks,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"transit_gateway_cidr_blocks" diff:"transit_gateway_cidr_blocks"`
	VpnEcmpSupport                 string   `parquet:"name=vpn_ecmp_support,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpn_ecmp_support" diff:"vpn_ecmp_support"`
}

type VolumeAttachment struct {
	AttachTime          *time.Time `json:"-"`
	DeleteOnTermination bool       `parquet:"name=delete_on_termination,type=BOOLEAN" json:"delete_on_termination" diff:"delete_on_termination"`
	Device              string     `parquet:"name=device,type=BYTE_ARRAY,convertedtype=UTF8" json:"device" diff:"device"`
	InstanceId          string     `parquet:"name=instance_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_id" diff:"instance_id"`
	State               string     `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
	VolumeId            string     `parquet:"name=volume_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"volume_id" diff:"volume_id,identifier"`
	AttachTimeMilli     int64      `parquet:"name=attach_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"attach_time" diff:"attach_time"`
}

type DnsEntry struct {
	DnsName      string `parquet:"name=dns_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"dns_name" diff:"dns_name"`
	HostedZoneId string `parquet:"name=hosted_zone_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"hosted_zone_id" diff:"hosted_zone_id"`
}

type SecurityGroupIdentifier struct {
	GroupId   string `parquet:"name=group_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"group_id" diff:"group_id"`
	GroupName string `parquet:"name=group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"group_name" diff:"group_name"`
}

type LastError struct {
	Code    string `parquet:"name=code,type=BYTE_ARRAY,convertedtype=UTF8" json:"code" diff:"code"`
	Message string `parquet:"name=message,type=BYTE_ARRAY,convertedtype=UTF8" json:"message" diff:"message"`
}

type VpcPeeringConnectionVpcInfo struct {
	CidrBlock        string                                  `parquet:"name=cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"cidr_block" diff:"cidr_block"`
	CidrBlockSet     []*CidrBlock                            `parquet:"name=cidr_block_set,type=MAP,convertedtype=LIST" json:"cidr_block_set" diff:"cidr_block_set"`
	Ipv6CidrBlockSet []*Ipv6CidrBlock                        `parquet:"name=ipv6_cidr_block_set,type=MAP,convertedtype=LIST" json:"ipv6_cidr_block_set" diff:"ipv6_cidr_block_set"`
	OwnerId          string                                  `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"owner_id" diff:"owner_id"`
	PeeringOptions   *VpcPeeringConnectionOptionsDescription `parquet:"name=peering_options" json:"peering_options" diff:"peering_options"`
	Region           string                                  `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8" json:"region" diff:"region"`
	VpcId            string                                  `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_id" diff:"vpc_id"`
}

type CidrBlock struct {
	CidrBlock string `parquet:"name=cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"cidr_block" diff:"cidr_block"`
}

type Ipv6CidrBlock struct {
	Ipv6CidrBlock string `parquet:"name=ipv6_cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv6_cidr_block" diff:"ipv6_cidr_block"`
}

type VpcPeeringConnectionOptionsDescription struct {
	AllowDnsResolutionFromRemoteVpc            bool `parquet:"name=allow_dns_resolution_from_remote_vpc,type=BOOLEAN" json:"allow_dns_resolution_from_remote_vpc" diff:"allow_dns_resolution_from_remote_vpc"`
	AllowEgressFromLocalClassicLinkToRemoteVpc bool `parquet:"name=allow_egress_from_local_classic_link_to_remote_vpc,type=BOOLEAN" json:"allow_egress_from_local_classic_link_to_remote_vpc" diff:"allow_egress_from_local_classic_link_to_remote_vpc"`
	AllowEgressFromLocalVpcToRemoteClassicLink bool `parquet:"name=allow_egress_from_local_vpc_to_remote_classic_link,type=BOOLEAN" json:"allow_egress_from_local_vpc_to_remote_classic_link" diff:"allow_egress_from_local_vpc_to_remote_classic_link"`
}

type VpcPeeringConnectionStateReason struct {
	Code    string `parquet:"name=code,type=BYTE_ARRAY,convertedtype=UTF8" json:"code" diff:"code"`
	Message string `parquet:"name=message,type=BYTE_ARRAY,convertedtype=UTF8" json:"message" diff:"message"`
}

type VpcCidrBlockAssociation struct {
	AssociationId  string             `parquet:"name=association_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"association_id" diff:"association_id"`
	CidrBlock      string             `parquet:"name=cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"cidr_block" diff:"cidr_block"`
	CidrBlockState *VpcCidrBlockState `parquet:"name=cidr_block_state" json:"cidr_block_state" diff:"cidr_block_state"`
}

type VpcCidrBlockState struct {
	State         string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
	StatusMessage string `parquet:"name=status_message,type=BYTE_ARRAY,convertedtype=UTF8" json:"status_message" diff:"status_message"`
}

type VpcIpv6CidrBlockAssociation struct {
	AssociationId      string             `parquet:"name=association_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"association_id" diff:"association_id"`
	Ipv6CidrBlock      string             `parquet:"name=ipv6_cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv6_cidr_block" diff:"ipv6_cidr_block"`
	Ipv6CidrBlockState *VpcCidrBlockState `parquet:"name=ipv6_cidr_block_state" json:"ipv6_cidr_block_state" diff:"ipv6_cidr_block_state"`
	Ipv6Pool           string             `parquet:"name=ipv6_pool,type=BYTE_ARRAY,convertedtype=UTF8" json:"ipv6_pool" diff:"ipv6_pool"`
	NetworkBorderGroup string             `parquet:"name=network_border_group,type=BYTE_ARRAY,convertedtype=UTF8" json:"network_border_group" diff:"network_border_group"`
}

type VpcAttachment struct {
	State string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
	VpcId string `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_id" diff:"vpc_id"`
}

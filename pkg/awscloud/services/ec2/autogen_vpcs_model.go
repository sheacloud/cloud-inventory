//AUTOGENERATED CODE DO NOT EDIT
package ec2

type Vpc struct {
	CidrBlock                   string                         `parquet:"name=cidr_block,type=BYTE_ARRAY,convertedtype=UTF8" json:"cidr_block" diff:"cidr_block"`
	CidrBlockAssociationSet     []*VpcCidrBlockAssociation     `parquet:"name=cidr_block_association_set,type=MAP,convertedtype=LIST" json:"cidr_block_association_set" diff:"cidr_block_association_set"`
	DhcpOptionsId               string                         `parquet:"name=dhcp_options_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"dhcp_options_id" diff:"dhcp_options_id"`
	InstanceTenancy             string                         `parquet:"name=instance_tenancy,type=BYTE_ARRAY,convertedtype=UTF8" json:"instance_tenancy" diff:"instance_tenancy"`
	Ipv6CidrBlockAssociationSet []*VpcIpv6CidrBlockAssociation `parquet:"name=ipv6_cidr_block_association_set,type=MAP,convertedtype=LIST" json:"ipv6_cidr_block_association_set" diff:"ipv6_cidr_block_association_set"`
	IsDefault                   bool                           `parquet:"name=is_default,type=BOOLEAN" json:"is_default" diff:"is_default"`
	OwnerId                     string                         `parquet:"name=owner_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"owner_id" diff:"owner_id"`
	State                       string                         `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8" json:"state" diff:"state"`
	Tags                        map[string]string              `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"tags" diff:"tags"`
	VpcId                       string                         `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"vpc_id" diff:"vpc_id,identifier"`
	AccountId                   string                         `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"account_id" diff:"account_id"`
	Region                      string                         `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8" json:"region" diff:"region"`
	ReportTime                  int64                          `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"report_time" diff:"report_time,immutable"`
}

func (x *Vpc) GetReportTime() int64 {
	return x.ReportTime
}

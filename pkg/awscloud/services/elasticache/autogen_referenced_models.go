//AUTOGENERATED CODE DO NOT EDIT
package elasticache

import (
	"time"
)

type CacheNode struct {
	CacheNodeCreateTime      *time.Time
	CacheNodeId              string    `parquet:"name=cache_node_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_node_id" diff:"cache_node_id"`
	CacheNodeStatus          string    `parquet:"name=cache_node_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_node_status" diff:"cache_node_status"`
	CustomerAvailabilityZone string    `parquet:"name=customer_availability_zone,type=BYTE_ARRAY,convertedtype=UTF8" json:"customer_availability_zone" diff:"customer_availability_zone"`
	CustomerOutpostArn       string    `parquet:"name=customer_outpost_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"customer_outpost_arn" diff:"customer_outpost_arn"`
	Endpoint                 *Endpoint `parquet:"name=endpoint" json:"endpoint" diff:"endpoint"`
	ParameterGroupStatus     string    `parquet:"name=parameter_group_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"parameter_group_status" diff:"parameter_group_status"`
	SourceCacheNodeId        string    `parquet:"name=source_cache_node_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"source_cache_node_id" diff:"source_cache_node_id"`
	CacheNodeCreateTimeMilli int64     `parquet:"name=cache_node_create_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"cache_node_create_time" diff:"cache_node_create_time"`
}

type Endpoint struct {
	Address string `parquet:"name=address,type=BYTE_ARRAY,convertedtype=UTF8" json:"address" diff:"address"`
	Port    int32  `parquet:"name=port,type=INT32" json:"port" diff:"port"`
}

type CacheParameterGroupStatus struct {
	CacheNodeIdsToReboot    []string `parquet:"name=cache_node_ids_to_reboot,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"cache_node_ids_to_reboot" diff:"cache_node_ids_to_reboot"`
	CacheParameterGroupName string   `parquet:"name=cache_parameter_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_parameter_group_name" diff:"cache_parameter_group_name"`
	ParameterApplyStatus    string   `parquet:"name=parameter_apply_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"parameter_apply_status" diff:"parameter_apply_status"`
}

type CacheSecurityGroupMembership struct {
	CacheSecurityGroupName string `parquet:"name=cache_security_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_security_group_name" diff:"cache_security_group_name"`
	Status                 string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
}

type LogDeliveryConfiguration struct {
	DestinationDetails *DestinationDetails `parquet:"name=destination_details" json:"destination_details" diff:"destination_details"`
	DestinationType    string              `parquet:"name=destination_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"destination_type" diff:"destination_type"`
	LogFormat          string              `parquet:"name=log_format,type=BYTE_ARRAY,convertedtype=UTF8" json:"log_format" diff:"log_format"`
	LogType            string              `parquet:"name=log_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"log_type" diff:"log_type"`
	Message            string              `parquet:"name=message,type=BYTE_ARRAY,convertedtype=UTF8" json:"message" diff:"message"`
	Status             string              `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
}

type DestinationDetails struct {
	CloudWatchLogsDetails  *CloudWatchLogsDestinationDetails  `parquet:"name=cloud_watch_logs_details" json:"cloud_watch_logs_details" diff:"cloud_watch_logs_details"`
	KinesisFirehoseDetails *KinesisFirehoseDestinationDetails `parquet:"name=kinesis_firehose_details" json:"kinesis_firehose_details" diff:"kinesis_firehose_details"`
}

type CloudWatchLogsDestinationDetails struct {
	LogGroup string `parquet:"name=log_group,type=BYTE_ARRAY,convertedtype=UTF8" json:"log_group" diff:"log_group"`
}

type KinesisFirehoseDestinationDetails struct {
	DeliveryStream string `parquet:"name=delivery_stream,type=BYTE_ARRAY,convertedtype=UTF8" json:"delivery_stream" diff:"delivery_stream"`
}

type NotificationConfiguration struct {
	TopicArn    string `parquet:"name=topic_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"topic_arn" diff:"topic_arn"`
	TopicStatus string `parquet:"name=topic_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"topic_status" diff:"topic_status"`
}

type PendingModifiedValues struct {
	AuthTokenStatus           string                             `parquet:"name=auth_token_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"auth_token_status" diff:"auth_token_status"`
	CacheNodeIdsToRemove      []string                           `parquet:"name=cache_node_ids_to_remove,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"cache_node_ids_to_remove" diff:"cache_node_ids_to_remove"`
	CacheNodeType             string                             `parquet:"name=cache_node_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"cache_node_type" diff:"cache_node_type"`
	EngineVersion             string                             `parquet:"name=engine_version,type=BYTE_ARRAY,convertedtype=UTF8" json:"engine_version" diff:"engine_version"`
	LogDeliveryConfigurations []*PendingLogDeliveryConfiguration `parquet:"name=log_delivery_configurations,type=MAP,convertedtype=LIST" json:"log_delivery_configurations" diff:"log_delivery_configurations"`
	NumCacheNodes             int32                              `parquet:"name=num_cache_nodes,type=INT32" json:"num_cache_nodes" diff:"num_cache_nodes"`
}

type PendingLogDeliveryConfiguration struct {
	DestinationDetails *DestinationDetails `parquet:"name=destination_details" json:"destination_details" diff:"destination_details"`
	DestinationType    string              `parquet:"name=destination_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"destination_type" diff:"destination_type"`
	LogFormat          string              `parquet:"name=log_format,type=BYTE_ARRAY,convertedtype=UTF8" json:"log_format" diff:"log_format"`
	LogType            string              `parquet:"name=log_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"log_type" diff:"log_type"`
}

type SecurityGroupMembership struct {
	SecurityGroupId string `parquet:"name=security_group_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"security_group_id" diff:"security_group_id"`
	Status          string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
}

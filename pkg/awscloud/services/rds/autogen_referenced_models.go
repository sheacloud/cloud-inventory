//AUTOGENERATED CODE DO NOT EDIT
package rds

import (
	"time"
)

type DBClusterRole struct {
	FeatureName string `parquet:"name=feature_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"feature_name" diff:"feature_name"`
	RoleArn     string `parquet:"name=role_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"role_arn" diff:"role_arn"`
	Status      string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
}

type DBClusterMember struct {
	DBClusterParameterGroupStatus string `parquet:"name=db_cluster_parameter_group_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_cluster_parameter_group_status" diff:"db_cluster_parameter_group_status"`
	DBInstanceIdentifier          string `parquet:"name=db_instance_identifier,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_instance_identifier" diff:"db_instance_identifier"`
	IsClusterWriter               bool   `parquet:"name=is_cluster_writer,type=BOOLEAN" json:"is_cluster_writer" diff:"is_cluster_writer"`
	PromotionTier                 int32  `parquet:"name=promotion_tier,type=INT32" json:"promotion_tier" diff:"promotion_tier"`
}

type DBClusterOptionGroupStatus struct {
	DBClusterOptionGroupName string `parquet:"name=db_cluster_option_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_cluster_option_group_name" diff:"db_cluster_option_group_name"`
	Status                   string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
}

type DomainMembership struct {
	Domain      string `parquet:"name=domain,type=BYTE_ARRAY,convertedtype=UTF8" json:"domain" diff:"domain"`
	FQDN        string `parquet:"name=fqdn,type=BYTE_ARRAY,convertedtype=UTF8" json:"fqdn" diff:"fqdn"`
	IAMRoleName string `parquet:"name=iam_role_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"iam_role_name" diff:"iam_role_name"`
	Status      string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
}

type ClusterPendingModifiedValues struct {
	DBClusterIdentifier              string                        `parquet:"name=db_cluster_identifier,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_cluster_identifier" diff:"db_cluster_identifier"`
	EngineVersion                    string                        `parquet:"name=engine_version,type=BYTE_ARRAY,convertedtype=UTF8" json:"engine_version" diff:"engine_version"`
	IAMDatabaseAuthenticationEnabled bool                          `parquet:"name=iam_database_authentication_enabled,type=BOOLEAN" json:"iam_database_authentication_enabled" diff:"iam_database_authentication_enabled"`
	MasterUserPassword               string                        `parquet:"name=master_user_password,type=BYTE_ARRAY,convertedtype=UTF8" json:"master_user_password" diff:"master_user_password"`
	PendingCloudwatchLogsExports     *PendingCloudwatchLogsExports `parquet:"name=pending_cloudwatch_logs_exports" json:"pending_cloudwatch_logs_exports" diff:"pending_cloudwatch_logs_exports"`
}

type PendingCloudwatchLogsExports struct {
	LogTypesToDisable []string `parquet:"name=log_types_to_disable,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"log_types_to_disable" diff:"log_types_to_disable"`
	LogTypesToEnable  []string `parquet:"name=log_types_to_enable,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8" json:"log_types_to_enable" diff:"log_types_to_enable"`
}

type ScalingConfigurationInfo struct {
	AutoPause             bool   `parquet:"name=auto_pause,type=BOOLEAN" json:"auto_pause" diff:"auto_pause"`
	MaxCapacity           int32  `parquet:"name=max_capacity,type=INT32" json:"max_capacity" diff:"max_capacity"`
	MinCapacity           int32  `parquet:"name=min_capacity,type=INT32" json:"min_capacity" diff:"min_capacity"`
	SecondsBeforeTimeout  int32  `parquet:"name=seconds_before_timeout,type=INT32" json:"seconds_before_timeout" diff:"seconds_before_timeout"`
	SecondsUntilAutoPause int32  `parquet:"name=seconds_until_auto_pause,type=INT32" json:"seconds_until_auto_pause" diff:"seconds_until_auto_pause"`
	TimeoutAction         string `parquet:"name=timeout_action,type=BYTE_ARRAY,convertedtype=UTF8" json:"timeout_action" diff:"timeout_action"`
}

type Tag struct {
	Key   string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8" json:"key" diff:"key"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8" json:"value" diff:"value"`
}

type VpcSecurityGroupMembership struct {
	Status             string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
	VpcSecurityGroupId string `parquet:"name=vpc_security_group_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_security_group_id" diff:"vpc_security_group_id"`
}

type DBInstanceRole struct {
	FeatureName string `parquet:"name=feature_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"feature_name" diff:"feature_name"`
	RoleArn     string `parquet:"name=role_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"role_arn" diff:"role_arn"`
	Status      string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
}

type DBInstanceAutomatedBackupsReplication struct {
	DBInstanceAutomatedBackupsArn string `parquet:"name=db_instance_automated_backups_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_instance_automated_backups_arn" diff:"db_instance_automated_backups_arn"`
}

type DBParameterGroupStatus struct {
	DBParameterGroupName string `parquet:"name=db_parameter_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_parameter_group_name" diff:"db_parameter_group_name"`
	ParameterApplyStatus string `parquet:"name=parameter_apply_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"parameter_apply_status" diff:"parameter_apply_status"`
}

type DBSecurityGroupMembership struct {
	DBSecurityGroupName string `parquet:"name=db_security_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_security_group_name" diff:"db_security_group_name"`
	Status              string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
}

type DBSubnetGroup struct {
	DBSubnetGroupArn         string    `parquet:"name=db_subnet_group_arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_subnet_group_arn" diff:"db_subnet_group_arn"`
	DBSubnetGroupDescription string    `parquet:"name=db_subnet_group_description,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_subnet_group_description" diff:"db_subnet_group_description"`
	DBSubnetGroupName        string    `parquet:"name=db_subnet_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_subnet_group_name" diff:"db_subnet_group_name"`
	SubnetGroupStatus        string    `parquet:"name=subnet_group_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"subnet_group_status" diff:"subnet_group_status"`
	Subnets                  []*Subnet `parquet:"name=subnets,type=MAP,convertedtype=LIST" json:"subnets" diff:"subnets"`
	VpcId                    string    `parquet:"name=vpc_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"vpc_id" diff:"vpc_id"`
}

type Subnet struct {
	SubnetAvailabilityZone *AvailabilityZone `parquet:"name=subnet_availability_zone" json:"subnet_availability_zone" diff:"subnet_availability_zone"`
	SubnetIdentifier       string            `parquet:"name=subnet_identifier,type=BYTE_ARRAY,convertedtype=UTF8" json:"subnet_identifier" diff:"subnet_identifier"`
	SubnetOutpost          *Outpost          `parquet:"name=subnet_outpost" json:"subnet_outpost" diff:"subnet_outpost"`
	SubnetStatus           string            `parquet:"name=subnet_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"subnet_status" diff:"subnet_status"`
}

type AvailabilityZone struct {
	Name string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" json:"name" diff:"name"`
}

type Outpost struct {
	Arn string `parquet:"name=arn,type=BYTE_ARRAY,convertedtype=UTF8" json:"arn" diff:"arn"`
}

type Endpoint struct {
	Address      string `parquet:"name=address,type=BYTE_ARRAY,convertedtype=UTF8" json:"address" diff:"address"`
	HostedZoneId string `parquet:"name=hosted_zone_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"hosted_zone_id" diff:"hosted_zone_id"`
	Port         int32  `parquet:"name=port,type=INT32" json:"port" diff:"port"`
}

type OptionGroupMembership struct {
	OptionGroupName string `parquet:"name=option_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"option_group_name" diff:"option_group_name"`
	Status          string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
}

type PendingModifiedValues struct {
	AllocatedStorage                  int32                         `parquet:"name=allocated_storage,type=INT32" json:"allocated_storage" diff:"allocated_storage"`
	AutomationMode                    string                        `parquet:"name=automation_mode,type=BYTE_ARRAY,convertedtype=UTF8" json:"automation_mode" diff:"automation_mode"`
	BackupRetentionPeriod             int32                         `parquet:"name=backup_retention_period,type=INT32" json:"backup_retention_period" diff:"backup_retention_period"`
	CACertificateIdentifier           string                        `parquet:"name=ca_certificate_identifier,type=BYTE_ARRAY,convertedtype=UTF8" json:"ca_certificate_identifier" diff:"ca_certificate_identifier"`
	DBInstanceClass                   string                        `parquet:"name=db_instance_class,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_instance_class" diff:"db_instance_class"`
	DBInstanceIdentifier              string                        `parquet:"name=db_instance_identifier,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_instance_identifier" diff:"db_instance_identifier"`
	DBSubnetGroupName                 string                        `parquet:"name=db_subnet_group_name,type=BYTE_ARRAY,convertedtype=UTF8" json:"db_subnet_group_name" diff:"db_subnet_group_name"`
	EngineVersion                     string                        `parquet:"name=engine_version,type=BYTE_ARRAY,convertedtype=UTF8" json:"engine_version" diff:"engine_version"`
	IAMDatabaseAuthenticationEnabled  bool                          `parquet:"name=iam_database_authentication_enabled,type=BOOLEAN" json:"iam_database_authentication_enabled" diff:"iam_database_authentication_enabled"`
	Iops                              int32                         `parquet:"name=iops,type=INT32" json:"iops" diff:"iops"`
	LicenseModel                      string                        `parquet:"name=license_model,type=BYTE_ARRAY,convertedtype=UTF8" json:"license_model" diff:"license_model"`
	MasterUserPassword                string                        `parquet:"name=master_user_password,type=BYTE_ARRAY,convertedtype=UTF8" json:"master_user_password" diff:"master_user_password"`
	MultiAZ                           bool                          `parquet:"name=multi_az,type=BOOLEAN" json:"multi_az" diff:"multi_az"`
	PendingCloudwatchLogsExports      *PendingCloudwatchLogsExports `parquet:"name=pending_cloudwatch_logs_exports" json:"pending_cloudwatch_logs_exports" diff:"pending_cloudwatch_logs_exports"`
	Port                              int32                         `parquet:"name=port,type=INT32" json:"port" diff:"port"`
	ProcessorFeatures                 []*ProcessorFeature           `parquet:"name=processor_features,type=MAP,convertedtype=LIST" json:"processor_features" diff:"processor_features"`
	ResumeFullAutomationModeTime      *time.Time
	StorageType                       string `parquet:"name=storage_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"storage_type" diff:"storage_type"`
	ResumeFullAutomationModeTimeMilli int64  `parquet:"name=resume_full_automation_mode_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"resume_full_automation_mode_time" diff:"resume_full_automation_mode_time"`
}

type ProcessorFeature struct {
	Name  string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" json:"name" diff:"name"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8" json:"value" diff:"value"`
}

type DBInstanceStatusInfo struct {
	Message    string `parquet:"name=message,type=BYTE_ARRAY,convertedtype=UTF8" json:"message" diff:"message"`
	Normal     bool   `parquet:"name=normal,type=BOOLEAN" json:"normal" diff:"normal"`
	Status     string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8" json:"status" diff:"status"`
	StatusType string `parquet:"name=status_type,type=BYTE_ARRAY,convertedtype=UTF8" json:"status_type" diff:"status_type"`
}

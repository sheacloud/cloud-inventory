//AUTOGENERATED CODE DO NOT EDIT
package ecs

import (
	"time"
)

type Attachment struct {
	Details []*KeyValuePair `parquet:"name=details,type=MAP,convertedtype=LIST"`
	Id string `parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Status string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
	Type string `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type KeyValuePair struct {
	Name string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ClusterConfiguration struct {
	ExecuteCommandConfiguration *ExecuteCommandConfiguration `parquet:"name=execute_command_configuration"`
}

type ExecuteCommandConfiguration struct {
	KmsKeyId string `parquet:"name=kms_key_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	LogConfiguration *ExecuteCommandLogConfiguration `parquet:"name=log_configuration"`
	Logging string `parquet:"name=logging,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ExecuteCommandLogConfiguration struct {
	CloudWatchEncryptionEnabled bool `parquet:"name=cloud_watch_encryption_enabled,type=BOOLEAN"`
	CloudWatchLogGroupName string `parquet:"name=cloud_watch_log_group_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	S3BucketName string `parquet:"name=s3_bucket_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	S3EncryptionEnabled bool `parquet:"name=s3_encryption_enabled,type=BOOLEAN"`
	S3KeyPrefix string `parquet:"name=s3_key_prefix,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type CapacityProviderStrategyItem struct {
	CapacityProvider string `parquet:"name=capacity_provider,type=BYTE_ARRAY,convertedtype=UTF8"`
	Base int32 `parquet:"name=base,type=INT32"`
	Weight int32 `parquet:"name=weight,type=INT32"`
}

type ClusterSetting struct {
	Name string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Tag struct {
	Key string `parquet:"name=key,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type DeploymentConfiguration struct {
	DeploymentCircuitBreaker *DeploymentCircuitBreaker `parquet:"name=deployment_circuit_breaker"`
	MaximumPercent int32 `parquet:"name=maximum_percent,type=INT32"`
	MinimumHealthyPercent int32 `parquet:"name=minimum_healthy_percent,type=INT32"`
}

type DeploymentCircuitBreaker struct {
	Enable bool `parquet:"name=enable,type=BOOLEAN"`
	Rollback bool `parquet:"name=rollback,type=BOOLEAN"`
}

type DeploymentController struct {
	Type string `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Deployment struct {
	CapacityProviderStrategy []*CapacityProviderStrategyItem `parquet:"name=capacity_provider_strategy,type=MAP,convertedtype=LIST"`
	CreatedAt *time.Time 
	DesiredCount int32 `parquet:"name=desired_count,type=INT32"`
	FailedTasks int32 `parquet:"name=failed_tasks,type=INT32"`
	Id string `parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8"`
	LaunchType string `parquet:"name=launch_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	NetworkConfiguration *NetworkConfiguration `parquet:"name=network_configuration"`
	PendingCount int32 `parquet:"name=pending_count,type=INT32"`
	PlatformFamily string `parquet:"name=platform_family,type=BYTE_ARRAY,convertedtype=UTF8"`
	PlatformVersion string `parquet:"name=platform_version,type=BYTE_ARRAY,convertedtype=UTF8"`
	RolloutState string `parquet:"name=rollout_state,type=BYTE_ARRAY,convertedtype=UTF8"`
	RolloutStateReason string `parquet:"name=rollout_state_reason,type=BYTE_ARRAY,convertedtype=UTF8"`
	RunningCount int32 `parquet:"name=running_count,type=INT32"`
	Status string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
	TaskDefinition string `parquet:"name=task_definition,type=BYTE_ARRAY,convertedtype=UTF8"`
	UpdatedAt *time.Time 
	CreatedAtMilli int64 `parquet:"name=created_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	UpdatedAtMilli int64 `parquet:"name=updated_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type NetworkConfiguration struct {
	AwsvpcConfiguration *AwsVpcConfiguration `parquet:"name=awsvpc_configuration"`
}

type AwsVpcConfiguration struct {
	Subnets []string `parquet:"name=subnets,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	AssignPublicIp string `parquet:"name=assign_public_ip,type=BYTE_ARRAY,convertedtype=UTF8"`
	SecurityGroups []string `parquet:"name=security_groups,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
}

type LoadBalancer struct {
	ContainerName string `parquet:"name=container_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	ContainerPort int32 `parquet:"name=container_port,type=INT32"`
	LoadBalancerName string `parquet:"name=load_balancer_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	TargetGroupArn string `parquet:"name=target_group_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type PlacementConstraint struct {
	Expression string `parquet:"name=expression,type=BYTE_ARRAY,convertedtype=UTF8"`
	Type string `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type PlacementStrategy struct {
	Field string `parquet:"name=field,type=BYTE_ARRAY,convertedtype=UTF8"`
	Type string `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ServiceRegistry struct {
	ContainerName string `parquet:"name=container_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	ContainerPort int32 `parquet:"name=container_port,type=INT32"`
	Port int32 `parquet:"name=port,type=INT32"`
	RegistryArn string `parquet:"name=registry_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TaskSet struct {
	CapacityProviderStrategy []*CapacityProviderStrategyItem `parquet:"name=capacity_provider_strategy,type=MAP,convertedtype=LIST"`
	ClusterArn string `parquet:"name=cluster_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	ComputedDesiredCount int32 `parquet:"name=computed_desired_count,type=INT32"`
	CreatedAt *time.Time 
	ExternalId string `parquet:"name=external_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Id string `parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8"`
	LaunchType string `parquet:"name=launch_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	LoadBalancers []*LoadBalancer `parquet:"name=load_balancers,type=MAP,convertedtype=LIST"`
	NetworkConfiguration *NetworkConfiguration `parquet:"name=network_configuration"`
	PendingCount int32 `parquet:"name=pending_count,type=INT32"`
	PlatformFamily string `parquet:"name=platform_family,type=BYTE_ARRAY,convertedtype=UTF8"`
	PlatformVersion string `parquet:"name=platform_version,type=BYTE_ARRAY,convertedtype=UTF8"`
	RunningCount int32 `parquet:"name=running_count,type=INT32"`
	Scale *Scale `parquet:"name=scale"`
	ServiceArn string `parquet:"name=service_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	ServiceRegistries []*ServiceRegistry `parquet:"name=service_registries,type=MAP,convertedtype=LIST"`
	StabilityStatus string `parquet:"name=stability_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	StabilityStatusAt *time.Time 
	StartedBy string `parquet:"name=started_by,type=BYTE_ARRAY,convertedtype=UTF8"`
	Status string `parquet:"name=status,type=BYTE_ARRAY,convertedtype=UTF8"`
	Tags []*Tag `parquet:"name=tags,type=MAP,convertedtype=LIST"`
	TaskDefinition string `parquet:"name=task_definition,type=BYTE_ARRAY,convertedtype=UTF8"`
	TaskSetArn string `parquet:"name=task_set_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	UpdatedAt *time.Time 
	CreatedAtMilli int64 `parquet:"name=created_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	StabilityStatusAtMilli int64 `parquet:"name=stability_status_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	UpdatedAtMilli int64 `parquet:"name=updated_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type Scale struct {
	Unit string `parquet:"name=unit,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value float64 `parquet:"name=value,type=DOUBLE"`
}

type Attribute struct {
	Name string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8"`
	TargetId string `parquet:"name=target_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	TargetType string `parquet:"name=target_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Container struct {
	ContainerArn string `parquet:"name=container_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	Cpu string `parquet:"name=cpu,type=BYTE_ARRAY,convertedtype=UTF8"`
	ExitCode int32 `parquet:"name=exit_code,type=INT32"`
	GpuIds []string `parquet:"name=gpu_ids,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	HealthStatus string `parquet:"name=health_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	Image string `parquet:"name=image,type=BYTE_ARRAY,convertedtype=UTF8"`
	ImageDigest string `parquet:"name=image_digest,type=BYTE_ARRAY,convertedtype=UTF8"`
	LastStatus string `parquet:"name=last_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	ManagedAgents []*ManagedAgent `parquet:"name=managed_agents,type=MAP,convertedtype=LIST"`
	Memory string `parquet:"name=memory,type=BYTE_ARRAY,convertedtype=UTF8"`
	MemoryReservation string `parquet:"name=memory_reservation,type=BYTE_ARRAY,convertedtype=UTF8"`
	Name string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8"`
	NetworkBindings []*NetworkBinding `parquet:"name=network_bindings,type=MAP,convertedtype=LIST"`
	NetworkInterfaces []*NetworkInterface `parquet:"name=network_interfaces,type=MAP,convertedtype=LIST"`
	Reason string `parquet:"name=reason,type=BYTE_ARRAY,convertedtype=UTF8"`
	RuntimeId string `parquet:"name=runtime_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	TaskArn string `parquet:"name=task_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
}

type ManagedAgent struct {
	LastStartedAt *time.Time 
	LastStatus string `parquet:"name=last_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	Name string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8"`
	Reason string `parquet:"name=reason,type=BYTE_ARRAY,convertedtype=UTF8"`
	LastStartedAtMilli int64 `parquet:"name=last_started_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
}

type NetworkBinding struct {
	BindIP string `parquet:"name=bind_ip,type=BYTE_ARRAY,convertedtype=UTF8"`
	ContainerPort int32 `parquet:"name=container_port,type=INT32"`
	HostPort int32 `parquet:"name=host_port,type=INT32"`
	Protocol string `parquet:"name=protocol,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type NetworkInterface struct {
	AttachmentId string `parquet:"name=attachment_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Ipv6Address string `parquet:"name=ipv6_address,type=BYTE_ARRAY,convertedtype=UTF8"`
	PrivateIpv4Address string `parquet:"name=private_ipv4_address,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type EphemeralStorage struct {
	SizeInGiB int32 `parquet:"name=size_in_gi_b,type=INT32"`
}

type InferenceAccelerator struct {
	DeviceName string `parquet:"name=device_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	DeviceType string `parquet:"name=device_type,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TaskOverride struct {
	ContainerOverrides []*ContainerOverride `parquet:"name=container_overrides,type=MAP,convertedtype=LIST"`
	Cpu string `parquet:"name=cpu,type=BYTE_ARRAY,convertedtype=UTF8"`
	EphemeralStorage *EphemeralStorage `parquet:"name=ephemeral_storage"`
	ExecutionRoleArn string `parquet:"name=execution_role_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	InferenceAcceleratorOverrides []*InferenceAcceleratorOverride `parquet:"name=inference_accelerator_overrides,type=MAP,convertedtype=LIST"`
	Memory string `parquet:"name=memory,type=BYTE_ARRAY,convertedtype=UTF8"`
	TaskRoleArn string `parquet:"name=task_role_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ContainerOverride struct {
	Command []string `parquet:"name=command,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	Cpu int32 `parquet:"name=cpu,type=INT32"`
	Environment []*KeyValuePair `parquet:"name=environment,type=MAP,convertedtype=LIST"`
	EnvironmentFiles []*EnvironmentFile `parquet:"name=environment_files,type=MAP,convertedtype=LIST"`
	Memory int32 `parquet:"name=memory,type=INT32"`
	MemoryReservation int32 `parquet:"name=memory_reservation,type=INT32"`
	Name string `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8"`
	ResourceRequirements []*ResourceRequirement `parquet:"name=resource_requirements,type=MAP,convertedtype=LIST"`
}

type EnvironmentFile struct {
	Type string `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ResourceRequirement struct {
	Type string `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8"`
	Value string `parquet:"name=value,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type InferenceAcceleratorOverride struct {
	DeviceName string `parquet:"name=device_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	DeviceType string `parquet:"name=device_type,type=BYTE_ARRAY,convertedtype=UTF8"`
}



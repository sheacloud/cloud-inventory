//AUTOGENERATED CODE DO NOT EDIT
package ecs

import (
	"time"
)

type Task struct {
	Attachments []*Attachment `parquet:"name=attachments,type=MAP,convertedtype=LIST"`
	Attributes []*Attribute `parquet:"name=attributes,type=MAP,convertedtype=LIST"`
	AvailabilityZone string `parquet:"name=availability_zone,type=BYTE_ARRAY,convertedtype=UTF8"`
	CapacityProviderName string `parquet:"name=capacity_provider_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	ClusterArn string `parquet:"name=cluster_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	Connectivity string `parquet:"name=connectivity,type=BYTE_ARRAY,convertedtype=UTF8"`
	ConnectivityAt *time.Time 
	ContainerInstanceArn string `parquet:"name=container_instance_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	Containers []*Container `parquet:"name=containers,type=MAP,convertedtype=LIST"`
	Cpu string `parquet:"name=cpu,type=BYTE_ARRAY,convertedtype=UTF8"`
	CreatedAt *time.Time 
	DesiredStatus string `parquet:"name=desired_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	EnableExecuteCommand bool `parquet:"name=enable_execute_command,type=BOOLEAN"`
	EphemeralStorage *EphemeralStorage `parquet:"name=ephemeral_storage"`
	ExecutionStoppedAt *time.Time 
	Group string `parquet:"name=group,type=BYTE_ARRAY,convertedtype=UTF8"`
	HealthStatus string `parquet:"name=health_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	InferenceAccelerators []*InferenceAccelerator `parquet:"name=inference_accelerators,type=MAP,convertedtype=LIST"`
	LastStatus string `parquet:"name=last_status,type=BYTE_ARRAY,convertedtype=UTF8"`
	LaunchType string `parquet:"name=launch_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	Memory string `parquet:"name=memory,type=BYTE_ARRAY,convertedtype=UTF8"`
	Overrides *TaskOverride `parquet:"name=overrides"`
	PlatformFamily string `parquet:"name=platform_family,type=BYTE_ARRAY,convertedtype=UTF8"`
	PlatformVersion string `parquet:"name=platform_version,type=BYTE_ARRAY,convertedtype=UTF8"`
	PullStartedAt *time.Time 
	PullStoppedAt *time.Time 
	StartedAt *time.Time 
	StartedBy string `parquet:"name=started_by,type=BYTE_ARRAY,convertedtype=UTF8"`
	StopCode string `parquet:"name=stop_code,type=BYTE_ARRAY,convertedtype=UTF8"`
	StoppedAt *time.Time 
	StoppedReason string `parquet:"name=stopped_reason,type=BYTE_ARRAY,convertedtype=UTF8"`
	StoppingAt *time.Time 
	TagsOld []*Tag `parquet:"name=tags_old,type=MAP,convertedtype=LIST"`
	TaskArn string `parquet:"name=task_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	TaskDefinitionArn string `parquet:"name=task_definition_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	Version int64 `parquet:"name=version,type=INT64"`
	AccountId string `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Region string `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8"`
	ReportTime int64 `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	ConnectivityAtMilli int64 `parquet:"name=connectivity_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	CreatedAtMilli int64 `parquet:"name=created_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	ExecutionStoppedAtMilli int64 `parquet:"name=execution_stopped_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	PullStartedAtMilli int64 `parquet:"name=pull_started_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	PullStoppedAtMilli int64 `parquet:"name=pull_stopped_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	StartedAtMilli int64 `parquet:"name=started_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	StoppedAtMilli int64 `parquet:"name=stopped_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	StoppingAtMilli int64 `parquet:"name=stopping_at,type=INT64,convertedtype=TIMESTAMP_MILLIS"`
	Tags map[string]string `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
}


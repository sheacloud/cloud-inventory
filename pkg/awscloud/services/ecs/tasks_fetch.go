//AUTOGENERATED CODE DO NOT EDIT
package ecs

import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	"github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/pkg/awscloud"
	"github.com/sheacloud/cloud-inventory/pkg/meta"
)

func FetchTask(ctx context.Context, params *awscloud.AwsFetchInput) *awscloud.AwsFetchOutput {
	fetchingErrors := []error{}
	var fetchedResources int
	var failedResources int
	inventoryResults := &meta.InventoryResults{
		Cloud:      "aws",
		Service:    "ecs",
		Resource:   "tasks",
		AccountId:  params.AccountId,
		Region:     params.Region,
		ReportTime: params.ReportTime.UTC().UnixMilli(),
	}

	awsClient := params.RegionalClients[params.Region]
	client := awsClient.ECS()

	paginator := ecs.NewListClustersPaginator(client, &ecs.ListClustersInput{
		MaxResults: aws.Int32(100),
	})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)

		if err != nil {
			fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling ListClusters in %s/%s: %w", params.AccountId, params.Region, err))
			break
		}

		result, err := client.DescribeClusters(ctx, &ecs.DescribeClustersInput{
			Clusters: output.ClusterArns,
			Include:  []types.ClusterField{types.ClusterFieldAttachments, types.ClusterFieldConfigurations, types.ClusterFieldSettings, types.ClusterFieldStatistics, types.ClusterFieldTags},
		})
		if err != nil {
			fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling DescribeClusters in %s/%s: %w", params.AccountId, params.Region, err))
			break
		}

		for _, cluster := range result.Clusters {
			paginator := ecs.NewListTasksPaginator(client, &ecs.ListTasksInput{
				MaxResults: aws.Int32(10),
				Cluster:    cluster.ClusterName,
			})

			for paginator.HasMorePages() {
				output, err := paginator.NextPage(ctx)
				if err != nil {
					fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling ListTasks on %s in %s/%s: %w", *cluster.ClusterArn, params.AccountId, params.Region, err))
					break
				}

				if len(output.TaskArns) == 0 {
					continue
				}

				result, err := client.DescribeTasks(ctx, &ecs.DescribeTasksInput{
					Tasks:   output.TaskArns,
					Cluster: cluster.ClusterName,
					Include: []types.TaskField{
						types.TaskFieldTags,
					},
				})
				if err != nil {
					fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling DescribeTasks on %s in %s/%s: %w", *cluster.ClusterArn, params.AccountId, params.Region, err))
					break
				}
				for _, task := range result.Tasks {
					model := new(Task)
					copier.Copy(&model, &task)

					model.Tags = ConvertTags(task.Tags)
					model.AccountId = params.AccountId
					model.Region = params.Region
					model.ReportTime = params.ReportTime.UTC().UnixMilli()

					if err = PostProcessTask(ctx, params, model); err != nil {
						fetchingErrors = append(fetchingErrors, fmt.Errorf("error post-processing Task %s %s/%s: %w", model.TaskArn, params.AccountId, params.Region, err))
						failedResources++
					}

					err = params.OutputFile.Write(ctx, model)
					if err != nil {
						fetchingErrors = append(fetchingErrors, fmt.Errorf("error storing Task model in %s/%s: %w", params.AccountId, params.Region, err))
					}
					fetchedResources++
				}

			}
		}

	}

	inventoryResults.FetchedResources = fetchedResources
	inventoryResults.FailedResources = failedResources
	inventoryResults.HadErrors = len(fetchingErrors) > 0

	return &awscloud.AwsFetchOutput{
		FetchingErrors:   fetchingErrors,
		InventoryResults: inventoryResults,
		ResourceName:     "tasks",
		AccountId:        params.AccountId,
		Region:           params.Region,
	}
}

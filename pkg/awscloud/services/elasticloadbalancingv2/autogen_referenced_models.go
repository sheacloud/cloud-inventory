//AUTOGENERATED CODE DO NOT EDIT
package elasticloadbalancingv2



type AvailabilityZone struct {
	LoadBalancerAddresses []*LoadBalancerAddress `parquet:"name=load_balancer_addresses,type=MAP,convertedtype=LIST"`
	OutpostId string `parquet:"name=outpost_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	SubnetId string `parquet:"name=subnet_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	ZoneName string `parquet:"name=zone_name,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type LoadBalancerAddress struct {
	AllocationId string `parquet:"name=allocation_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	IPv6Address string `parquet:"name=i_pv6_address,type=BYTE_ARRAY,convertedtype=UTF8"`
	IpAddress string `parquet:"name=ip_address,type=BYTE_ARRAY,convertedtype=UTF8"`
	PrivateIPv4Address string `parquet:"name=private_i_pv4_address,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type LoadBalancerState struct {
	Code string `parquet:"name=code,type=BYTE_ARRAY,convertedtype=UTF8"`
	Reason string `parquet:"name=reason,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Listener struct {
	AlpnPolicy []string `parquet:"name=alpn_policy,type=MAP,convertedtype=LIST,valuetype=BYTE_ARRAY,valueconvertedtype=UTF8"`
	Certificates []*Certificate `parquet:"name=certificates,type=MAP,convertedtype=LIST"`
	DefaultActions []*Action `parquet:"name=default_actions,type=MAP,convertedtype=LIST"`
	ListenerArn string `parquet:"name=listener_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	LoadBalancerArn string `parquet:"name=load_balancer_arn,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true"`
	Port int32 `parquet:"name=port,type=INT32"`
	Protocol string `parquet:"name=protocol,type=BYTE_ARRAY,convertedtype=UTF8"`
	SslPolicy string `parquet:"name=ssl_policy,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Certificate struct {
	CertificateArn string `parquet:"name=certificate_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	IsDefault bool `parquet:"name=is_default,type=BOOLEAN"`
}

type Action struct {
	Type string `parquet:"name=type,type=BYTE_ARRAY,convertedtype=UTF8"`
	AuthenticateCognitoConfig *AuthenticateCognitoActionConfig `parquet:"name=authenticate_cognito_config"`
	AuthenticateOidcConfig *AuthenticateOidcActionConfig `parquet:"name=authenticate_oidc_config"`
	FixedResponseConfig *FixedResponseActionConfig `parquet:"name=fixed_response_config"`
	ForwardConfig *ForwardActionConfig `parquet:"name=forward_config"`
	Order int32 `parquet:"name=order,type=INT32"`
	RedirectConfig *RedirectActionConfig `parquet:"name=redirect_config"`
	TargetGroupArn string `parquet:"name=target_group_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type AuthenticateCognitoActionConfig struct {
	UserPoolArn string `parquet:"name=user_pool_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	UserPoolClientId string `parquet:"name=user_pool_client_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	UserPoolDomain string `parquet:"name=user_pool_domain,type=BYTE_ARRAY,convertedtype=UTF8"`
	AuthenticationRequestExtraParams map[string]string `parquet:"name=authentication_request_extra_params,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	OnUnauthenticatedRequest string `parquet:"name=on_unauthenticated_request,type=BYTE_ARRAY,convertedtype=UTF8"`
	Scope string `parquet:"name=scope,type=BYTE_ARRAY,convertedtype=UTF8"`
	SessionCookieName string `parquet:"name=session_cookie_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	SessionTimeout int64 `parquet:"name=session_timeout,type=INT64"`
}

type AuthenticateOidcActionConfig struct {
	AuthorizationEndpoint string `parquet:"name=authorization_endpoint,type=BYTE_ARRAY,convertedtype=UTF8"`
	ClientId string `parquet:"name=client_id,type=BYTE_ARRAY,convertedtype=UTF8"`
	Issuer string `parquet:"name=issuer,type=BYTE_ARRAY,convertedtype=UTF8"`
	TokenEndpoint string `parquet:"name=token_endpoint,type=BYTE_ARRAY,convertedtype=UTF8"`
	UserInfoEndpoint string `parquet:"name=user_info_endpoint,type=BYTE_ARRAY,convertedtype=UTF8"`
	AuthenticationRequestExtraParams map[string]string `parquet:"name=authentication_request_extra_params,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8"`
	ClientSecret string `parquet:"name=client_secret,type=BYTE_ARRAY,convertedtype=UTF8"`
	OnUnauthenticatedRequest string `parquet:"name=on_unauthenticated_request,type=BYTE_ARRAY,convertedtype=UTF8"`
	Scope string `parquet:"name=scope,type=BYTE_ARRAY,convertedtype=UTF8"`
	SessionCookieName string `parquet:"name=session_cookie_name,type=BYTE_ARRAY,convertedtype=UTF8"`
	SessionTimeout int64 `parquet:"name=session_timeout,type=INT64"`
	UseExistingClientSecret bool `parquet:"name=use_existing_client_secret,type=BOOLEAN"`
}

type FixedResponseActionConfig struct {
	StatusCode string `parquet:"name=status_code,type=BYTE_ARRAY,convertedtype=UTF8"`
	ContentType string `parquet:"name=content_type,type=BYTE_ARRAY,convertedtype=UTF8"`
	MessageBody string `parquet:"name=message_body,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type ForwardActionConfig struct {
	TargetGroupStickinessConfig *TargetGroupStickinessConfig `parquet:"name=target_group_stickiness_config"`
	TargetGroups []*TargetGroupTuple `parquet:"name=target_groups,type=MAP,convertedtype=LIST"`
}

type TargetGroupStickinessConfig struct {
	DurationSeconds int32 `parquet:"name=duration_seconds,type=INT32"`
	Enabled bool `parquet:"name=enabled,type=BOOLEAN"`
}

type TargetGroupTuple struct {
	TargetGroupArn string `parquet:"name=target_group_arn,type=BYTE_ARRAY,convertedtype=UTF8"`
	Weight int32 `parquet:"name=weight,type=INT32"`
}

type RedirectActionConfig struct {
	StatusCode string `parquet:"name=status_code,type=BYTE_ARRAY,convertedtype=UTF8"`
	Host string `parquet:"name=host,type=BYTE_ARRAY,convertedtype=UTF8"`
	Path string `parquet:"name=path,type=BYTE_ARRAY,convertedtype=UTF8"`
	Port string `parquet:"name=port,type=BYTE_ARRAY,convertedtype=UTF8"`
	Protocol string `parquet:"name=protocol,type=BYTE_ARRAY,convertedtype=UTF8"`
	Query string `parquet:"name=query,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type Matcher struct {
	GrpcCode string `parquet:"name=grpc_code,type=BYTE_ARRAY,convertedtype=UTF8"`
	HttpCode string `parquet:"name=http_code,type=BYTE_ARRAY,convertedtype=UTF8"`
}

type TargetHealthDescription struct {
	HealthCheckPort string `parquet:"name=health_check_port,type=BYTE_ARRAY,convertedtype=UTF8"`
	Target *TargetDescription `parquet:"name=target"`
	TargetHealth *TargetHealth `parquet:"name=target_health"`
}

type TargetDescription struct {
	Id string `parquet:"name=id,type=BYTE_ARRAY,convertedtype=UTF8"`
	AvailabilityZone string `parquet:"name=availability_zone,type=BYTE_ARRAY,convertedtype=UTF8"`
	Port int32 `parquet:"name=port,type=INT32"`
}

type TargetHealth struct {
	Description string `parquet:"name=description,type=BYTE_ARRAY,convertedtype=UTF8"`
	Reason string `parquet:"name=reason,type=BYTE_ARRAY,convertedtype=UTF8"`
	State string `parquet:"name=state,type=BYTE_ARRAY,convertedtype=UTF8"`
}



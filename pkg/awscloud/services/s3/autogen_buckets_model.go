//AUTOGENERATED CODE DO NOT EDIT
package s3

import (
	"time"
)

type Bucket struct {
	CreationDate                      *time.Time                         `json:"-"`
	Name                              string                             `parquet:"name=name,type=BYTE_ARRAY,convertedtype=UTF8" inventory_primary_key:"true" json:"name" diff:"name,identifier"`
	AccountId                         string                             `parquet:"name=account_id,type=BYTE_ARRAY,convertedtype=UTF8" json:"account_id" diff:"account_id"`
	Region                            string                             `parquet:"name=region,type=BYTE_ARRAY,convertedtype=UTF8" json:"region" diff:"region"`
	ReportTime                        int64                              `parquet:"name=report_time,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"report_time" diff:"report_time,immutable"`
	Policy                            string                             `parquet:"name=policy,type=BYTE_ARRAY,convertedtype=UTF8" json:"policy" diff:"policy"`
	IsPublic                          bool                               `parquet:"name=is_public,type=BOOLEAN" json:"is_public" diff:"is_public"`
	Tags                              map[string]string                  `parquet:"name=tags,type=MAP,keytype=BYTE_ARRAY,valuetype=BYTE_ARRAY,keyconvertedtype=UTF8,valueconvertedtype=UTF8" json:"tags" diff:"tags"`
	VersioningStatus                  string                             `parquet:"name=versioning_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"versioning_status" diff:"versioning_status"`
	MFADeleteStatus                   string                             `parquet:"name=mfa_delete_status,type=BYTE_ARRAY,convertedtype=UTF8" json:"mfa_delete_status" diff:"mfa_delete_status"`
	ReplicationConfiguration          *ReplicationConfiguration          `parquet:"name=replication_configuration" json:"replication_configuration" diff:"replication_configuration"`
	AclGrants                         []*Grant                           `parquet:"name=acl_grants,type=MAP,convertedtype=LIST" json:"acl_grants" diff:"acl_grants"`
	CorsRules                         []*CORSRule                        `parquet:"name=cors_rules,type=MAP,convertedtype=LIST" json:"cors_rules" diff:"cors_rules"`
	ServerSideEncryptionConfiguration *ServerSideEncryptionConfiguration `parquet:"name=server_side_encryption_configuration" json:"server_side_encryption_configuration" diff:"server_side_encryption_configuration"`
	IntelligentTieringConfigurations  []*IntelligentTieringConfiguration `parquet:"name=intelligent_tiering_configurations,type=MAP,convertedtype=LIST" json:"intelligent_tiering_configurations" diff:"intelligent_tiering_configurations"`
	InventoryConfigurations           []*InventoryConfiguration          `parquet:"name=inventory_configurations,type=MAP,convertedtype=LIST" json:"inventory_configurations" diff:"inventory_configurations"`
	LifecycleRules                    []*LifecycleRule                   `parquet:"name=lifecycle_rules,type=MAP,convertedtype=LIST" json:"lifecycle_rules" diff:"lifecycle_rules"`
	Logging                           *LoggingEnabled                    `parquet:"name=logging" json:"logging" diff:"logging"`
	CreationDateMilli                 int64                              `parquet:"name=creation_date,type=INT64,convertedtype=TIMESTAMP_MILLIS" json:"creation_date" diff:"creation_date"`
}

func (x *Bucket) GetReportTime() int64 {
	return x.ReportTime
}

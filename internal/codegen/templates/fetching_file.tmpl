//AUTOGENERATED CODE DO NOT EDIT
package {{.ServiceName}}

import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/service/{{.ServiceName}}"
	"github.com/jinzhu/copier"
	"github.com/sheacloud/cloud-inventory/pkg/awscloud"
	"github.com/sheacloud/cloud-inventory/pkg/meta"
)

func Fetch{{.ResourceConfig.ObjectName}}(ctx context.Context, params *awscloud.AwsFetchInput) *awscloud.AwsFetchOutput {
	fetchingErrors := []error{}
	var fetchedResources int
	var failedResources int
	inventoryResults := &meta.InventoryResults{
		Cloud: "aws",
		Service: "{{.ServiceName}}",
		Resource: "{{.ResourceConfig.Name}}",
		AccountId: params.AccountId,
		Region: params.Region,
		ReportTime: params.ReportTime.UTC().UnixMilli(),
	}

	awsClient := params.RegionalClients[params.Region]
	client := awsClient.{{.SdkClientName}}()

	{{if .ResourceConfig.Pagination}}
	paginator := {{.ServiceName}}.New{{.ResourceConfig.FetchFunction}}Paginator(client, &{{.ServiceName}}.{{.ResourceConfig.FetchFunction}}Input{})

	for paginator.HasMorePages() {
		output, err := paginator.NextPage(ctx)
	{{else}}

	result, err := client.{{.ResourceConfig.FetchFunction}}(ctx, &{{.ServiceName}}.{{.ResourceConfig.FetchFunction}}Input{})
	if err != nil {
		fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling {{.ResourceConfig.FetchFunction}} in %s/%s: %w", params.AccountId, params.Region, err))
		inventoryResults.FetchedResources = 0
		inventoryResults.FailedResources = 0
		inventoryResults.HadErrors = true
		return &awscloud.AwsFetchOutput{
			FetchingErrors:   fetchingErrors,
			InventoryResults: inventoryResults,
			ResourceName:     "{{.ResourceConfig.Name}}",
			AccountId:        params.AccountId,
			Region:           params.Region,
		}
	}

	results := []*{{.ServiceName}}.{{.ResourceConfig.FetchFunction}}Output{result}
	for _, output := range results {
	{{end}}
		if err != nil {
			fetchingErrors = append(fetchingErrors, fmt.Errorf("error calling {{.ResourceConfig.FetchFunction}} in %s/%s: %w", params.AccountId, params.Region, err))
			break
		}

		for _, object := range output.{{.ResourceConfig.ObjectResponseField}} {

			model := new({{.ResourceConfig.ObjectName}})
			copier.Copy(&model, &object)

			{{if .ShouldConvertTags}}model.Tags = ConvertTags(object.{{.TagListFieldName}}){{end}}
			model.AccountId = params.AccountId
			model.Region = params.Region
			model.ReportTime = params.ReportTime.UTC().UnixMilli()

			{{if .ResourceConfig.UsePostProcessing}}
			if err = PostProcess{{.ResourceConfig.ObjectName}}(ctx, params, model); err != nil {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("error post-processing {{.ResourceConfig.ObjectName}} %s %s/%s: %w", model.{{.ResourceConfig.ObjectUniqueId}}, params.AccountId, params.Region, err))
				failedResources++
			}
			{{end}}

			err = params.OutputFile.Write(ctx, model)
			if err != nil {
				fetchingErrors = append(fetchingErrors, fmt.Errorf("error storing {{.ResourceConfig.ObjectName}} model in %s/%s: %w", params.AccountId, params.Region, err))
			}
			fetchedResources++
		}

	}

	inventoryResults.FetchedResources = fetchedResources
	inventoryResults.FailedResources = failedResources
	inventoryResults.HadErrors = len(fetchingErrors) > 0

	return &awscloud.AwsFetchOutput{
		FetchingErrors:   fetchingErrors,
		InventoryResults: inventoryResults,
		ResourceName:     "{{.ResourceConfig.Name}}",
		AccountId:        params.AccountId,
		Region:           params.Region,
	}
}

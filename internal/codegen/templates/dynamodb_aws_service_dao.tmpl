//AUTOGENERATED CODE DO NOT EDIT
package dynamodb

import (
    "context"
    "time"
    dynamo "github.com/aws/aws-sdk-go-v2/service/dynamodb"
    "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
    "github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
    "github.com/sheacloud/cloud-inventory/internal/db"
    "github.com/sheacloud/cloud-inventory/pkg/aws/{{.Name}}"
)

type DynamoDB{{.ServiceCapName}}DAO struct {
    client *dynamo.Client
    maxRetries int
}

{{range $index, $resourceElement := .Resources}}func (dao *DynamoDB{{$.ServiceCapName}}DAO) List{{$resourceElement.ObjectPluralName}}(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*{{$.Name}}.{{$resourceElement.ObjectSingularName}}, error) {
    tableName := "cloud-inventory-aws-{{$.Name}}-{{toSnakeHyphen $resourceElement.Name}}"
    items, _, err := ListItems(ctx, dao.client, tableName, reportTime, "{{toSnakeCase $resourceElement.ObjectUniqueId}}", nil)
    if err != nil {
        return nil, err
    }
    var resources []*{{$.Name}}.{{$resourceElement.ObjectSingularName}}
    err = attributevalue.UnmarshalListOfMaps(items, &resources)
    if err != nil {
        return nil, err
    }
    return resources, nil
}

func (dao *DynamoDB{{$.ServiceCapName}}DAO) Get{{$resourceElement.ObjectSingularName}}(ctx context.Context, reportTime time.Time, id string) (*{{$.Name}}.{{$resourceElement.ObjectSingularName}}, error) {
    tableName := "cloud-inventory-aws-{{$.Name}}-{{toSnakeHyphen $resourceElement.Name}}"
    item, err := GetItem(ctx, dao.client, tableName, reportTime, id, "{{toSnakeCase $resourceElement.ObjectUniqueId}}")
    if err != nil {
        return nil, err
    }
    var resource *{{$.Name}}.{{$resourceElement.ObjectSingularName}}
    err = attributevalue.UnmarshalMap(item, &resource)
    if err != nil {
        return nil, err
    }
    return resource, nil
}

func (dao *DynamoDB{{$.ServiceCapName}}DAO) Put{{$resourceElement.ObjectPluralName}}(ctx context.Context, resources []*{{$.Name}}.{{$resourceElement.ObjectSingularName}}) error {
    items := make([]map[string]types.AttributeValue, len(resources))
    for i, resource := range resources {
        item, err := attributevalue.MarshalMap(resource)
        if err != nil {
            return err
        }
        items[i] = item
    }
    return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-{{$.Name}}-{{toSnakeHyphen $resourceElement.Name}}", items)
}

func (dao *DynamoDB{{$.ServiceCapName}}DAO) Get{{$resourceElement.ObjectSingularName}}ReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
    return DistinctReportTimes(ctx, dao.client, reportDate, "aws", "{{$.Name}}", "{{$resourceElement.Name}}")
}

func (dao *DynamoDB{{$.ServiceCapName}}DAO) GetReferenced{{$resourceElement.ObjectSingularName}}ReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
    return GetReportTime(ctx, dao.client, reportDate, timeSelection, timeReference, "aws", "{{$.Name}}", "{{$resourceElement.Name}}")
}

{{end}}
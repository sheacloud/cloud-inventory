//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/multi_dao.tmpl
package multi

import (
    "context"
    "fmt"
    "sync"
    "github.com/sheacloud/cloud-inventory/internal/db"
    "github.com/sheacloud/cloud-inventory/pkg/meta"
    {{range $index, $element := .Services}}	"github.com/sheacloud/cloud-inventory/pkg/aws/{{$element.Name}}"
{{end}}
)

type MultiWriterDAO struct {
    daos []db.WriterDAO
}

func NewMultiWriterDAO(daos []db.WriterDAO) *MultiWriterDAO {
    return &MultiWriterDAO{
        daos: daos,
    }
}

func (dao *MultiWriterDAO) WriteInventoryResults(ctx context.Context, metadata *meta.InventoryResults) error {
    var wg sync.WaitGroup

    errors := []error{}
    errorLock := sync.Mutex{}
    for _, memberDao := range dao.daos {
        wg.Add(1)
        go func(memberDao db.WriterDAO) {
            defer wg.Done()
            err := memberDao.WriteInventoryResults(ctx, metadata)
            if err != nil {
                errorLock.Lock()
                errors = append(errors, err)
                errorLock.Unlock()
            }
        }(memberDao)
    }

    wg.Wait()
    if len(errors) > 0 {
        return fmt.Errorf("%v", errors)
    }
    return nil
}

func (dao *MultiWriterDAO) WriteIngestionTimestamp(ctx context.Context, metadata *meta.IngestionTimestamp) error {
    var wg sync.WaitGroup

    errors := []error{}
    errorLock := sync.Mutex{}
    for _, memberDao := range dao.daos {
        wg.Add(1)
        go func(memberDao db.WriterDAO) {
            defer wg.Done()
            err := memberDao.WriteIngestionTimestamp(ctx, metadata)
            if err != nil {
                errorLock.Lock()
                errors = append(errors, err)
                errorLock.Unlock()
            }
        }(memberDao)
    }

    wg.Wait()
    if len(errors) > 0 {
        return fmt.Errorf("%v", errors)
    }
    return nil
}

func (dao *MultiWriterDAO) FinishIndex(ctx context.Context, indices []string, reportDateUnixMilli int64) error {
    var wg sync.WaitGroup

    errors := []error{}
    errorLock := sync.Mutex{}
    for _, memberDao := range dao.daos {
        wg.Add(1)
        go func(memberDao db.WriterDAO) {
            defer wg.Done()
            err := memberDao.FinishIndex(ctx, indices, reportDateUnixMilli)
            if err != nil {
                errorLock.Lock()
                errors = append(errors, err)
                errorLock.Unlock()
            }
        }(memberDao)
    }

    wg.Wait()
    if len(errors) > 0 {
        return fmt.Errorf("%v", errors)
    }
    return nil
}

func (dao *MultiWriterDAO) Finish(ctx context.Context) error {
    var wg sync.WaitGroup

    errors := []error{}
    errorLock := sync.Mutex{}
    for _, memberDao := range dao.daos {
        wg.Add(1)
        go func(memberDao db.WriterDAO) {
            defer wg.Done()
            err := memberDao.Finish(ctx)
            if err != nil {
                errorLock.Lock()
                errors = append(errors, err)
                errorLock.Unlock()
            }
        }(memberDao)
    }

    wg.Wait()
    if len(errors) > 0 {
        return fmt.Errorf("%v", errors)
    }
    return nil
}

{{range $serviceIndex, $serviceElement := .Services}}{{range $resourceIndex, $resourceElement := $serviceElement.Resources}}func (dao *MultiWriterDAO) PutAws{{$serviceElement.ServiceCapName}}{{$resourceElement.ObjectPluralName}}(ctx context.Context, resources []*{{$serviceElement.Name}}.{{$resourceElement.ObjectSingularName}}) error {
    var wg sync.WaitGroup

    errors := []error{}
    errorLock := sync.Mutex{}
    for _, memberDao := range dao.daos {
        wg.Add(1)
        go func(memberDao db.WriterDAO) {
            defer wg.Done()
            err := memberDao.PutAws{{$serviceElement.ServiceCapName}}{{$resourceElement.ObjectPluralName}}(ctx, resources)
            if err != nil {
                errorLock.Lock()
                errors = append(errors, err)
                errorLock.Unlock()
            }
        }(memberDao)
    }

    wg.Wait()
    if len(errors) > 0 {
        return fmt.Errorf("%v", errors)
    }
    return nil
}
{{end}}{{end}}
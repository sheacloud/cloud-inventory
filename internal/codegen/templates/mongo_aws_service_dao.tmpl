//AUTOGENERATED CODE DO NOT EDIT
package mongo

import (
    "context"
    "time"
    "go.mongodb.org/mongo-driver/mongo"
    "go.mongodb.org/mongo-driver/bson"
    "github.com/sheacloud/cloud-inventory/internal/db"
    "github.com/sheacloud/cloud-inventory/pkg/aws/{{.Name}}"
)

type Mongo{{.ServiceCapName}}DAO struct {
    db *mongo.Database
}

{{range $index, $resourceElement := .Resources}}func (dao *Mongo{{$.ServiceCapName}}DAO) List{{$resourceElement.ObjectPluralName}}(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*{{$.Name}}.{{$resourceElement.ObjectSingularName}}, error) {
    filter := bson.D{
        bson.E{"report_time", reportTime},
    }
	if accountID != nil {
		filter = append(filter, bson.E{Key: "account_id", Value: *accountID})
	}
	if region != nil {
		filter = append(filter, bson.E{Key: "region", Value: *region})
	}

	var results []*{{$.Name}}.{{$resourceElement.ObjectSingularName}}
	cursor, err := dao.db.Collection("aws_{{$.Name}}_{{toSnakeCase $resourceElement.ObjectPluralName}}").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}

    return results, nil
}

func (dao *Mongo{{$.ServiceCapName}}DAO) Get{{$resourceElement.ObjectSingularName}}(ctx context.Context, reportTime time.Time, id string) (*{{$.Name}}.{{$resourceElement.ObjectSingularName}}, error) {
    filter := bson.D{
        bson.E{"report_time", reportTime},
        bson.E{"{{toSnakeCase $resourceElement.ObjectUniqueId}}", id},
    }

	var result *{{$.Name}}.{{$resourceElement.ObjectSingularName}}
	err := dao.db.Collection("aws_{{$.Name}}_{{toSnakeCase $resourceElement.ObjectPluralName}}").FindOne(ctx, filter).Decode(&result)

    return result, err
}

func (dao *Mongo{{$.ServiceCapName}}DAO) Put{{$resourceElement.ObjectPluralName}}(ctx context.Context, resources []*{{$.Name}}.{{$resourceElement.ObjectSingularName}}) error {
    if len(resources) == 0 {
        return nil
    }
    writes := make([]interface{}, len(resources))
    for i, resource := range resources {
        writes[i] = resource
    }
    _, err := dao.db.Collection("aws.{{$.Name}}.{{$resourceElement.Name}}").InsertMany(ctx, writes)

    return err
}

func (dao *Mongo{{$.ServiceCapName}}DAO) Get{{$resourceElement.ObjectSingularName}}ReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
    return DistinctReportTimes(ctx, dao.db.Collection("aws_{{$.Name}}_{{toSnakeCase $resourceElement.ObjectPluralName}}"), reportDate)
}

func (dao *Mongo{{$.ServiceCapName}}DAO) GetReferenced{{$resourceElement.ObjectSingularName}}ReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
    return GetReportTime(ctx, dao.db.Collection("aws_{{$.Name}}_{{toSnakeCase $resourceElement.ObjectPluralName}}"), reportDate, timeSelection, timeReference)
}

{{end}}
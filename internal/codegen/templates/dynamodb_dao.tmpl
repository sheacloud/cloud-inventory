//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/dynamodb_dao.tmpl
package dynamodb

import (
    "context"
    "github.com/google/uuid"
    awsDynamoDB "github.com/aws/aws-sdk-go-v2/service/dynamodb"
    "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
    "github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
    "github.com/sheacloud/cloud-inventory/pkg/meta"
    "github.com/sheacloud/cloud-inventory/internal/db"
{{range $index, $element := .Services}}	"github.com/sheacloud/cloud-inventory/pkg/aws/{{$element.Name}}"
{{end}}
)

type DynamoDBWriterDAO struct {
    client *awsDynamoDB.Client
    maxRetries int
}

type DynamoDBReaderDAO struct {
    client *awsDynamoDB.Client
    maxRetries int
}

func NewDynamoDBWriterDAO(client *awsDynamoDB.Client, maxRetries int) *DynamoDBWriterDAO {
    return &DynamoDBWriterDAO{
        client: client,
        maxRetries: maxRetries,
    }
}

func NewDynamoDBReaderDAO(client *awsDynamoDB.Client, maxRetries int) *DynamoDBReaderDAO {
    return &DynamoDBReaderDAO{
        client: client,
        maxRetries: maxRetries,
    }
}

func (dao *DynamoDBWriterDAO) WriteInventoryResults(ctx context.Context, metadata *meta.InventoryResults) error {
    if metadata.InventoryUUID == "" {
        metadata.InventoryUUID = uuid.New().String()
    }
    return WriteItem(ctx, dao.client, dao.maxRetries, "cloud-inventory-inventory-results", metadata)
}

func (dao *DynamoDBWriterDAO) WriteIngestionTimestamp(ctx context.Context, metadata *meta.IngestionTimestamp) error {
    return WriteItem(ctx, dao.client, dao.maxRetries, "cloud-inventory-ingestion-timestamps", metadata)
}

func (dao *DynamoDBWriterDAO) FinishIndex(ctx context.Context, indices []string, reportDateUnixMilli int64) error {
    return nil
}

func (dao *DynamoDBWriterDAO) Finish(ctx context.Context) error {
    return nil
}

{{range $serviceIndex, $serviceElement := .Services}}{{range $resourceIndex, $resourceElement := $serviceElement.Resources}}func (dao *DynamoDBWriterDAO) PutAws{{$serviceElement.ServiceCapName}}{{$resourceElement.ObjectPluralName}}(ctx context.Context, resources []*{{$serviceElement.Name}}.{{$resourceElement.ObjectSingularName}}) error {
    items := make([]map[string]types.AttributeValue, len(resources))
    for i, resource := range resources {
        item, err := attributevalue.MarshalMap(resource)
        if err != nil {
            return err
        }
        items[i] = item
    }
    return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-{{$serviceElement.Name}}-{{toSnakeHyphen $resourceElement.Name}}", items)
}
{{end}}{{end}}


{{range $serviceIndex, $serviceElement := .Services}}{{range $resourceIndex, $resourceElement := $serviceElement.Resources}}
func (dao *DynamoDBReaderDAO) ListAws{{$serviceElement.ServiceCapName}}{{$resourceElement.ObjectPluralName}}(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*{{$serviceElement.Name}}.{{$resourceElement.ObjectSingularName}}, error) {
    tableName := "cloud-inventory-aws-{{$serviceElement.Name}}-{{toSnakeHyphen $resourceElement.Name}}"
    items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "{{toSnakeCase $resourceElement.ObjectUniqueId}}", nil)
    if err != nil {
        return nil, err
    }
    var resources []*{{$serviceElement.Name}}.{{$resourceElement.ObjectSingularName}}
    err = attributevalue.UnmarshalListOfMaps(items, &resources)
    if err != nil {
        return nil, err
    }
    return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAws{{$serviceElement.ServiceCapName}}{{$resourceElement.ObjectSingularName}}(ctx context.Context, reportTimeUnixMilli int64, id string) (*{{$serviceElement.Name}}.{{$resourceElement.ObjectSingularName}}, error) {
    tableName := "cloud-inventory-aws-{{$serviceElement.Name}}-{{toSnakeHyphen $resourceElement.Name}}"
    item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "{{toSnakeCase $resourceElement.ObjectUniqueId}}")
    if err != nil {
        return nil, err
    }
    var resource *{{$serviceElement.Name}}.{{$resourceElement.ObjectSingularName}}
    err = attributevalue.UnmarshalMap(item, &resource)
    if err != nil {
        return nil, err
    }
    return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAws{{$serviceElement.ServiceCapName}}{{$resourceElement.ObjectSingularName}}ReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
    return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "{{$serviceElement.Name}}", "{{$resourceElement.Name}}")
}

func (dao *DynamoDBReaderDAO) GetReferencedAws{{$serviceElement.ServiceCapName}}{{$resourceElement.ObjectSingularName}}ReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
    return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "{{$serviceElement.Name}}", "{{$resourceElement.Name}}")
}
{{end}}{{end}}
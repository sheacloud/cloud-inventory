//AUTOGENERATED CODE DO NOT EDIT
package s3ion

import (
    "context"
    "fmt"
    awsS3 "github.com/aws/aws-sdk-go-v2/service/s3"
    "github.com/sheacloud/cloud-inventory/pkg/meta"
{{range $index, $element := .Services}}	"github.com/sheacloud/cloud-inventory/pkg/aws/{{$element.Name}}"
{{end}}
)

type S3IonWriterDAO struct {
    ionClient *S3IonClient
    maxRetries int
}

func NewS3IonWriterDAO(s3Client *awsS3.Client, bucket string, maxRetries int) *S3IonWriterDAO {
    return &S3IonWriterDAO{
        ionClient: NewS3IonClient(s3Client, bucket),
        maxRetries: maxRetries,
    }
}

func (dao *S3IonWriterDAO) WriteInventoryResults(ctx context.Context, metadata *meta.InventoryResults) error {
    return nil
}

func (dao *S3IonWriterDAO) WriteIngestionTimestamp(ctx context.Context, metadata *meta.IngestionTimestamp) error {
    return nil
}

func (dao *S3IonWriterDAO) Close(ctx context.Context) error {
    return dao.ionClient.CloseAll(ctx)
}

{{range $serviceIndex, $serviceElement := .Services}}{{range $resourceIndex, $resourceElement := $serviceElement.Resources}}func (dao *S3IonWriterDAO) PutAws{{$serviceElement.ServiceCapName}}{{$resourceElement.ObjectPluralName}}(ctx context.Context, resources []*{{$serviceElement.Name}}.{{$resourceElement.ObjectSingularName}}) error {
    if len(resources) == 0 {
        return nil
    }
    file := dao.ionClient.GetResourceFile("aws", "{{$serviceElement.Name}}", "{{$resourceElement.Name}}", resources[0].ReportTime)
    file.Lock.Lock()
    defer file.Lock.Unlock()

    for _, resource := range resources {
        if err := file.Encoder.Encode(resource); err != nil {
            return fmt.Errorf("failed to encode resource: %w", err)
        }
    }

    return nil
}
{{end}}{{end}}
//AUTOGENERATED CODE DO NOT EDIT
package union

import (
    "context"
    "time"
    "fmt"
    "sync"
    "github.com/sheacloud/cloud-inventory/internal/db"
    "github.com/sheacloud/cloud-inventory/pkg/aws/{{.Name}}"
)

type Union{{.ServiceCapName}}DAO struct {
    daos []db.DAO
}

{{range $index, $resourceElement := .Resources}}func (dao *Union{{$.ServiceCapName}}DAO) List{{$resourceElement.ObjectPluralName}}(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*{{$.Name}}.{{$resourceElement.ObjectSingularName}}, error) {
    return nil, nil
}

func (dao *Union{{$.ServiceCapName}}DAO) Get{{$resourceElement.ObjectSingularName}}(ctx context.Context, reportTime time.Time, id string) (*{{$.Name}}.{{$resourceElement.ObjectSingularName}}, error) {
    return nil, nil
}

func (dao *Union{{$.ServiceCapName}}DAO) Put{{$resourceElement.ObjectPluralName}}(ctx context.Context, resources []*{{$.Name}}.{{$resourceElement.ObjectSingularName}}) error {
    var wg sync.WaitGroup

    errors := []error{}
    errorLock := sync.Mutex{}
    for _, memberDao := range dao.daos {
        wg.Add(1)
        go func(memberDao db.DAO) {
            defer wg.Done()
            err := memberDao.AWS().{{$.ServiceCapName}}().Put{{$resourceElement.ObjectPluralName}}(ctx, resources)
            if err != nil {
                errorLock.Lock()
                errors = append(errors, err)
                errorLock.Unlock()
            }
        }(memberDao)
    }

    wg.Wait()
    if len(errors) > 0 {
        return fmt.Errorf("%v", errors)
    }
    return nil
}

func (dao *Union{{$.ServiceCapName}}DAO) Get{{$resourceElement.ObjectSingularName}}ReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
    return nil, nil
}

func (dao *Union{{$.ServiceCapName}}DAO) GetReferenced{{$resourceElement.ObjectSingularName}}ReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
    return nil, nil
}

{{end}}
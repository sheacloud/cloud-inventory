//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_api_routes.tmpl
package {{.ServiceName}}

import (
	"time"
	"net/url"
	"github.com/gin-gonic/gin"
	"github.com/sheacloud/cloud-inventory/internal/db"
	"github.com/sheacloud/cloud-inventory/internal/api/routes"
	"github.com/sheacloud/cloud-inventory/pkg/aws/{{.ServiceName}}"
	"github.com/r3labs/diff/v2"
)

type List{{.ResourceConfig.ObjectPluralName}}Response struct {
	{{.ResourceConfig.ObjectPluralName}} []*{{.ServiceName}}.{{.ResourceConfig.ObjectSingularName}} `json:"{{toSnakeCase .ResourceConfig.ObjectPluralName}}"`
	PaginationToken *string `json:"pagination_token,omitempty"`
}

// Get{{.ResourceConfig.ObjectPluralName}}Metadata godoc
// @Summary      Get {{.ResourceConfig.ObjectPluralName}} Metadata
// @Description  get a list of {{.ResourceConfig.Name}} metadata
// @Tags         aws {{.ServiceName}}
// @Produce      json
// @Param        report_date query string false  "Which date to pull data from. Current date by default" Format(date)
// @Security     ApiKeyAuth
// @Success      200  {array}   routes.AwsResourceMetadata
// @Failure      400
// @Router       /metadata/aws/{{.ServiceName}}/{{.ResourceConfig.Name}} [get]
func Get{{.ResourceConfig.ObjectPluralName}}Metadata(c *gin.Context, dao db.ReaderDAO) {
	reportDateString := c.Query("report_date")
	var reportDate time.Time
	if reportDateString == "" {
		reportDate = time.Now().UTC()
	} else {
		reportDate, _ = time.Parse("2006-01-02", reportDateString)
	}

	reportTimes, err := dao.GetAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectSingularName}}ReportTimes(c, reportDate.UnixMilli())
	if err != nil {
		c.AbortWithError(400, err)
		return
	}

	c.IndentedJSON(200, routes.AwsResourceMetadata{
		DateTimes: reportTimes,
		IdField:  "{{.ResourceConfig.ObjectUniqueIdSnakeCase}}",
		DisplayFields: []string{
			{{if gt (len .ResourceConfig.DisplayFields) 0}}{{range .ResourceConfig.DisplayFields}}"{{toSnakeCase .}}",
			{{end}}{{else}}"{{.ResourceConfig.ObjectUniqueIdSnakeCase}}",
		{{end}}},
	})
}

// List{{.ResourceConfig.ObjectPluralName}} godoc
// @Summary      List {{.ResourceConfig.ObjectPluralName}}
// @Description  get a list of {{.ResourceConfig.Name}}
// @Tags         aws {{.ServiceName}}
// @Produce      json
// @Param        report_date query string false  "Which date to pull data from. Current date by default" Format(date)
// @Param		 account_id query string false  "A specific account to pull data from. All accounts by default"
// @Param		 region query string false  "A specific region to pull data from. All regions by default"
// @Param		 time_selection query string false  "How to select the time range to pull data from. 'latest' by default" Enums(latest, before, after, at)
// @Param		 time_selection_reference query string false  "The reference time to use when selecting the time range to pull data from. Only used when time_selection is 'before', 'after', or 'at'." Format(dateTime)
// @Param        pagination_token query string false "A pagination token. If this is specified, the next set of results is retrieved. The pagination token is returned in the response."
// @Param        max_results query int false "The maximum number of results to return. Default is 100"
// @Security     ApiKeyAuth
// @Success      200  {object}   List{{.ResourceConfig.ObjectPluralName}}Response
// @Failure      400
// @Router       /inventory/aws/{{.ServiceName}}/{{.ResourceConfig.Name}} [get]
func List{{.ResourceConfig.ObjectPluralName}}(c *gin.Context, dao db.ReaderDAO) {
	var params routes.AwsQueryParameters
	if err := c.BindQuery(&params); err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}
	err := params.Process()
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	selectedTime, err := dao.GetReferencedAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectSingularName}}ReportTime(c, params.ReportDateUnixMilli, *params.TimeSelection, params.TimeSelectionReference)
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	results, err := dao.ListAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectPluralName}}(c, *selectedTime, params.AccountId, params.Region, nil, nil)
	if err != nil {
		c.AbortWithStatusJSON(500, gin.H{"error": err.Error()})
		return
	}

	c.IndentedJSON(200, List{{.ResourceConfig.ObjectPluralName}}Response{
		{{.ResourceConfig.ObjectPluralName}}: results,
	})
}


// Get{{.ResourceConfig.ObjectSingularName}} godoc
// @Summary      Get a specific {{.ResourceConfig.ObjectSingularName}}
// @Description  Get a specific {{.ResourceConfig.ObjectSingularName}} by its {{.ResourceConfig.ObjectUniqueId}}
// @Tags         aws {{.ServiceName}}
// @Produce      json
// @Param        report_date query string false  "Which date to pull data from. Current date by default" Format(date)
// @Param        {{.ResourceConfig.ObjectUniqueIdSnakeCase}} path string true "The {{.ResourceConfig.ObjectUniqueIdSnakeCase}} of the {{.ResourceConfig.ObjectSingularName}} to retrieve"
// @Param		 account_id query string false  "A specific account to pull data from. All accounts by default"
// @Param		 region query string false  "A specific region to pull data from. All regions by default"
// @Param		 time_selection query string false  "How to select the time range to pull data from. 'latest' by default" Enums(latest, before, after, at)
// @Param		 time_selection_reference query string false  "The reference time to use when selecting the time range to pull data from. Only used when time_selection is 'before', 'after', or 'at'." Format(dateTime)
// @Security     ApiKeyAuth
// @Success      200  {object}   {{.ServiceName}}.{{.ResourceConfig.ObjectSingularName}}
// @Failure      400
// @Failure 	 404
// @Router       /inventory/aws/{{.ServiceName}}/{{.ResourceConfig.Name}}/{{"{"}}{{.ResourceConfig.ObjectUniqueIdSnakeCase}}{{"}"}} [get]
func Get{{.ResourceConfig.ObjectSingularName}}(c *gin.Context, dao db.ReaderDAO) {
	var params routes.AwsQueryParameters
	if err := c.BindQuery(&params); err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}
	err := params.Process()
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}
	id, err := url.QueryUnescape(c.Param("{{.ResourceConfig.ObjectUniqueIdSnakeCase}}"))
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	selectedTime, err := dao.GetReferencedAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectSingularName}}ReportTime(c, params.ReportDateUnixMilli, *params.TimeSelection, params.TimeSelectionReference)
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	result, err := dao.GetAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectSingularName}}(c, *selectedTime, id)
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	c.IndentedJSON(200, result)
}


// DiffMulti{{.ResourceConfig.ObjectPluralName}} godoc
// @Summary      Diff {{.ResourceConfig.ObjectPluralName}}
// @Description  get a diff of {{.ResourceConfig.ObjectPluralName}} between two points in time
// @Tags         aws {{.ServiceName}}
// @Produce      json
// @Param        start_report_date query string true  "Which date to pull data from. Current date by default" Format(date)
// @Param		 start_time_selection query string false  "How to select the time range to pull data from. 'latest' by default" Enums(latest, before, after, at)
// @Param		 start_time_selection_reference query string false  "The reference time to use when selecting the time range to pull data from. Only used when time_selection is 'before', 'after', or 'at'." Format(dateTime)
// @Param        end_report_date query string true  "Which date to pull data from. Current date by default" Format(date)
// @Param		 end_time_selection query string false  "How to select the time range to pull data from. 'latest' by default" Enums(latest, before, after, at)
// @Param		 end_time_selection_reference query string false  "The reference time to use when selecting the time range to pull data from. Only used when time_selection is 'before', 'after', or 'at'." Format(dateTime)
// @Param		 account_id query string false  "A specific account to pull data from. All accounts by default"
// @Param		 region query string false  "A specific region to pull data from. All regions by default"
// @Security     ApiKeyAuth
// @Success      200  {array}   routes.Diff
// @Failure      400
// @Router       /diff/aws/{{.ServiceName}}/{{.ResourceConfig.Name}} [get]
func DiffMulti{{.ResourceConfig.ObjectPluralName}}(c *gin.Context, dao db.ReaderDAO) {
	var params routes.AwsDiffParameters
	if err := c.BindQuery(&params); err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}
	err := params.Process()
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	startSelectedTime, err := dao.GetReferencedAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectSingularName}}ReportTime(c, params.StartReportDateUnixMilli, *params.StartTimeSelection, params.StartTimeSelectionReference)
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	startResults, err := dao.ListAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectPluralName}}(c, *startSelectedTime, params.AccountId, params.Region, nil, nil)
	if err != nil {
		c.AbortWithStatusJSON(500, gin.H{"error": err.Error()})
		return
	}

	endSelectedTime, err := dao.GetReferencedAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectSingularName}}ReportTime(c, params.EndReportDateUnixMilli, *params.EndTimeSelection, params.EndTimeSelectionReference)
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	endResults, err := dao.ListAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectPluralName}}(c, *endSelectedTime, params.AccountId, params.Region, nil, nil)
	if err != nil {
		c.AbortWithStatusJSON(500, gin.H{"error": err.Error()})
		return
	}

	changelog, err := diff.Diff(startResults, endResults)
	if err != nil {
		c.AbortWithStatusJSON(500, gin.H{"error": err.Error()})
		return
	}
	
	c.IndentedJSON(200, changelog)
}


// DiffSingle{{.ResourceConfig.ObjectSingularName}} godoc
// @Summary      Diff {{.ResourceConfig.ObjectSingularName}}
// @Description  get a diff of {{.ResourceConfig.ObjectSingularName}} between two points in time
// @Tags         aws {{.ServiceName}}
// @Produce      json
// @Param        start_report_date query string true  "Which date to pull data from. Current date by default" Format(date)
// @Param		 start_time_selection query string false  "How to select the time range to pull data from. 'latest' by default" Enums(latest, before, after, at)
// @Param		 start_time_selection_reference query string false  "The reference time to use when selecting the time range to pull data from. Only used when time_selection is 'before', 'after', or 'at'." Format(dateTime)
// @Param        end_report_date query string true  "Which date to pull data from. Current date by default" Format(date)
// @Param		 end_time_selection query string false  "How to select the time range to pull data from. 'latest' by default" Enums(latest, before, after, at)
// @Param		 end_time_selection_reference query string false  "The reference time to use when selecting the time range to pull data from. Only used when time_selection is 'before', 'after', or 'at'." Format(dateTime)
// @Param		 account_id query string false  "A specific account to pull data from. All accounts by default"
// @Param		 region query string false  "A specific region to pull data from. All regions by default"
// @Param        {{.ResourceConfig.ObjectUniqueIdSnakeCase}} path string true "The {{.ResourceConfig.ObjectUniqueIdSnakeCase}} of the {{.ResourceConfig.ObjectSingularName}} to retrieve"
// @Security     ApiKeyAuth
// @Success      200  {array}   routes.Diff
// @Failure      400
// @Router       /diff/aws/{{.ServiceName}}/{{.ResourceConfig.Name}}/{{"{"}}{{.ResourceConfig.ObjectUniqueIdSnakeCase}}{{"}"}} [get]
func DiffSingle{{.ResourceConfig.ObjectSingularName}}(c *gin.Context, dao db.ReaderDAO) {
	var params routes.AwsDiffParameters
	if err := c.BindQuery(&params); err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}
	err := params.Process()
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	id, err := url.QueryUnescape(c.Param("{{.ResourceConfig.ObjectUniqueIdSnakeCase}}"))
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	startSelectedTime, err := dao.GetReferencedAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectSingularName}}ReportTime(c, params.StartReportDateUnixMilli, *params.StartTimeSelection, params.StartTimeSelectionReference)
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	startObject, err := dao.GetAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectSingularName}}(c, *startSelectedTime, id)
	if err != nil {
		c.AbortWithStatusJSON(500, gin.H{"error": err.Error()})
		return
	}

	endSelectedTime, err := dao.GetReferencedAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectSingularName}}ReportTime(c, params.EndReportDateUnixMilli, *params.EndTimeSelection, params.EndTimeSelectionReference)
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	endObject, err := dao.GetAws{{$.ServiceCapName}}{{.ResourceConfig.ObjectSingularName}}(c, *endSelectedTime, id)
	if err != nil {
		c.AbortWithStatusJSON(500, gin.H{"error": err.Error()})
		return
	}

	if startObject == nil && endObject == nil {
		c.AbortWithStatusJSON(404, gin.H{"error": "No {{.ResourceConfig.ObjectSingularName}} found with {{.ResourceConfig.ObjectUniqueIdSnakeCase}} " + id})
		return
	} else {
		changelog, err := diff.Diff(startObject, endObject)
		if err != nil {
			c.AbortWithStatusJSON(500, gin.H{"error": err.Error()})
			return
		}
		c.IndentedJSON(200, changelog)
		return
	}
}
package viewgen

import (
	"fmt"
	"reflect"

	"github.com/fatih/structtag"
	"github.com/sirupsen/logrus"
)

var (
	dailySchema = `
-- AUTOGENERATED BY VIEW-GENERATOR, DO NOT MODIFY
CREATE OR REPLACE VIEW daily_%s_%s_%s AS 
WITH
	filter AS (
	SELECT
		*
	, "max"(report_time) OVER (PARTITION BY report_date) oldest_report_time
	FROM
		%s_%s_%s
) 
SELECT *
FROM
	filter
WHERE (report_time = oldest_report_time)`

	distinctSchema = `
-- AUTOGENERATED BY VIEW-GENERATOR, DO NOT MODIFY
CREATE OR REPLACE VIEW distinct_%s_%s_%s AS 
WITH
	filter AS (
	SELECT
		*
	, "max"(report_time) OVER (PARTITION BY %s) oldest_report_time
	FROM
		%s_%s_%s
) 
SELECT *
FROM
	filter
WHERE (report_time = oldest_report_time)`

	currentSchema = `
-- AUTOGENERATED BY VIEW-GENERATOR, DO NOT MODIFY
CREATE OR REPLACE VIEW current_%s_%s_%s AS 
WITH
	filter AS (
	SELECT
		*
	, "max"(report_time) OVER (PARTITION BY report_date) oldest_report_time
	FROM
		%s_%s_%s
	WHERE (report_date = current_date)
) 
SELECT *
FROM
	filter
WHERE (report_time = oldest_report_time)`

	dailyDistinctSchema = `
-- AUTOGENERATED BY VIEW-GENERATOR, DO NOT MODIFY
CREATE OR REPLACE VIEW daily_distinct_%s_%s_%s AS 
WITH
	filter AS (
	SELECT
		*
	, "max"(report_time) OVER (PARTITION BY %s, report_date) oldest_report_time
	FROM
		%s_%s_%s
) 
SELECT *
FROM
	filter
WHERE (report_time = oldest_report_time)`
)

type ModelView struct {
	Filename string
	View     string
	Name     string
}

func GetModelViews(cloud, service, resource string, model interface{}) ([]ModelView, error) {
	modelValue := reflect.ValueOf(model)
	modelValue = reflect.Indirect(modelValue)
	modelType := modelValue.Type()

	var modelPrimaryKey string
	for i := 0; i < modelValue.NumField(); i++ {
		typeField := modelType.Field(i)
		tag := typeField.Tag

		tags, err := structtag.Parse(string(tag))
		if err != nil {
			continue
		}

		primaryKeyTag, err := tags.Get("inventory_primary_key")
		if err != nil {
			continue
		}
		if primaryKeyTag.Name != "true" {
			continue
		}

		ionTag, err := tags.Get("ion")
		if err != nil {
			panic(err)
		}
		modelPrimaryKey = ionTag.Name
	}

	if modelPrimaryKey == "" {
		logrus.WithFields(logrus.Fields{
			"cloud":    cloud,
			"service":  service,
			"resource": resource,
		}).Warning("No primary key found for resource")
	}

	var distinctView ModelView
	var dailyDistinctView ModelView

	dailyView := ModelView{
		Filename: fmt.Sprintf("%s_daily.sql", resource),
		View:     fmt.Sprintf(dailySchema, cloud, service, resource, cloud, service, resource),
		Name:     fmt.Sprintf("%s-%s-%s-daily", cloud, service, resource),
	}

	if modelPrimaryKey != "" {
		distinctView = ModelView{
			Filename: fmt.Sprintf("%s_distinct.sql", resource),
			View:     fmt.Sprintf(distinctSchema, cloud, service, resource, modelPrimaryKey, cloud, service, resource),
			Name:     fmt.Sprintf("%s-%s-%s-distinct", cloud, service, resource),
		}
	}

	currentView := ModelView{
		Filename: fmt.Sprintf("%s_current.sql", resource),
		View:     fmt.Sprintf(currentSchema, cloud, service, resource, cloud, service, resource),
		Name:     fmt.Sprintf("%s-%s-%s-current", cloud, service, resource),
	}

	if modelPrimaryKey != "" {
		dailyDistinctView = ModelView{
			Filename: fmt.Sprintf("%s_daily_distinct.sql", resource),
			View:     fmt.Sprintf(dailyDistinctSchema, cloud, service, resource, modelPrimaryKey, cloud, service, resource),
			Name:     fmt.Sprintf("%s-%s-%s-daily-distinct", cloud, service, resource),
		}
	}

	var views []ModelView
	if modelPrimaryKey != "" {
		views = []ModelView{dailyView, distinctView, currentView, dailyDistinctView}
	} else {
		views = []ModelView{dailyView, currentView}
	}

	return views, nil
}

//AUTOGENERATED CODE DO NOT EDIT
package awscloud

import (
	awsS3 "github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/gin-gonic/gin"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/cloudwatchlogs"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/dynamodb"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/ec2"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/ecs"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/efs"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/elasticache"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/elasticloadbalancing"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/elasticloadbalancingv2"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/iam"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/lambda"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/rds"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/redshift"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/route53"
	"github.com/sheacloud/cloud-inventory/internal/routes/awscloud/s3"
)

func AddInventoryRoutes(r *gin.RouterGroup, s3Client *awsS3.Client, s3Bucket string) {

	r.GET("/cloudwatchlogs/log_groups", func(c *gin.Context) {
		cloudwatchlogs.ListLogGroups(c, s3Client, s3Bucket)
	})
	r.GET("/cloudwatchlogs/log_groups/:arn", func(c *gin.Context) {
		cloudwatchlogs.GetLogGroup(c, s3Client, s3Bucket)
	})

	r.GET("/dynamodb/tables", func(c *gin.Context) {
		dynamodb.ListTableDescriptions(c, s3Client, s3Bucket)
	})
	r.GET("/dynamodb/tables/:table_arn", func(c *gin.Context) {
		dynamodb.GetTableDescription(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/addresses", func(c *gin.Context) {
		ec2.ListAddresses(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/addresses/:allocation_id", func(c *gin.Context) {
		ec2.GetAddress(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/dhcp_options", func(c *gin.Context) {
		ec2.ListDhcpOptions(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/dhcp_options/:dhcp_options_id", func(c *gin.Context) {
		ec2.GetDhcpOptions(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/images", func(c *gin.Context) {
		ec2.ListImages(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/images/:image_id", func(c *gin.Context) {
		ec2.GetImage(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/instance_types", func(c *gin.Context) {
		ec2.ListInstanceTypes(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/instance_types/:instance_type", func(c *gin.Context) {
		ec2.GetInstanceTypeInfo(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/instances", func(c *gin.Context) {
		ec2.ListInstances(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/instances/:instance_id", func(c *gin.Context) {
		ec2.GetInstance(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/internet_gateways", func(c *gin.Context) {
		ec2.ListInternetGateways(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/internet_gateways/:internet_gateway_id", func(c *gin.Context) {
		ec2.GetInternetGateway(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/managed_prefix_lists", func(c *gin.Context) {
		ec2.ListManagedPrefixLists(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/managed_prefix_lists/:prefix_list_arn", func(c *gin.Context) {
		ec2.GetManagedPrefixList(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/nat_gateways", func(c *gin.Context) {
		ec2.ListNatGateways(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/nat_gateways/:nat_gateway_id", func(c *gin.Context) {
		ec2.GetNatGateway(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/network_acls", func(c *gin.Context) {
		ec2.ListNetworkAcls(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/network_acls/:network_acl_id", func(c *gin.Context) {
		ec2.GetNetworkAcl(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/network_interfaces", func(c *gin.Context) {
		ec2.ListNetworkInterfaces(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/network_interfaces/:network_interface_id", func(c *gin.Context) {
		ec2.GetNetworkInterface(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/placement_groups", func(c *gin.Context) {
		ec2.ListPlacementGroups(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/placement_groups/:group_id", func(c *gin.Context) {
		ec2.GetPlacementGroup(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/reserved_instances", func(c *gin.Context) {
		ec2.ListReservedInstances(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/reserved_instances/:reserved_instances_id", func(c *gin.Context) {
		ec2.GetReservedInstances(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/route_tables", func(c *gin.Context) {
		ec2.ListRouteTables(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/route_tables/:route_table_id", func(c *gin.Context) {
		ec2.GetRouteTable(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/security_groups", func(c *gin.Context) {
		ec2.ListSecurityGroups(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/security_groups/:group_id", func(c *gin.Context) {
		ec2.GetSecurityGroup(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/subnets", func(c *gin.Context) {
		ec2.ListSubnets(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/subnets/:subnet_id", func(c *gin.Context) {
		ec2.GetSubnet(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/transit_gateway_peering_attachments", func(c *gin.Context) {
		ec2.ListTransitGatewayPeeringAttachments(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/transit_gateway_peering_attachments/:transit_gateway_attachment_id", func(c *gin.Context) {
		ec2.GetTransitGatewayPeeringAttachment(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/transit_gateway_route_tables", func(c *gin.Context) {
		ec2.ListTransitGatewayRouteTables(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/transit_gateway_route_tables/:transit_gateway_route_table_id", func(c *gin.Context) {
		ec2.GetTransitGatewayRouteTable(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/transit_gateway_vpc_attachments", func(c *gin.Context) {
		ec2.ListTransitGatewayVpcAttachments(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/transit_gateway_vpc_attachments/:transit_gateway_attachment_id", func(c *gin.Context) {
		ec2.GetTransitGatewayVpcAttachment(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/transit_gateways", func(c *gin.Context) {
		ec2.ListTransitGateways(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/transit_gateways/:transit_gateway_id", func(c *gin.Context) {
		ec2.GetTransitGateway(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/volumes", func(c *gin.Context) {
		ec2.ListVolumes(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/volumes/:volume_id", func(c *gin.Context) {
		ec2.GetVolume(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/vpc_endpoints", func(c *gin.Context) {
		ec2.ListVpcEndpoints(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/vpc_endpoints/:vpc_endpoint_id", func(c *gin.Context) {
		ec2.GetVpcEndpoint(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/vpc_peering_connections", func(c *gin.Context) {
		ec2.ListVpcPeeringConnections(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/vpc_peering_connections/:vpc_peering_connection_id", func(c *gin.Context) {
		ec2.GetVpcPeeringConnection(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/vpcs", func(c *gin.Context) {
		ec2.ListVpcs(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/vpcs/:vpc_id", func(c *gin.Context) {
		ec2.GetVpc(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/vpn_gateways", func(c *gin.Context) {
		ec2.ListVpnGateways(c, s3Client, s3Bucket)
	})
	r.GET("/ec2/vpn_gateways/:vpn_gateway_id", func(c *gin.Context) {
		ec2.GetVpnGateway(c, s3Client, s3Bucket)
	})

	r.GET("/ecs/clusters", func(c *gin.Context) {
		ecs.ListClusters(c, s3Client, s3Bucket)
	})
	r.GET("/ecs/clusters/:cluster_arn", func(c *gin.Context) {
		ecs.GetCluster(c, s3Client, s3Bucket)
	})

	r.GET("/ecs/services", func(c *gin.Context) {
		ecs.ListServices(c, s3Client, s3Bucket)
	})
	r.GET("/ecs/services/:service_arn", func(c *gin.Context) {
		ecs.GetService(c, s3Client, s3Bucket)
	})

	r.GET("/ecs/tasks", func(c *gin.Context) {
		ecs.ListTasks(c, s3Client, s3Bucket)
	})
	r.GET("/ecs/tasks/:task_arn", func(c *gin.Context) {
		ecs.GetTask(c, s3Client, s3Bucket)
	})

	r.GET("/efs/filesystems", func(c *gin.Context) {
		efs.ListFileSystems(c, s3Client, s3Bucket)
	})
	r.GET("/efs/filesystems/:file_system_id", func(c *gin.Context) {
		efs.GetFileSystemDescription(c, s3Client, s3Bucket)
	})

	r.GET("/elasticache/cache_clusters", func(c *gin.Context) {
		elasticache.ListCacheClusters(c, s3Client, s3Bucket)
	})
	r.GET("/elasticache/cache_clusters/:arn", func(c *gin.Context) {
		elasticache.GetCacheCluster(c, s3Client, s3Bucket)
	})

	r.GET("/elasticloadbalancing/load_balancers", func(c *gin.Context) {
		elasticloadbalancing.ListLoadBalancers(c, s3Client, s3Bucket)
	})
	r.GET("/elasticloadbalancing/load_balancers/:load_balancer_name", func(c *gin.Context) {
		elasticloadbalancing.GetLoadBalancerDescription(c, s3Client, s3Bucket)
	})

	r.GET("/elasticloadbalancingv2/load_balancers", func(c *gin.Context) {
		elasticloadbalancingv2.ListLoadBalancers(c, s3Client, s3Bucket)
	})
	r.GET("/elasticloadbalancingv2/load_balancers/:load_balancer_arn", func(c *gin.Context) {
		elasticloadbalancingv2.GetLoadBalancer(c, s3Client, s3Bucket)
	})

	r.GET("/elasticloadbalancingv2/target_groups", func(c *gin.Context) {
		elasticloadbalancingv2.ListTargetGroups(c, s3Client, s3Bucket)
	})
	r.GET("/elasticloadbalancingv2/target_groups/:target_group_arn", func(c *gin.Context) {
		elasticloadbalancingv2.GetTargetGroup(c, s3Client, s3Bucket)
	})

	r.GET("/iam/groups", func(c *gin.Context) {
		iam.ListGroups(c, s3Client, s3Bucket)
	})
	r.GET("/iam/groups/:group_id", func(c *gin.Context) {
		iam.GetGroup(c, s3Client, s3Bucket)
	})

	r.GET("/iam/policies", func(c *gin.Context) {
		iam.ListPolicies(c, s3Client, s3Bucket)
	})
	r.GET("/iam/policies/:policy_id", func(c *gin.Context) {
		iam.GetPolicy(c, s3Client, s3Bucket)
	})

	r.GET("/iam/roles", func(c *gin.Context) {
		iam.ListRoles(c, s3Client, s3Bucket)
	})
	r.GET("/iam/roles/:role_id", func(c *gin.Context) {
		iam.GetRole(c, s3Client, s3Bucket)
	})

	r.GET("/iam/users", func(c *gin.Context) {
		iam.ListUsers(c, s3Client, s3Bucket)
	})
	r.GET("/iam/users/:user_id", func(c *gin.Context) {
		iam.GetUser(c, s3Client, s3Bucket)
	})

	r.GET("/lambda/filesystems", func(c *gin.Context) {
		lambda.ListFunctions(c, s3Client, s3Bucket)
	})
	r.GET("/lambda/filesystems/:function_arn", func(c *gin.Context) {
		lambda.GetFunctionConfiguration(c, s3Client, s3Bucket)
	})

	r.GET("/rds/db_clusters", func(c *gin.Context) {
		rds.ListDBClusters(c, s3Client, s3Bucket)
	})
	r.GET("/rds/db_clusters/:db_cluster_arn", func(c *gin.Context) {
		rds.GetDBCluster(c, s3Client, s3Bucket)
	})

	r.GET("/rds/db_instances", func(c *gin.Context) {
		rds.ListDBInstances(c, s3Client, s3Bucket)
	})
	r.GET("/rds/db_instances/:db_instance_arn", func(c *gin.Context) {
		rds.GetDBInstance(c, s3Client, s3Bucket)
	})

	r.GET("/redshift/clusters", func(c *gin.Context) {
		redshift.ListClusters(c, s3Client, s3Bucket)
	})
	r.GET("/redshift/clusters/:cluster_identifier", func(c *gin.Context) {
		redshift.GetCluster(c, s3Client, s3Bucket)
	})

	r.GET("/route53/hosted_zones", func(c *gin.Context) {
		route53.ListHostedZones(c, s3Client, s3Bucket)
	})
	r.GET("/route53/hosted_zones/:id", func(c *gin.Context) {
		route53.GetHostedZone(c, s3Client, s3Bucket)
	})

	r.GET("/s3/buckets", func(c *gin.Context) {
		s3.ListBuckets(c, s3Client, s3Bucket)
	})
	r.GET("/s3/buckets/:name", func(c *gin.Context) {
		s3.GetBucket(c, s3Client, s3Bucket)
	})

}

func AddDiffRoutes(r *gin.RouterGroup, s3Client *awsS3.Client, s3Bucket string) {

	r.GET("/cloudwatchlogs/log_groups", func(c *gin.Context) {
		cloudwatchlogs.DiffLogGroups(c, s3Client, s3Bucket)
	})

	r.GET("/dynamodb/tables", func(c *gin.Context) {
		dynamodb.DiffTableDescriptions(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/addresses", func(c *gin.Context) {
		ec2.DiffAddresses(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/dhcp_options", func(c *gin.Context) {
		ec2.DiffDhcpOptions(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/images", func(c *gin.Context) {
		ec2.DiffImages(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/instance_types", func(c *gin.Context) {
		ec2.DiffInstanceTypes(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/instances", func(c *gin.Context) {
		ec2.DiffInstances(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/internet_gateways", func(c *gin.Context) {
		ec2.DiffInternetGateways(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/managed_prefix_lists", func(c *gin.Context) {
		ec2.DiffManagedPrefixLists(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/nat_gateways", func(c *gin.Context) {
		ec2.DiffNatGateways(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/network_acls", func(c *gin.Context) {
		ec2.DiffNetworkAcls(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/network_interfaces", func(c *gin.Context) {
		ec2.DiffNetworkInterfaces(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/placement_groups", func(c *gin.Context) {
		ec2.DiffPlacementGroups(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/reserved_instances", func(c *gin.Context) {
		ec2.DiffReservedInstances(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/route_tables", func(c *gin.Context) {
		ec2.DiffRouteTables(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/security_groups", func(c *gin.Context) {
		ec2.DiffSecurityGroups(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/subnets", func(c *gin.Context) {
		ec2.DiffSubnets(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/transit_gateway_peering_attachments", func(c *gin.Context) {
		ec2.DiffTransitGatewayPeeringAttachments(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/transit_gateway_route_tables", func(c *gin.Context) {
		ec2.DiffTransitGatewayRouteTables(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/transit_gateway_vpc_attachments", func(c *gin.Context) {
		ec2.DiffTransitGatewayVpcAttachments(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/transit_gateways", func(c *gin.Context) {
		ec2.DiffTransitGateways(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/volumes", func(c *gin.Context) {
		ec2.DiffVolumes(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/vpc_endpoints", func(c *gin.Context) {
		ec2.DiffVpcEndpoints(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/vpc_peering_connections", func(c *gin.Context) {
		ec2.DiffVpcPeeringConnections(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/vpcs", func(c *gin.Context) {
		ec2.DiffVpcs(c, s3Client, s3Bucket)
	})

	r.GET("/ec2/vpn_gateways", func(c *gin.Context) {
		ec2.DiffVpnGateways(c, s3Client, s3Bucket)
	})

	r.GET("/ecs/clusters", func(c *gin.Context) {
		ecs.DiffClusters(c, s3Client, s3Bucket)
	})

	r.GET("/ecs/services", func(c *gin.Context) {
		ecs.DiffServices(c, s3Client, s3Bucket)
	})

	r.GET("/ecs/tasks", func(c *gin.Context) {
		ecs.DiffTasks(c, s3Client, s3Bucket)
	})

	r.GET("/efs/filesystems", func(c *gin.Context) {
		efs.DiffFileSystems(c, s3Client, s3Bucket)
	})

	r.GET("/elasticache/cache_clusters", func(c *gin.Context) {
		elasticache.DiffCacheClusters(c, s3Client, s3Bucket)
	})

	r.GET("/elasticloadbalancing/load_balancers", func(c *gin.Context) {
		elasticloadbalancing.DiffLoadBalancers(c, s3Client, s3Bucket)
	})

	r.GET("/elasticloadbalancingv2/load_balancers", func(c *gin.Context) {
		elasticloadbalancingv2.DiffLoadBalancers(c, s3Client, s3Bucket)
	})

	r.GET("/elasticloadbalancingv2/target_groups", func(c *gin.Context) {
		elasticloadbalancingv2.DiffTargetGroups(c, s3Client, s3Bucket)
	})

	r.GET("/iam/groups", func(c *gin.Context) {
		iam.DiffGroups(c, s3Client, s3Bucket)
	})

	r.GET("/iam/policies", func(c *gin.Context) {
		iam.DiffPolicies(c, s3Client, s3Bucket)
	})

	r.GET("/iam/roles", func(c *gin.Context) {
		iam.DiffRoles(c, s3Client, s3Bucket)
	})

	r.GET("/iam/users", func(c *gin.Context) {
		iam.DiffUsers(c, s3Client, s3Bucket)
	})

	r.GET("/lambda/filesystems", func(c *gin.Context) {
		lambda.DiffFunctions(c, s3Client, s3Bucket)
	})

	r.GET("/rds/db_clusters", func(c *gin.Context) {
		rds.DiffDBClusters(c, s3Client, s3Bucket)
	})

	r.GET("/rds/db_instances", func(c *gin.Context) {
		rds.DiffDBInstances(c, s3Client, s3Bucket)
	})

	r.GET("/redshift/clusters", func(c *gin.Context) {
		redshift.DiffClusters(c, s3Client, s3Bucket)
	})

	r.GET("/route53/hosted_zones", func(c *gin.Context) {
		route53.DiffHostedZones(c, s3Client, s3Bucket)
	})

	r.GET("/s3/buckets", func(c *gin.Context) {
		s3.DiffBuckets(c, s3Client, s3Bucket)
	})

}

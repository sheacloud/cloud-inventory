//AUTOGENERATED CODE DO NOT EDIT
// This file is automatically generated from /internal/codegen/templates/aws_router.tmpl
package aws

import (
	"github.com/gin-gonic/gin"
	"github.com/sheacloud/cloud-inventory/internal/api/routes"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/apigateway"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/apigatewayv2"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/backup"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/cloudtrail"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/cloudwatchlogs"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/dynamodb"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/ec2"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/ecs"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/efs"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/elasticache"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/elasticloadbalancing"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/elasticloadbalancingv2"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/iam"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/lambda"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/rds"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/redshift"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/route53"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/s3"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/sns"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/sqs"
	"github.com/sheacloud/cloud-inventory/internal/api/routes/aws/storagegateway"
	"github.com/sheacloud/cloud-inventory/internal/db"
)

// GetAwsMetadata godoc
// @Summary      Get Aws Metadata
// @Description  get a list of Aws metadata
// @Tags         aws
// @Produce      json
// @Security     ApiKeyAuth
// @Success      200  {array}   routes.AwsMetadata
// @Failure      400
// @Router       /metadata/aws [get]
func GetAwsMetadata(c *gin.Context) {
	c.IndentedJSON(200, routes.AwsMetadata{
		Services: []string{
			"apigateway",
			"apigatewayv2",
			"backup",
			"cloudtrail",
			"cloudwatchlogs",
			"dynamodb",
			"ec2",
			"ecs",
			"efs",
			"elasticache",
			"elasticloadbalancing",
			"elasticloadbalancingv2",
			"iam",
			"lambda",
			"rds",
			"redshift",
			"route53",
			"s3",
			"sns",
			"sqs",
			"storagegateway",
		},
	})
}

func AddMetadataRoutes(r *gin.RouterGroup, dao db.ReaderDAO) {

	r.GET("/", GetAwsMetadata)

	r.GET("/apigateway", apigateway.GetApiGatewayMetadata)
	r.GET("/apigatewayv2", apigatewayv2.GetApiGatewayV2Metadata)
	r.GET("/backup", backup.GetBackupMetadata)
	r.GET("/cloudtrail", cloudtrail.GetCloudTrailMetadata)
	r.GET("/cloudwatchlogs", cloudwatchlogs.GetCloudWatchLogsMetadata)
	r.GET("/dynamodb", dynamodb.GetDynamoDBMetadata)
	r.GET("/ec2", ec2.GetEC2Metadata)
	r.GET("/ecs", ecs.GetECSMetadata)
	r.GET("/efs", efs.GetEFSMetadata)
	r.GET("/elasticache", elasticache.GetElastiCacheMetadata)
	r.GET("/elasticloadbalancing", elasticloadbalancing.GetElasticLoadBalancingMetadata)
	r.GET("/elasticloadbalancingv2", elasticloadbalancingv2.GetElasticLoadBalancingV2Metadata)
	r.GET("/iam", iam.GetIAMMetadata)
	r.GET("/lambda", lambda.GetLambdaMetadata)
	r.GET("/rds", rds.GetRDSMetadata)
	r.GET("/redshift", redshift.GetRedshiftMetadata)
	r.GET("/route53", route53.GetRoute53Metadata)
	r.GET("/s3", s3.GetS3Metadata)
	r.GET("/sns", sns.GetSNSMetadata)
	r.GET("/sqs", sqs.GetSQSMetadata)
	r.GET("/storagegateway", storagegateway.GetStorageGatewayMetadata)

	r.GET("/apigateway/rest_apis", func(c *gin.Context) {
		apigateway.GetRestApisMetadata(c, dao)
	})

	r.GET("/apigatewayv2/apis", func(c *gin.Context) {
		apigatewayv2.GetApisMetadata(c, dao)
	})

	r.GET("/backup/vaults", func(c *gin.Context) {
		backup.GetBackupVaultsMetadata(c, dao)
	})

	r.GET("/backup/plans", func(c *gin.Context) {
		backup.GetBackupPlansMetadata(c, dao)
	})

	r.GET("/cloudtrail/trails", func(c *gin.Context) {
		cloudtrail.GetTrailsMetadata(c, dao)
	})

	r.GET("/cloudwatchlogs/log_groups", func(c *gin.Context) {
		cloudwatchlogs.GetLogGroupsMetadata(c, dao)
	})

	r.GET("/dynamodb/tables", func(c *gin.Context) {
		dynamodb.GetTablesMetadata(c, dao)
	})

	r.GET("/ec2/addresses", func(c *gin.Context) {
		ec2.GetAddressesMetadata(c, dao)
	})

	r.GET("/ec2/dhcp_options", func(c *gin.Context) {
		ec2.GetDhcpOptionsMetadata(c, dao)
	})

	r.GET("/ec2/images", func(c *gin.Context) {
		ec2.GetImagesMetadata(c, dao)
	})

	r.GET("/ec2/instances", func(c *gin.Context) {
		ec2.GetInstancesMetadata(c, dao)
	})

	r.GET("/ec2/internet_gateways", func(c *gin.Context) {
		ec2.GetInternetGatewaysMetadata(c, dao)
	})

	r.GET("/ec2/managed_prefix_lists", func(c *gin.Context) {
		ec2.GetManagedPrefixListsMetadata(c, dao)
	})

	r.GET("/ec2/nat_gateways", func(c *gin.Context) {
		ec2.GetNatGatewaysMetadata(c, dao)
	})

	r.GET("/ec2/network_acls", func(c *gin.Context) {
		ec2.GetNetworkAclsMetadata(c, dao)
	})

	r.GET("/ec2/network_interfaces", func(c *gin.Context) {
		ec2.GetNetworkInterfacesMetadata(c, dao)
	})

	r.GET("/ec2/placement_groups", func(c *gin.Context) {
		ec2.GetPlacementGroupsMetadata(c, dao)
	})

	r.GET("/ec2/reserved_instances", func(c *gin.Context) {
		ec2.GetReservedInstancesMetadata(c, dao)
	})

	r.GET("/ec2/route_tables", func(c *gin.Context) {
		ec2.GetRouteTablesMetadata(c, dao)
	})

	r.GET("/ec2/security_groups", func(c *gin.Context) {
		ec2.GetSecurityGroupsMetadata(c, dao)
	})

	r.GET("/ec2/subnets", func(c *gin.Context) {
		ec2.GetSubnetsMetadata(c, dao)
	})

	r.GET("/ec2/transit_gateway_peering_attachments", func(c *gin.Context) {
		ec2.GetTransitGatewayPeeringAttachmentsMetadata(c, dao)
	})

	r.GET("/ec2/transit_gateway_route_tables", func(c *gin.Context) {
		ec2.GetTransitGatewayRouteTablesMetadata(c, dao)
	})

	r.GET("/ec2/transit_gateway_vpc_attachments", func(c *gin.Context) {
		ec2.GetTransitGatewayVpcAttachmentsMetadata(c, dao)
	})

	r.GET("/ec2/transit_gateways", func(c *gin.Context) {
		ec2.GetTransitGatewaysMetadata(c, dao)
	})

	r.GET("/ec2/volumes", func(c *gin.Context) {
		ec2.GetVolumesMetadata(c, dao)
	})

	r.GET("/ec2/vpc_endpoints", func(c *gin.Context) {
		ec2.GetVpcEndpointsMetadata(c, dao)
	})

	r.GET("/ec2/vpc_peering_connections", func(c *gin.Context) {
		ec2.GetVpcPeeringConnectionsMetadata(c, dao)
	})

	r.GET("/ec2/vpcs", func(c *gin.Context) {
		ec2.GetVpcsMetadata(c, dao)
	})

	r.GET("/ec2/vpn_gateways", func(c *gin.Context) {
		ec2.GetVpnGatewaysMetadata(c, dao)
	})

	r.GET("/ecs/clusters", func(c *gin.Context) {
		ecs.GetClustersMetadata(c, dao)
	})

	r.GET("/ecs/services", func(c *gin.Context) {
		ecs.GetServicesMetadata(c, dao)
	})

	r.GET("/ecs/tasks", func(c *gin.Context) {
		ecs.GetTasksMetadata(c, dao)
	})

	r.GET("/efs/file_systems", func(c *gin.Context) {
		efs.GetFileSystemsMetadata(c, dao)
	})

	r.GET("/elasticache/cache_clusters", func(c *gin.Context) {
		elasticache.GetCacheClustersMetadata(c, dao)
	})

	r.GET("/elasticloadbalancing/load_balancers", func(c *gin.Context) {
		elasticloadbalancing.GetLoadBalancersMetadata(c, dao)
	})

	r.GET("/elasticloadbalancingv2/load_balancers", func(c *gin.Context) {
		elasticloadbalancingv2.GetLoadBalancersMetadata(c, dao)
	})

	r.GET("/elasticloadbalancingv2/target_groups", func(c *gin.Context) {
		elasticloadbalancingv2.GetTargetGroupsMetadata(c, dao)
	})

	r.GET("/iam/groups", func(c *gin.Context) {
		iam.GetGroupsMetadata(c, dao)
	})

	r.GET("/iam/policies", func(c *gin.Context) {
		iam.GetPoliciesMetadata(c, dao)
	})

	r.GET("/iam/roles", func(c *gin.Context) {
		iam.GetRolesMetadata(c, dao)
	})

	r.GET("/iam/users", func(c *gin.Context) {
		iam.GetUsersMetadata(c, dao)
	})

	r.GET("/lambda/functions", func(c *gin.Context) {
		lambda.GetFunctionsMetadata(c, dao)
	})

	r.GET("/rds/db_clusters", func(c *gin.Context) {
		rds.GetDBClustersMetadata(c, dao)
	})

	r.GET("/rds/db_instances", func(c *gin.Context) {
		rds.GetDBInstancesMetadata(c, dao)
	})

	r.GET("/redshift/clusters", func(c *gin.Context) {
		redshift.GetClustersMetadata(c, dao)
	})

	r.GET("/route53/hosted_zones", func(c *gin.Context) {
		route53.GetHostedZonesMetadata(c, dao)
	})

	r.GET("/s3/buckets", func(c *gin.Context) {
		s3.GetBucketsMetadata(c, dao)
	})

	r.GET("/sns/topics", func(c *gin.Context) {
		sns.GetTopicsMetadata(c, dao)
	})

	r.GET("/sns/subscriptions", func(c *gin.Context) {
		sns.GetSubscriptionsMetadata(c, dao)
	})

	r.GET("/sqs/queues", func(c *gin.Context) {
		sqs.GetQueuesMetadata(c, dao)
	})

	r.GET("/storagegateway/gateways", func(c *gin.Context) {
		storagegateway.GetGatewaysMetadata(c, dao)
	})

}

func AddInventoryRoutes(r *gin.RouterGroup, dao db.ReaderDAO) {

	r.GET("/apigateway/rest_apis", func(c *gin.Context) {
		apigateway.ListRestApis(c, dao)
	})
	r.GET("/apigateway/rest_apis/:id", func(c *gin.Context) {
		apigateway.GetRestApi(c, dao)
	})

	r.GET("/apigatewayv2/apis", func(c *gin.Context) {
		apigatewayv2.ListApis(c, dao)
	})
	r.GET("/apigatewayv2/apis/:api_id", func(c *gin.Context) {
		apigatewayv2.GetApi(c, dao)
	})

	r.GET("/backup/vaults", func(c *gin.Context) {
		backup.ListBackupVaults(c, dao)
	})
	r.GET("/backup/vaults/:backup_vault_arn", func(c *gin.Context) {
		backup.GetBackupVault(c, dao)
	})

	r.GET("/backup/plans", func(c *gin.Context) {
		backup.ListBackupPlans(c, dao)
	})
	r.GET("/backup/plans/:backup_plan_arn", func(c *gin.Context) {
		backup.GetBackupPlan(c, dao)
	})

	r.GET("/cloudtrail/trails", func(c *gin.Context) {
		cloudtrail.ListTrails(c, dao)
	})
	r.GET("/cloudtrail/trails/:trail_arn", func(c *gin.Context) {
		cloudtrail.GetTrail(c, dao)
	})

	r.GET("/cloudwatchlogs/log_groups", func(c *gin.Context) {
		cloudwatchlogs.ListLogGroups(c, dao)
	})
	r.GET("/cloudwatchlogs/log_groups/:arn", func(c *gin.Context) {
		cloudwatchlogs.GetLogGroup(c, dao)
	})

	r.GET("/dynamodb/tables", func(c *gin.Context) {
		dynamodb.ListTables(c, dao)
	})
	r.GET("/dynamodb/tables/:table_arn", func(c *gin.Context) {
		dynamodb.GetTable(c, dao)
	})

	r.GET("/ec2/addresses", func(c *gin.Context) {
		ec2.ListAddresses(c, dao)
	})
	r.GET("/ec2/addresses/:allocation_id", func(c *gin.Context) {
		ec2.GetAddress(c, dao)
	})

	r.GET("/ec2/dhcp_options", func(c *gin.Context) {
		ec2.ListDhcpOptions(c, dao)
	})
	r.GET("/ec2/dhcp_options/:dhcp_options_id", func(c *gin.Context) {
		ec2.GetDhcpOptions(c, dao)
	})

	r.GET("/ec2/images", func(c *gin.Context) {
		ec2.ListImages(c, dao)
	})
	r.GET("/ec2/images/:image_id", func(c *gin.Context) {
		ec2.GetImage(c, dao)
	})

	r.GET("/ec2/instances", func(c *gin.Context) {
		ec2.ListInstances(c, dao)
	})
	r.GET("/ec2/instances/:instance_id", func(c *gin.Context) {
		ec2.GetInstance(c, dao)
	})

	r.GET("/ec2/internet_gateways", func(c *gin.Context) {
		ec2.ListInternetGateways(c, dao)
	})
	r.GET("/ec2/internet_gateways/:internet_gateway_id", func(c *gin.Context) {
		ec2.GetInternetGateway(c, dao)
	})

	r.GET("/ec2/managed_prefix_lists", func(c *gin.Context) {
		ec2.ListManagedPrefixLists(c, dao)
	})
	r.GET("/ec2/managed_prefix_lists/:prefix_list_arn", func(c *gin.Context) {
		ec2.GetManagedPrefixList(c, dao)
	})

	r.GET("/ec2/nat_gateways", func(c *gin.Context) {
		ec2.ListNatGateways(c, dao)
	})
	r.GET("/ec2/nat_gateways/:nat_gateway_id", func(c *gin.Context) {
		ec2.GetNatGateway(c, dao)
	})

	r.GET("/ec2/network_acls", func(c *gin.Context) {
		ec2.ListNetworkAcls(c, dao)
	})
	r.GET("/ec2/network_acls/:network_acl_id", func(c *gin.Context) {
		ec2.GetNetworkAcl(c, dao)
	})

	r.GET("/ec2/network_interfaces", func(c *gin.Context) {
		ec2.ListNetworkInterfaces(c, dao)
	})
	r.GET("/ec2/network_interfaces/:network_interface_id", func(c *gin.Context) {
		ec2.GetNetworkInterface(c, dao)
	})

	r.GET("/ec2/placement_groups", func(c *gin.Context) {
		ec2.ListPlacementGroups(c, dao)
	})
	r.GET("/ec2/placement_groups/:group_id", func(c *gin.Context) {
		ec2.GetPlacementGroup(c, dao)
	})

	r.GET("/ec2/reserved_instances", func(c *gin.Context) {
		ec2.ListReservedInstances(c, dao)
	})
	r.GET("/ec2/reserved_instances/:reserved_instances_id", func(c *gin.Context) {
		ec2.GetReservedInstances(c, dao)
	})

	r.GET("/ec2/route_tables", func(c *gin.Context) {
		ec2.ListRouteTables(c, dao)
	})
	r.GET("/ec2/route_tables/:route_table_id", func(c *gin.Context) {
		ec2.GetRouteTable(c, dao)
	})

	r.GET("/ec2/security_groups", func(c *gin.Context) {
		ec2.ListSecurityGroups(c, dao)
	})
	r.GET("/ec2/security_groups/:group_id", func(c *gin.Context) {
		ec2.GetSecurityGroup(c, dao)
	})

	r.GET("/ec2/subnets", func(c *gin.Context) {
		ec2.ListSubnets(c, dao)
	})
	r.GET("/ec2/subnets/:subnet_id", func(c *gin.Context) {
		ec2.GetSubnet(c, dao)
	})

	r.GET("/ec2/transit_gateway_peering_attachments", func(c *gin.Context) {
		ec2.ListTransitGatewayPeeringAttachments(c, dao)
	})
	r.GET("/ec2/transit_gateway_peering_attachments/:transit_gateway_attachment_id", func(c *gin.Context) {
		ec2.GetTransitGatewayPeeringAttachment(c, dao)
	})

	r.GET("/ec2/transit_gateway_route_tables", func(c *gin.Context) {
		ec2.ListTransitGatewayRouteTables(c, dao)
	})
	r.GET("/ec2/transit_gateway_route_tables/:transit_gateway_route_table_id", func(c *gin.Context) {
		ec2.GetTransitGatewayRouteTable(c, dao)
	})

	r.GET("/ec2/transit_gateway_vpc_attachments", func(c *gin.Context) {
		ec2.ListTransitGatewayVpcAttachments(c, dao)
	})
	r.GET("/ec2/transit_gateway_vpc_attachments/:transit_gateway_attachment_id", func(c *gin.Context) {
		ec2.GetTransitGatewayVpcAttachment(c, dao)
	})

	r.GET("/ec2/transit_gateways", func(c *gin.Context) {
		ec2.ListTransitGateways(c, dao)
	})
	r.GET("/ec2/transit_gateways/:transit_gateway_id", func(c *gin.Context) {
		ec2.GetTransitGateway(c, dao)
	})

	r.GET("/ec2/volumes", func(c *gin.Context) {
		ec2.ListVolumes(c, dao)
	})
	r.GET("/ec2/volumes/:volume_id", func(c *gin.Context) {
		ec2.GetVolume(c, dao)
	})

	r.GET("/ec2/vpc_endpoints", func(c *gin.Context) {
		ec2.ListVpcEndpoints(c, dao)
	})
	r.GET("/ec2/vpc_endpoints/:vpc_endpoint_id", func(c *gin.Context) {
		ec2.GetVpcEndpoint(c, dao)
	})

	r.GET("/ec2/vpc_peering_connections", func(c *gin.Context) {
		ec2.ListVpcPeeringConnections(c, dao)
	})
	r.GET("/ec2/vpc_peering_connections/:vpc_peering_connection_id", func(c *gin.Context) {
		ec2.GetVpcPeeringConnection(c, dao)
	})

	r.GET("/ec2/vpcs", func(c *gin.Context) {
		ec2.ListVpcs(c, dao)
	})
	r.GET("/ec2/vpcs/:vpc_id", func(c *gin.Context) {
		ec2.GetVpc(c, dao)
	})

	r.GET("/ec2/vpn_gateways", func(c *gin.Context) {
		ec2.ListVpnGateways(c, dao)
	})
	r.GET("/ec2/vpn_gateways/:vpn_gateway_id", func(c *gin.Context) {
		ec2.GetVpnGateway(c, dao)
	})

	r.GET("/ecs/clusters", func(c *gin.Context) {
		ecs.ListClusters(c, dao)
	})
	r.GET("/ecs/clusters/:cluster_arn", func(c *gin.Context) {
		ecs.GetCluster(c, dao)
	})

	r.GET("/ecs/services", func(c *gin.Context) {
		ecs.ListServices(c, dao)
	})
	r.GET("/ecs/services/:service_arn", func(c *gin.Context) {
		ecs.GetService(c, dao)
	})

	r.GET("/ecs/tasks", func(c *gin.Context) {
		ecs.ListTasks(c, dao)
	})
	r.GET("/ecs/tasks/:task_arn", func(c *gin.Context) {
		ecs.GetTask(c, dao)
	})

	r.GET("/efs/file_systems", func(c *gin.Context) {
		efs.ListFileSystems(c, dao)
	})
	r.GET("/efs/file_systems/:file_system_id", func(c *gin.Context) {
		efs.GetFileSystem(c, dao)
	})

	r.GET("/elasticache/cache_clusters", func(c *gin.Context) {
		elasticache.ListCacheClusters(c, dao)
	})
	r.GET("/elasticache/cache_clusters/:arn", func(c *gin.Context) {
		elasticache.GetCacheCluster(c, dao)
	})

	r.GET("/elasticloadbalancing/load_balancers", func(c *gin.Context) {
		elasticloadbalancing.ListLoadBalancers(c, dao)
	})
	r.GET("/elasticloadbalancing/load_balancers/:load_balancer_name", func(c *gin.Context) {
		elasticloadbalancing.GetLoadBalancer(c, dao)
	})

	r.GET("/elasticloadbalancingv2/load_balancers", func(c *gin.Context) {
		elasticloadbalancingv2.ListLoadBalancers(c, dao)
	})
	r.GET("/elasticloadbalancingv2/load_balancers/:load_balancer_arn", func(c *gin.Context) {
		elasticloadbalancingv2.GetLoadBalancer(c, dao)
	})

	r.GET("/elasticloadbalancingv2/target_groups", func(c *gin.Context) {
		elasticloadbalancingv2.ListTargetGroups(c, dao)
	})
	r.GET("/elasticloadbalancingv2/target_groups/:target_group_arn", func(c *gin.Context) {
		elasticloadbalancingv2.GetTargetGroup(c, dao)
	})

	r.GET("/iam/groups", func(c *gin.Context) {
		iam.ListGroups(c, dao)
	})
	r.GET("/iam/groups/:group_id", func(c *gin.Context) {
		iam.GetGroup(c, dao)
	})

	r.GET("/iam/policies", func(c *gin.Context) {
		iam.ListPolicies(c, dao)
	})
	r.GET("/iam/policies/:policy_id", func(c *gin.Context) {
		iam.GetPolicy(c, dao)
	})

	r.GET("/iam/roles", func(c *gin.Context) {
		iam.ListRoles(c, dao)
	})
	r.GET("/iam/roles/:role_id", func(c *gin.Context) {
		iam.GetRole(c, dao)
	})

	r.GET("/iam/users", func(c *gin.Context) {
		iam.ListUsers(c, dao)
	})
	r.GET("/iam/users/:user_id", func(c *gin.Context) {
		iam.GetUser(c, dao)
	})

	r.GET("/lambda/functions", func(c *gin.Context) {
		lambda.ListFunctions(c, dao)
	})
	r.GET("/lambda/functions/:function_arn", func(c *gin.Context) {
		lambda.GetFunction(c, dao)
	})

	r.GET("/rds/db_clusters", func(c *gin.Context) {
		rds.ListDBClusters(c, dao)
	})
	r.GET("/rds/db_clusters/:db_cluster_arn", func(c *gin.Context) {
		rds.GetDBCluster(c, dao)
	})

	r.GET("/rds/db_instances", func(c *gin.Context) {
		rds.ListDBInstances(c, dao)
	})
	r.GET("/rds/db_instances/:db_instance_arn", func(c *gin.Context) {
		rds.GetDBInstance(c, dao)
	})

	r.GET("/redshift/clusters", func(c *gin.Context) {
		redshift.ListClusters(c, dao)
	})
	r.GET("/redshift/clusters/:cluster_identifier", func(c *gin.Context) {
		redshift.GetCluster(c, dao)
	})

	r.GET("/route53/hosted_zones", func(c *gin.Context) {
		route53.ListHostedZones(c, dao)
	})
	r.GET("/route53/hosted_zones/:id", func(c *gin.Context) {
		route53.GetHostedZone(c, dao)
	})

	r.GET("/s3/buckets", func(c *gin.Context) {
		s3.ListBuckets(c, dao)
	})
	r.GET("/s3/buckets/:name", func(c *gin.Context) {
		s3.GetBucket(c, dao)
	})

	r.GET("/sns/topics", func(c *gin.Context) {
		sns.ListTopics(c, dao)
	})
	r.GET("/sns/topics/:topic_arn", func(c *gin.Context) {
		sns.GetTopic(c, dao)
	})

	r.GET("/sns/subscriptions", func(c *gin.Context) {
		sns.ListSubscriptions(c, dao)
	})
	r.GET("/sns/subscriptions/:subscription_arn", func(c *gin.Context) {
		sns.GetSubscription(c, dao)
	})

	r.GET("/sqs/queues", func(c *gin.Context) {
		sqs.ListQueues(c, dao)
	})
	r.GET("/sqs/queues/:queue_arn", func(c *gin.Context) {
		sqs.GetQueue(c, dao)
	})

	r.GET("/storagegateway/gateways", func(c *gin.Context) {
		storagegateway.ListGateways(c, dao)
	})
	r.GET("/storagegateway/gateways/:gateway_arn", func(c *gin.Context) {
		storagegateway.GetGateway(c, dao)
	})

}

func AddDiffRoutes(r *gin.RouterGroup, dao db.ReaderDAO) {

	r.GET("/apigateway/rest_apis", func(c *gin.Context) {
		apigateway.DiffMultiRestApis(c, dao)
	})
	r.GET("/apigateway/rest_apis/:id", func(c *gin.Context) {
		apigateway.DiffSingleRestApi(c, dao)
	})

	r.GET("/apigatewayv2/apis", func(c *gin.Context) {
		apigatewayv2.DiffMultiApis(c, dao)
	})
	r.GET("/apigatewayv2/apis/:api_id", func(c *gin.Context) {
		apigatewayv2.DiffSingleApi(c, dao)
	})

	r.GET("/backup/vaults", func(c *gin.Context) {
		backup.DiffMultiBackupVaults(c, dao)
	})
	r.GET("/backup/vaults/:backup_vault_arn", func(c *gin.Context) {
		backup.DiffSingleBackupVault(c, dao)
	})

	r.GET("/backup/plans", func(c *gin.Context) {
		backup.DiffMultiBackupPlans(c, dao)
	})
	r.GET("/backup/plans/:backup_plan_arn", func(c *gin.Context) {
		backup.DiffSingleBackupPlan(c, dao)
	})

	r.GET("/cloudtrail/trails", func(c *gin.Context) {
		cloudtrail.DiffMultiTrails(c, dao)
	})
	r.GET("/cloudtrail/trails/:trail_arn", func(c *gin.Context) {
		cloudtrail.DiffSingleTrail(c, dao)
	})

	r.GET("/cloudwatchlogs/log_groups", func(c *gin.Context) {
		cloudwatchlogs.DiffMultiLogGroups(c, dao)
	})
	r.GET("/cloudwatchlogs/log_groups/:arn", func(c *gin.Context) {
		cloudwatchlogs.DiffSingleLogGroup(c, dao)
	})

	r.GET("/dynamodb/tables", func(c *gin.Context) {
		dynamodb.DiffMultiTables(c, dao)
	})
	r.GET("/dynamodb/tables/:table_arn", func(c *gin.Context) {
		dynamodb.DiffSingleTable(c, dao)
	})

	r.GET("/ec2/addresses", func(c *gin.Context) {
		ec2.DiffMultiAddresses(c, dao)
	})
	r.GET("/ec2/addresses/:allocation_id", func(c *gin.Context) {
		ec2.DiffSingleAddress(c, dao)
	})

	r.GET("/ec2/dhcp_options", func(c *gin.Context) {
		ec2.DiffMultiDhcpOptions(c, dao)
	})
	r.GET("/ec2/dhcp_options/:dhcp_options_id", func(c *gin.Context) {
		ec2.DiffSingleDhcpOptions(c, dao)
	})

	r.GET("/ec2/images", func(c *gin.Context) {
		ec2.DiffMultiImages(c, dao)
	})
	r.GET("/ec2/images/:image_id", func(c *gin.Context) {
		ec2.DiffSingleImage(c, dao)
	})

	r.GET("/ec2/instances", func(c *gin.Context) {
		ec2.DiffMultiInstances(c, dao)
	})
	r.GET("/ec2/instances/:instance_id", func(c *gin.Context) {
		ec2.DiffSingleInstance(c, dao)
	})

	r.GET("/ec2/internet_gateways", func(c *gin.Context) {
		ec2.DiffMultiInternetGateways(c, dao)
	})
	r.GET("/ec2/internet_gateways/:internet_gateway_id", func(c *gin.Context) {
		ec2.DiffSingleInternetGateway(c, dao)
	})

	r.GET("/ec2/managed_prefix_lists", func(c *gin.Context) {
		ec2.DiffMultiManagedPrefixLists(c, dao)
	})
	r.GET("/ec2/managed_prefix_lists/:prefix_list_arn", func(c *gin.Context) {
		ec2.DiffSingleManagedPrefixList(c, dao)
	})

	r.GET("/ec2/nat_gateways", func(c *gin.Context) {
		ec2.DiffMultiNatGateways(c, dao)
	})
	r.GET("/ec2/nat_gateways/:nat_gateway_id", func(c *gin.Context) {
		ec2.DiffSingleNatGateway(c, dao)
	})

	r.GET("/ec2/network_acls", func(c *gin.Context) {
		ec2.DiffMultiNetworkAcls(c, dao)
	})
	r.GET("/ec2/network_acls/:network_acl_id", func(c *gin.Context) {
		ec2.DiffSingleNetworkAcl(c, dao)
	})

	r.GET("/ec2/network_interfaces", func(c *gin.Context) {
		ec2.DiffMultiNetworkInterfaces(c, dao)
	})
	r.GET("/ec2/network_interfaces/:network_interface_id", func(c *gin.Context) {
		ec2.DiffSingleNetworkInterface(c, dao)
	})

	r.GET("/ec2/placement_groups", func(c *gin.Context) {
		ec2.DiffMultiPlacementGroups(c, dao)
	})
	r.GET("/ec2/placement_groups/:group_id", func(c *gin.Context) {
		ec2.DiffSinglePlacementGroup(c, dao)
	})

	r.GET("/ec2/reserved_instances", func(c *gin.Context) {
		ec2.DiffMultiReservedInstances(c, dao)
	})
	r.GET("/ec2/reserved_instances/:reserved_instances_id", func(c *gin.Context) {
		ec2.DiffSingleReservedInstances(c, dao)
	})

	r.GET("/ec2/route_tables", func(c *gin.Context) {
		ec2.DiffMultiRouteTables(c, dao)
	})
	r.GET("/ec2/route_tables/:route_table_id", func(c *gin.Context) {
		ec2.DiffSingleRouteTable(c, dao)
	})

	r.GET("/ec2/security_groups", func(c *gin.Context) {
		ec2.DiffMultiSecurityGroups(c, dao)
	})
	r.GET("/ec2/security_groups/:group_id", func(c *gin.Context) {
		ec2.DiffSingleSecurityGroup(c, dao)
	})

	r.GET("/ec2/subnets", func(c *gin.Context) {
		ec2.DiffMultiSubnets(c, dao)
	})
	r.GET("/ec2/subnets/:subnet_id", func(c *gin.Context) {
		ec2.DiffSingleSubnet(c, dao)
	})

	r.GET("/ec2/transit_gateway_peering_attachments", func(c *gin.Context) {
		ec2.DiffMultiTransitGatewayPeeringAttachments(c, dao)
	})
	r.GET("/ec2/transit_gateway_peering_attachments/:transit_gateway_attachment_id", func(c *gin.Context) {
		ec2.DiffSingleTransitGatewayPeeringAttachment(c, dao)
	})

	r.GET("/ec2/transit_gateway_route_tables", func(c *gin.Context) {
		ec2.DiffMultiTransitGatewayRouteTables(c, dao)
	})
	r.GET("/ec2/transit_gateway_route_tables/:transit_gateway_route_table_id", func(c *gin.Context) {
		ec2.DiffSingleTransitGatewayRouteTable(c, dao)
	})

	r.GET("/ec2/transit_gateway_vpc_attachments", func(c *gin.Context) {
		ec2.DiffMultiTransitGatewayVpcAttachments(c, dao)
	})
	r.GET("/ec2/transit_gateway_vpc_attachments/:transit_gateway_attachment_id", func(c *gin.Context) {
		ec2.DiffSingleTransitGatewayVpcAttachment(c, dao)
	})

	r.GET("/ec2/transit_gateways", func(c *gin.Context) {
		ec2.DiffMultiTransitGateways(c, dao)
	})
	r.GET("/ec2/transit_gateways/:transit_gateway_id", func(c *gin.Context) {
		ec2.DiffSingleTransitGateway(c, dao)
	})

	r.GET("/ec2/volumes", func(c *gin.Context) {
		ec2.DiffMultiVolumes(c, dao)
	})
	r.GET("/ec2/volumes/:volume_id", func(c *gin.Context) {
		ec2.DiffSingleVolume(c, dao)
	})

	r.GET("/ec2/vpc_endpoints", func(c *gin.Context) {
		ec2.DiffMultiVpcEndpoints(c, dao)
	})
	r.GET("/ec2/vpc_endpoints/:vpc_endpoint_id", func(c *gin.Context) {
		ec2.DiffSingleVpcEndpoint(c, dao)
	})

	r.GET("/ec2/vpc_peering_connections", func(c *gin.Context) {
		ec2.DiffMultiVpcPeeringConnections(c, dao)
	})
	r.GET("/ec2/vpc_peering_connections/:vpc_peering_connection_id", func(c *gin.Context) {
		ec2.DiffSingleVpcPeeringConnection(c, dao)
	})

	r.GET("/ec2/vpcs", func(c *gin.Context) {
		ec2.DiffMultiVpcs(c, dao)
	})
	r.GET("/ec2/vpcs/:vpc_id", func(c *gin.Context) {
		ec2.DiffSingleVpc(c, dao)
	})

	r.GET("/ec2/vpn_gateways", func(c *gin.Context) {
		ec2.DiffMultiVpnGateways(c, dao)
	})
	r.GET("/ec2/vpn_gateways/:vpn_gateway_id", func(c *gin.Context) {
		ec2.DiffSingleVpnGateway(c, dao)
	})

	r.GET("/ecs/clusters", func(c *gin.Context) {
		ecs.DiffMultiClusters(c, dao)
	})
	r.GET("/ecs/clusters/:cluster_arn", func(c *gin.Context) {
		ecs.DiffSingleCluster(c, dao)
	})

	r.GET("/ecs/services", func(c *gin.Context) {
		ecs.DiffMultiServices(c, dao)
	})
	r.GET("/ecs/services/:service_arn", func(c *gin.Context) {
		ecs.DiffSingleService(c, dao)
	})

	r.GET("/ecs/tasks", func(c *gin.Context) {
		ecs.DiffMultiTasks(c, dao)
	})
	r.GET("/ecs/tasks/:task_arn", func(c *gin.Context) {
		ecs.DiffSingleTask(c, dao)
	})

	r.GET("/efs/file_systems", func(c *gin.Context) {
		efs.DiffMultiFileSystems(c, dao)
	})
	r.GET("/efs/file_systems/:file_system_id", func(c *gin.Context) {
		efs.DiffSingleFileSystem(c, dao)
	})

	r.GET("/elasticache/cache_clusters", func(c *gin.Context) {
		elasticache.DiffMultiCacheClusters(c, dao)
	})
	r.GET("/elasticache/cache_clusters/:arn", func(c *gin.Context) {
		elasticache.DiffSingleCacheCluster(c, dao)
	})

	r.GET("/elasticloadbalancing/load_balancers", func(c *gin.Context) {
		elasticloadbalancing.DiffMultiLoadBalancers(c, dao)
	})
	r.GET("/elasticloadbalancing/load_balancers/:load_balancer_name", func(c *gin.Context) {
		elasticloadbalancing.DiffSingleLoadBalancer(c, dao)
	})

	r.GET("/elasticloadbalancingv2/load_balancers", func(c *gin.Context) {
		elasticloadbalancingv2.DiffMultiLoadBalancers(c, dao)
	})
	r.GET("/elasticloadbalancingv2/load_balancers/:load_balancer_arn", func(c *gin.Context) {
		elasticloadbalancingv2.DiffSingleLoadBalancer(c, dao)
	})

	r.GET("/elasticloadbalancingv2/target_groups", func(c *gin.Context) {
		elasticloadbalancingv2.DiffMultiTargetGroups(c, dao)
	})
	r.GET("/elasticloadbalancingv2/target_groups/:target_group_arn", func(c *gin.Context) {
		elasticloadbalancingv2.DiffSingleTargetGroup(c, dao)
	})

	r.GET("/iam/groups", func(c *gin.Context) {
		iam.DiffMultiGroups(c, dao)
	})
	r.GET("/iam/groups/:group_id", func(c *gin.Context) {
		iam.DiffSingleGroup(c, dao)
	})

	r.GET("/iam/policies", func(c *gin.Context) {
		iam.DiffMultiPolicies(c, dao)
	})
	r.GET("/iam/policies/:policy_id", func(c *gin.Context) {
		iam.DiffSinglePolicy(c, dao)
	})

	r.GET("/iam/roles", func(c *gin.Context) {
		iam.DiffMultiRoles(c, dao)
	})
	r.GET("/iam/roles/:role_id", func(c *gin.Context) {
		iam.DiffSingleRole(c, dao)
	})

	r.GET("/iam/users", func(c *gin.Context) {
		iam.DiffMultiUsers(c, dao)
	})
	r.GET("/iam/users/:user_id", func(c *gin.Context) {
		iam.DiffSingleUser(c, dao)
	})

	r.GET("/lambda/functions", func(c *gin.Context) {
		lambda.DiffMultiFunctions(c, dao)
	})
	r.GET("/lambda/functions/:function_arn", func(c *gin.Context) {
		lambda.DiffSingleFunction(c, dao)
	})

	r.GET("/rds/db_clusters", func(c *gin.Context) {
		rds.DiffMultiDBClusters(c, dao)
	})
	r.GET("/rds/db_clusters/:db_cluster_arn", func(c *gin.Context) {
		rds.DiffSingleDBCluster(c, dao)
	})

	r.GET("/rds/db_instances", func(c *gin.Context) {
		rds.DiffMultiDBInstances(c, dao)
	})
	r.GET("/rds/db_instances/:db_instance_arn", func(c *gin.Context) {
		rds.DiffSingleDBInstance(c, dao)
	})

	r.GET("/redshift/clusters", func(c *gin.Context) {
		redshift.DiffMultiClusters(c, dao)
	})
	r.GET("/redshift/clusters/:cluster_identifier", func(c *gin.Context) {
		redshift.DiffSingleCluster(c, dao)
	})

	r.GET("/route53/hosted_zones", func(c *gin.Context) {
		route53.DiffMultiHostedZones(c, dao)
	})
	r.GET("/route53/hosted_zones/:id", func(c *gin.Context) {
		route53.DiffSingleHostedZone(c, dao)
	})

	r.GET("/s3/buckets", func(c *gin.Context) {
		s3.DiffMultiBuckets(c, dao)
	})
	r.GET("/s3/buckets/:name", func(c *gin.Context) {
		s3.DiffSingleBucket(c, dao)
	})

	r.GET("/sns/topics", func(c *gin.Context) {
		sns.DiffMultiTopics(c, dao)
	})
	r.GET("/sns/topics/:topic_arn", func(c *gin.Context) {
		sns.DiffSingleTopic(c, dao)
	})

	r.GET("/sns/subscriptions", func(c *gin.Context) {
		sns.DiffMultiSubscriptions(c, dao)
	})
	r.GET("/sns/subscriptions/:subscription_arn", func(c *gin.Context) {
		sns.DiffSingleSubscription(c, dao)
	})

	r.GET("/sqs/queues", func(c *gin.Context) {
		sqs.DiffMultiQueues(c, dao)
	})
	r.GET("/sqs/queues/:queue_arn", func(c *gin.Context) {
		sqs.DiffSingleQueue(c, dao)
	})

	r.GET("/storagegateway/gateways", func(c *gin.Context) {
		storagegateway.DiffMultiGateways(c, dao)
	})
	r.GET("/storagegateway/gateways/:gateway_arn", func(c *gin.Context) {
		storagegateway.DiffSingleGateway(c, dao)
	})

}

//AUTOGENERATED CODE DO NOT EDIT
package dynamodb

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	dynamo "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/sheacloud/cloud-inventory/internal/db"
	"github.com/sheacloud/cloud-inventory/pkg/aws/ecs"
	"time"
)

type DynamoDBECSDAO struct {
	client     *dynamo.Client
	maxRetries int
}

func (dao *DynamoDBECSDAO) ListClusters(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ecs.Cluster, error) {
	tableName := "cloud-inventory-aws-ecs-clusters"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTime, "cluster_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ecs.Cluster
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBECSDAO) GetCluster(ctx context.Context, reportTime time.Time, id string) (*ecs.Cluster, error) {
	tableName := "cloud-inventory-aws-ecs-clusters"
	item, err := GetItem(ctx, dao.client, tableName, reportTime, id, "cluster_arn")
	if err != nil {
		return nil, err
	}
	var resource *ecs.Cluster
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBECSDAO) PutClusters(ctx context.Context, resources []*ecs.Cluster) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ecs-clusters", items)
}

func (dao *DynamoDBECSDAO) GetClusterReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.client, reportDate, "aws", "ecs", "clusters")
}

func (dao *DynamoDBECSDAO) GetReferencedClusterReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.client, reportDate, timeSelection, timeReference, "aws", "ecs", "clusters")
}

func (dao *DynamoDBECSDAO) ListServices(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ecs.Service, error) {
	tableName := "cloud-inventory-aws-ecs-services"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTime, "service_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ecs.Service
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBECSDAO) GetService(ctx context.Context, reportTime time.Time, id string) (*ecs.Service, error) {
	tableName := "cloud-inventory-aws-ecs-services"
	item, err := GetItem(ctx, dao.client, tableName, reportTime, id, "service_arn")
	if err != nil {
		return nil, err
	}
	var resource *ecs.Service
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBECSDAO) PutServices(ctx context.Context, resources []*ecs.Service) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ecs-services", items)
}

func (dao *DynamoDBECSDAO) GetServiceReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.client, reportDate, "aws", "ecs", "services")
}

func (dao *DynamoDBECSDAO) GetReferencedServiceReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.client, reportDate, timeSelection, timeReference, "aws", "ecs", "services")
}

func (dao *DynamoDBECSDAO) ListTasks(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ecs.Task, error) {
	tableName := "cloud-inventory-aws-ecs-tasks"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTime, "task_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ecs.Task
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBECSDAO) GetTask(ctx context.Context, reportTime time.Time, id string) (*ecs.Task, error) {
	tableName := "cloud-inventory-aws-ecs-tasks"
	item, err := GetItem(ctx, dao.client, tableName, reportTime, id, "task_arn")
	if err != nil {
		return nil, err
	}
	var resource *ecs.Task
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBECSDAO) PutTasks(ctx context.Context, resources []*ecs.Task) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ecs-tasks", items)
}

func (dao *DynamoDBECSDAO) GetTaskReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.client, reportDate, "aws", "ecs", "tasks")
}

func (dao *DynamoDBECSDAO) GetReferencedTaskReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.client, reportDate, timeSelection, timeReference, "aws", "ecs", "tasks")
}

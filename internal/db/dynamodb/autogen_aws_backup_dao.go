//AUTOGENERATED CODE DO NOT EDIT
package dynamodb

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	dynamo "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/sheacloud/cloud-inventory/internal/db"
	"github.com/sheacloud/cloud-inventory/pkg/aws/backup"
	"time"
)

type DynamoDBBackupDAO struct {
	client     *dynamo.Client
	maxRetries int
}

func (dao *DynamoDBBackupDAO) ListBackupVaults(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*backup.BackupVault, error) {
	tableName := "cloud-inventory-aws-backup-vaults"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTime, "backup_vault_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*backup.BackupVault
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBBackupDAO) GetBackupVault(ctx context.Context, reportTime time.Time, id string) (*backup.BackupVault, error) {
	tableName := "cloud-inventory-aws-backup-vaults"
	item, err := GetItem(ctx, dao.client, tableName, reportTime, id, "backup_vault_arn")
	if err != nil {
		return nil, err
	}
	var resource *backup.BackupVault
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBBackupDAO) PutBackupVaults(ctx context.Context, resources []*backup.BackupVault) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-backup-vaults", items)
}

func (dao *DynamoDBBackupDAO) GetBackupVaultReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.client, reportDate, "aws", "backup", "vaults")
}

func (dao *DynamoDBBackupDAO) GetReferencedBackupVaultReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.client, reportDate, timeSelection, timeReference, "aws", "backup", "vaults")
}

func (dao *DynamoDBBackupDAO) ListBackupPlans(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*backup.BackupPlan, error) {
	tableName := "cloud-inventory-aws-backup-plans"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTime, "backup_plan_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*backup.BackupPlan
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBBackupDAO) GetBackupPlan(ctx context.Context, reportTime time.Time, id string) (*backup.BackupPlan, error) {
	tableName := "cloud-inventory-aws-backup-plans"
	item, err := GetItem(ctx, dao.client, tableName, reportTime, id, "backup_plan_arn")
	if err != nil {
		return nil, err
	}
	var resource *backup.BackupPlan
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBBackupDAO) PutBackupPlans(ctx context.Context, resources []*backup.BackupPlan) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-backup-plans", items)
}

func (dao *DynamoDBBackupDAO) GetBackupPlanReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.client, reportDate, "aws", "backup", "plans")
}

func (dao *DynamoDBBackupDAO) GetReferencedBackupPlanReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.client, reportDate, timeSelection, timeReference, "aws", "backup", "plans")
}

//AUTOGENERATED CODE DO NOT EDIT
package dynamodb

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	dynamo "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/sheacloud/cloud-inventory/internal/db"
	"github.com/sheacloud/cloud-inventory/pkg/aws/rds"
	"time"
)

type DynamoDBRDSDAO struct {
	client     *dynamo.Client
	maxRetries int
}

func (dao *DynamoDBRDSDAO) ListDBClusters(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*rds.DBCluster, error) {
	tableName := "cloud-inventory-aws-rds-db-clusters"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTime, "db_cluster_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*rds.DBCluster
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBRDSDAO) GetDBCluster(ctx context.Context, reportTime time.Time, id string) (*rds.DBCluster, error) {
	tableName := "cloud-inventory-aws-rds-db-clusters"
	item, err := GetItem(ctx, dao.client, tableName, reportTime, id, "db_cluster_arn")
	if err != nil {
		return nil, err
	}
	var resource *rds.DBCluster
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBRDSDAO) PutDBClusters(ctx context.Context, resources []*rds.DBCluster) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-rds-db-clusters", items)
}

func (dao *DynamoDBRDSDAO) GetDBClusterReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.client, reportDate, "aws", "rds", "db_clusters")
}

func (dao *DynamoDBRDSDAO) GetReferencedDBClusterReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.client, reportDate, timeSelection, timeReference, "aws", "rds", "db_clusters")
}

func (dao *DynamoDBRDSDAO) ListDBInstances(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*rds.DBInstance, error) {
	tableName := "cloud-inventory-aws-rds-db-instances"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTime, "db_instance_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*rds.DBInstance
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBRDSDAO) GetDBInstance(ctx context.Context, reportTime time.Time, id string) (*rds.DBInstance, error) {
	tableName := "cloud-inventory-aws-rds-db-instances"
	item, err := GetItem(ctx, dao.client, tableName, reportTime, id, "db_instance_arn")
	if err != nil {
		return nil, err
	}
	var resource *rds.DBInstance
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBRDSDAO) PutDBInstances(ctx context.Context, resources []*rds.DBInstance) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-rds-db-instances", items)
}

func (dao *DynamoDBRDSDAO) GetDBInstanceReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.client, reportDate, "aws", "rds", "db_instances")
}

func (dao *DynamoDBRDSDAO) GetReferencedDBInstanceReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.client, reportDate, timeSelection, timeReference, "aws", "rds", "db_instances")
}

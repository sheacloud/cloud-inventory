//AUTOGENERATED CODE DO NOT EDIT
package dynamodb

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	awsDynamoDB "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/google/uuid"
	"github.com/sheacloud/cloud-inventory/internal/db"
	"github.com/sheacloud/cloud-inventory/pkg/aws/apigateway"
	"github.com/sheacloud/cloud-inventory/pkg/aws/apigatewayv2"
	"github.com/sheacloud/cloud-inventory/pkg/aws/backup"
	"github.com/sheacloud/cloud-inventory/pkg/aws/cloudtrail"
	"github.com/sheacloud/cloud-inventory/pkg/aws/cloudwatchlogs"
	"github.com/sheacloud/cloud-inventory/pkg/aws/dynamodb"
	"github.com/sheacloud/cloud-inventory/pkg/aws/ec2"
	"github.com/sheacloud/cloud-inventory/pkg/aws/ecs"
	"github.com/sheacloud/cloud-inventory/pkg/aws/efs"
	"github.com/sheacloud/cloud-inventory/pkg/aws/elasticache"
	"github.com/sheacloud/cloud-inventory/pkg/aws/elasticloadbalancing"
	"github.com/sheacloud/cloud-inventory/pkg/aws/elasticloadbalancingv2"
	"github.com/sheacloud/cloud-inventory/pkg/aws/iam"
	"github.com/sheacloud/cloud-inventory/pkg/aws/lambda"
	"github.com/sheacloud/cloud-inventory/pkg/aws/rds"
	"github.com/sheacloud/cloud-inventory/pkg/aws/redshift"
	"github.com/sheacloud/cloud-inventory/pkg/aws/route53"
	"github.com/sheacloud/cloud-inventory/pkg/aws/s3"
	"github.com/sheacloud/cloud-inventory/pkg/aws/sns"
	"github.com/sheacloud/cloud-inventory/pkg/aws/sqs"
	"github.com/sheacloud/cloud-inventory/pkg/aws/storagegateway"
	"github.com/sheacloud/cloud-inventory/pkg/meta"
)

type DynamoDBWriterDAO struct {
	client     *awsDynamoDB.Client
	maxRetries int
}

type DynamoDBReaderDAO struct {
	client     *awsDynamoDB.Client
	maxRetries int
}

func NewDynamoDBWriterDAO(client *awsDynamoDB.Client, maxRetries int) *DynamoDBWriterDAO {
	return &DynamoDBWriterDAO{
		client:     client,
		maxRetries: maxRetries,
	}
}

func NewDynamoDBReaderDAO(client *awsDynamoDB.Client, maxRetries int) *DynamoDBReaderDAO {
	return &DynamoDBReaderDAO{
		client:     client,
		maxRetries: maxRetries,
	}
}

func (dao *DynamoDBWriterDAO) WriteInventoryResults(ctx context.Context, metadata *meta.InventoryResults) error {
	if metadata.InventoryUUID == "" {
		metadata.InventoryUUID = uuid.New().String()
	}
	return WriteItem(ctx, dao.client, dao.maxRetries, "cloud-inventory-inventory-results", metadata)
}

func (dao *DynamoDBWriterDAO) WriteIngestionTimestamp(ctx context.Context, metadata *meta.IngestionTimestamp) error {
	return WriteItem(ctx, dao.client, dao.maxRetries, "cloud-inventory-ingestion-timestamps", metadata)
}

func (dao *DynamoDBWriterDAO) PutAwsApiGatewayRestApis(ctx context.Context, resources []*apigateway.RestApi) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-apigateway-rest-apis", items)
}
func (dao *DynamoDBWriterDAO) PutAwsApiGatewayV2Apis(ctx context.Context, resources []*apigatewayv2.Api) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-apigatewayv2-apis", items)
}
func (dao *DynamoDBWriterDAO) PutAwsBackupBackupVaults(ctx context.Context, resources []*backup.BackupVault) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-backup-vaults", items)
}
func (dao *DynamoDBWriterDAO) PutAwsBackupBackupPlans(ctx context.Context, resources []*backup.BackupPlan) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-backup-plans", items)
}
func (dao *DynamoDBWriterDAO) PutAwsCloudTrailTrails(ctx context.Context, resources []*cloudtrail.Trail) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-cloudtrail-trails", items)
}
func (dao *DynamoDBWriterDAO) PutAwsCloudWatchLogsLogGroups(ctx context.Context, resources []*cloudwatchlogs.LogGroup) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-cloudwatchlogs-log-groups", items)
}
func (dao *DynamoDBWriterDAO) PutAwsDynamoDBTables(ctx context.Context, resources []*dynamodb.Table) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-dynamodb-tables", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2Addresses(ctx context.Context, resources []*ec2.Address) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-addresses", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2DhcpOptions(ctx context.Context, resources []*ec2.DhcpOptions) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-dhcp-options", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2Images(ctx context.Context, resources []*ec2.Image) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-images", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2Instances(ctx context.Context, resources []*ec2.Instance) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-instances", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2InternetGateways(ctx context.Context, resources []*ec2.InternetGateway) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-internet-gateways", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2ManagedPrefixLists(ctx context.Context, resources []*ec2.ManagedPrefixList) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-managed-prefix-lists", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2NatGateways(ctx context.Context, resources []*ec2.NatGateway) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-nat-gateways", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2NetworkAcls(ctx context.Context, resources []*ec2.NetworkAcl) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-network-acls", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2NetworkInterfaces(ctx context.Context, resources []*ec2.NetworkInterface) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-network-interfaces", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2PlacementGroups(ctx context.Context, resources []*ec2.PlacementGroup) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-placement-groups", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2ReservedInstances(ctx context.Context, resources []*ec2.ReservedInstances) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-reserved-instances", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2RouteTables(ctx context.Context, resources []*ec2.RouteTable) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-route-tables", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2SecurityGroups(ctx context.Context, resources []*ec2.SecurityGroup) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-security-groups", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2Subnets(ctx context.Context, resources []*ec2.Subnet) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-subnets", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2TransitGatewayPeeringAttachments(ctx context.Context, resources []*ec2.TransitGatewayPeeringAttachment) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-transit-gateway-peering-attachments", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2TransitGatewayRouteTables(ctx context.Context, resources []*ec2.TransitGatewayRouteTable) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-transit-gateway-route-tables", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2TransitGatewayVpcAttachments(ctx context.Context, resources []*ec2.TransitGatewayVpcAttachment) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-transit-gateway-vpc-attachments", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2TransitGateways(ctx context.Context, resources []*ec2.TransitGateway) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-transit-gateways", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2Volumes(ctx context.Context, resources []*ec2.Volume) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-volumes", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2VpcEndpoints(ctx context.Context, resources []*ec2.VpcEndpoint) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-vpc-endpoints", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2VpcPeeringConnections(ctx context.Context, resources []*ec2.VpcPeeringConnection) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-vpc-peering-connections", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2Vpcs(ctx context.Context, resources []*ec2.Vpc) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-vpcs", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEC2VpnGateways(ctx context.Context, resources []*ec2.VpnGateway) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ec2-vpn-gateways", items)
}
func (dao *DynamoDBWriterDAO) PutAwsECSClusters(ctx context.Context, resources []*ecs.Cluster) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ecs-clusters", items)
}
func (dao *DynamoDBWriterDAO) PutAwsECSServices(ctx context.Context, resources []*ecs.Service) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ecs-services", items)
}
func (dao *DynamoDBWriterDAO) PutAwsECSTasks(ctx context.Context, resources []*ecs.Task) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-ecs-tasks", items)
}
func (dao *DynamoDBWriterDAO) PutAwsEFSFileSystems(ctx context.Context, resources []*efs.FileSystem) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-efs-filesystems", items)
}
func (dao *DynamoDBWriterDAO) PutAwsElastiCacheCacheClusters(ctx context.Context, resources []*elasticache.CacheCluster) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-elasticache-cache-clusters", items)
}
func (dao *DynamoDBWriterDAO) PutAwsElasticLoadBalancingLoadBalancers(ctx context.Context, resources []*elasticloadbalancing.LoadBalancer) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-elasticloadbalancing-load-balancers", items)
}
func (dao *DynamoDBWriterDAO) PutAwsElasticLoadBalancingV2LoadBalancers(ctx context.Context, resources []*elasticloadbalancingv2.LoadBalancer) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-elasticloadbalancingv2-load-balancers", items)
}
func (dao *DynamoDBWriterDAO) PutAwsElasticLoadBalancingV2TargetGroups(ctx context.Context, resources []*elasticloadbalancingv2.TargetGroup) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-elasticloadbalancingv2-target-groups", items)
}
func (dao *DynamoDBWriterDAO) PutAwsIAMGroups(ctx context.Context, resources []*iam.Group) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-iam-groups", items)
}
func (dao *DynamoDBWriterDAO) PutAwsIAMPolicies(ctx context.Context, resources []*iam.Policy) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-iam-policies", items)
}
func (dao *DynamoDBWriterDAO) PutAwsIAMRoles(ctx context.Context, resources []*iam.Role) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-iam-roles", items)
}
func (dao *DynamoDBWriterDAO) PutAwsIAMUsers(ctx context.Context, resources []*iam.User) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-iam-users", items)
}
func (dao *DynamoDBWriterDAO) PutAwsLambdaFunctions(ctx context.Context, resources []*lambda.Function) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-lambda-functions", items)
}
func (dao *DynamoDBWriterDAO) PutAwsRDSDBClusters(ctx context.Context, resources []*rds.DBCluster) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-rds-db-clusters", items)
}
func (dao *DynamoDBWriterDAO) PutAwsRDSDBInstances(ctx context.Context, resources []*rds.DBInstance) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-rds-db-instances", items)
}
func (dao *DynamoDBWriterDAO) PutAwsRedshiftClusters(ctx context.Context, resources []*redshift.Cluster) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-redshift-clusters", items)
}
func (dao *DynamoDBWriterDAO) PutAwsRoute53HostedZones(ctx context.Context, resources []*route53.HostedZone) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-route53-hosted-zones", items)
}
func (dao *DynamoDBWriterDAO) PutAwsS3Buckets(ctx context.Context, resources []*s3.Bucket) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-s3-buckets", items)
}
func (dao *DynamoDBWriterDAO) PutAwsSNSTopics(ctx context.Context, resources []*sns.Topic) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-sns-topics", items)
}
func (dao *DynamoDBWriterDAO) PutAwsSNSSubscriptions(ctx context.Context, resources []*sns.Subscription) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-sns-subscriptions", items)
}
func (dao *DynamoDBWriterDAO) PutAwsSQSQueues(ctx context.Context, resources []*sqs.Queue) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-sqs-queues", items)
}
func (dao *DynamoDBWriterDAO) PutAwsStorageGatewayGateways(ctx context.Context, resources []*storagegateway.Gateway) error {
	items := make([]map[string]types.AttributeValue, len(resources))
	for i, resource := range resources {
		item, err := attributevalue.MarshalMap(resource)
		if err != nil {
			return err
		}
		items[i] = item
	}
	return BatchWriteItems(ctx, dao.client, dao.maxRetries, "cloud-inventory-aws-storagegateway-gateways", items)
}

func (dao *DynamoDBReaderDAO) ListAwsApiGatewayRestApis(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*apigateway.RestApi, error) {
	tableName := "cloud-inventory-aws-apigateway-rest-apis"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*apigateway.RestApi
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsApiGatewayRestApi(ctx context.Context, reportTimeUnixMilli int64, id string) (*apigateway.RestApi, error) {
	tableName := "cloud-inventory-aws-apigateway-rest-apis"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "id")
	if err != nil {
		return nil, err
	}
	var resource *apigateway.RestApi
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsApiGatewayRestApiReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "apigateway", "rest_apis")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsApiGatewayRestApiReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "apigateway", "rest_apis")
}

func (dao *DynamoDBReaderDAO) ListAwsApiGatewayV2Apis(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*apigatewayv2.Api, error) {
	tableName := "cloud-inventory-aws-apigatewayv2-apis"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "api_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*apigatewayv2.Api
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsApiGatewayV2Api(ctx context.Context, reportTimeUnixMilli int64, id string) (*apigatewayv2.Api, error) {
	tableName := "cloud-inventory-aws-apigatewayv2-apis"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "api_id")
	if err != nil {
		return nil, err
	}
	var resource *apigatewayv2.Api
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsApiGatewayV2ApiReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "apigatewayv2", "apis")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsApiGatewayV2ApiReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "apigatewayv2", "apis")
}

func (dao *DynamoDBReaderDAO) ListAwsBackupBackupVaults(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*backup.BackupVault, error) {
	tableName := "cloud-inventory-aws-backup-vaults"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "backup_vault_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*backup.BackupVault
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsBackupBackupVault(ctx context.Context, reportTimeUnixMilli int64, id string) (*backup.BackupVault, error) {
	tableName := "cloud-inventory-aws-backup-vaults"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "backup_vault_arn")
	if err != nil {
		return nil, err
	}
	var resource *backup.BackupVault
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsBackupBackupVaultReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "backup", "vaults")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsBackupBackupVaultReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "backup", "vaults")
}

func (dao *DynamoDBReaderDAO) ListAwsBackupBackupPlans(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*backup.BackupPlan, error) {
	tableName := "cloud-inventory-aws-backup-plans"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "backup_plan_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*backup.BackupPlan
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsBackupBackupPlan(ctx context.Context, reportTimeUnixMilli int64, id string) (*backup.BackupPlan, error) {
	tableName := "cloud-inventory-aws-backup-plans"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "backup_plan_arn")
	if err != nil {
		return nil, err
	}
	var resource *backup.BackupPlan
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsBackupBackupPlanReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "backup", "plans")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsBackupBackupPlanReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "backup", "plans")
}

func (dao *DynamoDBReaderDAO) ListAwsCloudTrailTrails(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*cloudtrail.Trail, error) {
	tableName := "cloud-inventory-aws-cloudtrail-trails"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "trail_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*cloudtrail.Trail
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsCloudTrailTrail(ctx context.Context, reportTimeUnixMilli int64, id string) (*cloudtrail.Trail, error) {
	tableName := "cloud-inventory-aws-cloudtrail-trails"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "trail_arn")
	if err != nil {
		return nil, err
	}
	var resource *cloudtrail.Trail
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsCloudTrailTrailReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "cloudtrail", "trails")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsCloudTrailTrailReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "cloudtrail", "trails")
}

func (dao *DynamoDBReaderDAO) ListAwsCloudWatchLogsLogGroups(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*cloudwatchlogs.LogGroup, error) {
	tableName := "cloud-inventory-aws-cloudwatchlogs-log-groups"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*cloudwatchlogs.LogGroup
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsCloudWatchLogsLogGroup(ctx context.Context, reportTimeUnixMilli int64, id string) (*cloudwatchlogs.LogGroup, error) {
	tableName := "cloud-inventory-aws-cloudwatchlogs-log-groups"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "arn")
	if err != nil {
		return nil, err
	}
	var resource *cloudwatchlogs.LogGroup
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsCloudWatchLogsLogGroupReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "cloudwatchlogs", "log_groups")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsCloudWatchLogsLogGroupReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "cloudwatchlogs", "log_groups")
}

func (dao *DynamoDBReaderDAO) ListAwsDynamoDBTables(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*dynamodb.Table, error) {
	tableName := "cloud-inventory-aws-dynamodb-tables"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "table_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*dynamodb.Table
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsDynamoDBTable(ctx context.Context, reportTimeUnixMilli int64, id string) (*dynamodb.Table, error) {
	tableName := "cloud-inventory-aws-dynamodb-tables"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "table_arn")
	if err != nil {
		return nil, err
	}
	var resource *dynamodb.Table
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsDynamoDBTableReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "dynamodb", "tables")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsDynamoDBTableReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "dynamodb", "tables")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2Addresses(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.Address, error) {
	tableName := "cloud-inventory-aws-ec2-addresses"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "allocation_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.Address
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2Address(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.Address, error) {
	tableName := "cloud-inventory-aws-ec2-addresses"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "allocation_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.Address
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2AddressReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "addresses")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2AddressReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "addresses")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2DhcpOptions(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.DhcpOptions, error) {
	tableName := "cloud-inventory-aws-ec2-dhcp-options"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "dhcp_options_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.DhcpOptions
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2DhcpOptions(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.DhcpOptions, error) {
	tableName := "cloud-inventory-aws-ec2-dhcp-options"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "dhcp_options_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.DhcpOptions
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2DhcpOptionsReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "dhcp_options")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2DhcpOptionsReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "dhcp_options")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2Images(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.Image, error) {
	tableName := "cloud-inventory-aws-ec2-images"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "image_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.Image
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2Image(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.Image, error) {
	tableName := "cloud-inventory-aws-ec2-images"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "image_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.Image
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2ImageReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "images")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2ImageReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "images")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2Instances(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.Instance, error) {
	tableName := "cloud-inventory-aws-ec2-instances"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "instance_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.Instance
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2Instance(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.Instance, error) {
	tableName := "cloud-inventory-aws-ec2-instances"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "instance_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.Instance
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2InstanceReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "instances")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2InstanceReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "instances")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2InternetGateways(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.InternetGateway, error) {
	tableName := "cloud-inventory-aws-ec2-internet-gateways"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "internet_gateway_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.InternetGateway
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2InternetGateway(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.InternetGateway, error) {
	tableName := "cloud-inventory-aws-ec2-internet-gateways"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "internet_gateway_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.InternetGateway
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2InternetGatewayReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "internet_gateways")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2InternetGatewayReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "internet_gateways")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2ManagedPrefixLists(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.ManagedPrefixList, error) {
	tableName := "cloud-inventory-aws-ec2-managed-prefix-lists"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "prefix_list_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.ManagedPrefixList
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2ManagedPrefixList(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.ManagedPrefixList, error) {
	tableName := "cloud-inventory-aws-ec2-managed-prefix-lists"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "prefix_list_arn")
	if err != nil {
		return nil, err
	}
	var resource *ec2.ManagedPrefixList
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2ManagedPrefixListReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "managed_prefix_lists")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2ManagedPrefixListReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "managed_prefix_lists")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2NatGateways(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.NatGateway, error) {
	tableName := "cloud-inventory-aws-ec2-nat-gateways"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "nat_gateway_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.NatGateway
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2NatGateway(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.NatGateway, error) {
	tableName := "cloud-inventory-aws-ec2-nat-gateways"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "nat_gateway_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.NatGateway
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2NatGatewayReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "nat_gateways")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2NatGatewayReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "nat_gateways")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2NetworkAcls(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.NetworkAcl, error) {
	tableName := "cloud-inventory-aws-ec2-network-acls"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "network_acl_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.NetworkAcl
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2NetworkAcl(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.NetworkAcl, error) {
	tableName := "cloud-inventory-aws-ec2-network-acls"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "network_acl_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.NetworkAcl
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2NetworkAclReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "network_acls")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2NetworkAclReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "network_acls")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2NetworkInterfaces(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.NetworkInterface, error) {
	tableName := "cloud-inventory-aws-ec2-network-interfaces"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "network_interface_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.NetworkInterface
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2NetworkInterface(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.NetworkInterface, error) {
	tableName := "cloud-inventory-aws-ec2-network-interfaces"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "network_interface_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.NetworkInterface
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2NetworkInterfaceReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "network_interfaces")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2NetworkInterfaceReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "network_interfaces")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2PlacementGroups(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.PlacementGroup, error) {
	tableName := "cloud-inventory-aws-ec2-placement-groups"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "group_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.PlacementGroup
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2PlacementGroup(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.PlacementGroup, error) {
	tableName := "cloud-inventory-aws-ec2-placement-groups"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "group_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.PlacementGroup
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2PlacementGroupReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "placement_groups")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2PlacementGroupReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "placement_groups")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2ReservedInstances(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.ReservedInstances, error) {
	tableName := "cloud-inventory-aws-ec2-reserved-instances"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "reserved_instances_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.ReservedInstances
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2ReservedInstances(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.ReservedInstances, error) {
	tableName := "cloud-inventory-aws-ec2-reserved-instances"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "reserved_instances_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.ReservedInstances
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2ReservedInstancesReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "reserved_instances")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2ReservedInstancesReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "reserved_instances")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2RouteTables(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.RouteTable, error) {
	tableName := "cloud-inventory-aws-ec2-route-tables"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "route_table_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.RouteTable
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2RouteTable(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.RouteTable, error) {
	tableName := "cloud-inventory-aws-ec2-route-tables"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "route_table_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.RouteTable
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2RouteTableReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "route_tables")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2RouteTableReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "route_tables")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2SecurityGroups(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.SecurityGroup, error) {
	tableName := "cloud-inventory-aws-ec2-security-groups"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "group_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.SecurityGroup
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2SecurityGroup(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.SecurityGroup, error) {
	tableName := "cloud-inventory-aws-ec2-security-groups"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "group_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.SecurityGroup
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2SecurityGroupReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "security_groups")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2SecurityGroupReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "security_groups")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2Subnets(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.Subnet, error) {
	tableName := "cloud-inventory-aws-ec2-subnets"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "subnet_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.Subnet
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2Subnet(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.Subnet, error) {
	tableName := "cloud-inventory-aws-ec2-subnets"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "subnet_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.Subnet
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2SubnetReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "subnets")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2SubnetReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "subnets")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2TransitGatewayPeeringAttachments(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.TransitGatewayPeeringAttachment, error) {
	tableName := "cloud-inventory-aws-ec2-transit-gateway-peering-attachments"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "transit_gateway_attachment_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.TransitGatewayPeeringAttachment
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2TransitGatewayPeeringAttachment(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.TransitGatewayPeeringAttachment, error) {
	tableName := "cloud-inventory-aws-ec2-transit-gateway-peering-attachments"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "transit_gateway_attachment_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.TransitGatewayPeeringAttachment
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2TransitGatewayPeeringAttachmentReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "transit_gateway_peering_attachments")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2TransitGatewayPeeringAttachmentReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "transit_gateway_peering_attachments")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2TransitGatewayRouteTables(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.TransitGatewayRouteTable, error) {
	tableName := "cloud-inventory-aws-ec2-transit-gateway-route-tables"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "transit_gateway_route_table_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.TransitGatewayRouteTable
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2TransitGatewayRouteTable(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.TransitGatewayRouteTable, error) {
	tableName := "cloud-inventory-aws-ec2-transit-gateway-route-tables"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "transit_gateway_route_table_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.TransitGatewayRouteTable
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2TransitGatewayRouteTableReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "transit_gateway_route_tables")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2TransitGatewayRouteTableReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "transit_gateway_route_tables")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2TransitGatewayVpcAttachments(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.TransitGatewayVpcAttachment, error) {
	tableName := "cloud-inventory-aws-ec2-transit-gateway-vpc-attachments"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "transit_gateway_attachment_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.TransitGatewayVpcAttachment
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2TransitGatewayVpcAttachment(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.TransitGatewayVpcAttachment, error) {
	tableName := "cloud-inventory-aws-ec2-transit-gateway-vpc-attachments"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "transit_gateway_attachment_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.TransitGatewayVpcAttachment
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2TransitGatewayVpcAttachmentReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "transit_gateway_vpc_attachments")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2TransitGatewayVpcAttachmentReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "transit_gateway_vpc_attachments")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2TransitGateways(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.TransitGateway, error) {
	tableName := "cloud-inventory-aws-ec2-transit-gateways"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "transit_gateway_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.TransitGateway
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2TransitGateway(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.TransitGateway, error) {
	tableName := "cloud-inventory-aws-ec2-transit-gateways"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "transit_gateway_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.TransitGateway
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2TransitGatewayReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "transit_gateways")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2TransitGatewayReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "transit_gateways")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2Volumes(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.Volume, error) {
	tableName := "cloud-inventory-aws-ec2-volumes"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "volume_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.Volume
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2Volume(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.Volume, error) {
	tableName := "cloud-inventory-aws-ec2-volumes"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "volume_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.Volume
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2VolumeReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "volumes")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2VolumeReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "volumes")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2VpcEndpoints(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.VpcEndpoint, error) {
	tableName := "cloud-inventory-aws-ec2-vpc-endpoints"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "vpc_endpoint_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.VpcEndpoint
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2VpcEndpoint(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.VpcEndpoint, error) {
	tableName := "cloud-inventory-aws-ec2-vpc-endpoints"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "vpc_endpoint_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.VpcEndpoint
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2VpcEndpointReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "vpc_endpoints")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2VpcEndpointReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "vpc_endpoints")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2VpcPeeringConnections(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.VpcPeeringConnection, error) {
	tableName := "cloud-inventory-aws-ec2-vpc-peering-connections"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "vpc_peering_connection_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.VpcPeeringConnection
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2VpcPeeringConnection(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.VpcPeeringConnection, error) {
	tableName := "cloud-inventory-aws-ec2-vpc-peering-connections"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "vpc_peering_connection_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.VpcPeeringConnection
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2VpcPeeringConnectionReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "vpc_peering_connections")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2VpcPeeringConnectionReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "vpc_peering_connections")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2Vpcs(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.Vpc, error) {
	tableName := "cloud-inventory-aws-ec2-vpcs"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "vpc_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.Vpc
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2Vpc(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.Vpc, error) {
	tableName := "cloud-inventory-aws-ec2-vpcs"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "vpc_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.Vpc
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2VpcReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "vpcs")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2VpcReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "vpcs")
}

func (dao *DynamoDBReaderDAO) ListAwsEC2VpnGateways(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ec2.VpnGateway, error) {
	tableName := "cloud-inventory-aws-ec2-vpn-gateways"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "vpn_gateway_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ec2.VpnGateway
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2VpnGateway(ctx context.Context, reportTimeUnixMilli int64, id string) (*ec2.VpnGateway, error) {
	tableName := "cloud-inventory-aws-ec2-vpn-gateways"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "vpn_gateway_id")
	if err != nil {
		return nil, err
	}
	var resource *ec2.VpnGateway
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEC2VpnGatewayReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ec2", "vpn_gateways")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEC2VpnGatewayReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ec2", "vpn_gateways")
}

func (dao *DynamoDBReaderDAO) ListAwsECSClusters(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ecs.Cluster, error) {
	tableName := "cloud-inventory-aws-ecs-clusters"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "cluster_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ecs.Cluster
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsECSCluster(ctx context.Context, reportTimeUnixMilli int64, id string) (*ecs.Cluster, error) {
	tableName := "cloud-inventory-aws-ecs-clusters"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "cluster_arn")
	if err != nil {
		return nil, err
	}
	var resource *ecs.Cluster
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsECSClusterReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ecs", "clusters")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsECSClusterReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ecs", "clusters")
}

func (dao *DynamoDBReaderDAO) ListAwsECSServices(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ecs.Service, error) {
	tableName := "cloud-inventory-aws-ecs-services"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "service_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ecs.Service
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsECSService(ctx context.Context, reportTimeUnixMilli int64, id string) (*ecs.Service, error) {
	tableName := "cloud-inventory-aws-ecs-services"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "service_arn")
	if err != nil {
		return nil, err
	}
	var resource *ecs.Service
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsECSServiceReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ecs", "services")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsECSServiceReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ecs", "services")
}

func (dao *DynamoDBReaderDAO) ListAwsECSTasks(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*ecs.Task, error) {
	tableName := "cloud-inventory-aws-ecs-tasks"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "task_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*ecs.Task
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsECSTask(ctx context.Context, reportTimeUnixMilli int64, id string) (*ecs.Task, error) {
	tableName := "cloud-inventory-aws-ecs-tasks"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "task_arn")
	if err != nil {
		return nil, err
	}
	var resource *ecs.Task
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsECSTaskReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "ecs", "tasks")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsECSTaskReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "ecs", "tasks")
}

func (dao *DynamoDBReaderDAO) ListAwsEFSFileSystems(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*efs.FileSystem, error) {
	tableName := "cloud-inventory-aws-efs-filesystems"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "file_system_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*efs.FileSystem
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEFSFileSystem(ctx context.Context, reportTimeUnixMilli int64, id string) (*efs.FileSystem, error) {
	tableName := "cloud-inventory-aws-efs-filesystems"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "file_system_id")
	if err != nil {
		return nil, err
	}
	var resource *efs.FileSystem
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsEFSFileSystemReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "efs", "filesystems")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsEFSFileSystemReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "efs", "filesystems")
}

func (dao *DynamoDBReaderDAO) ListAwsElastiCacheCacheClusters(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*elasticache.CacheCluster, error) {
	tableName := "cloud-inventory-aws-elasticache-cache-clusters"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*elasticache.CacheCluster
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsElastiCacheCacheCluster(ctx context.Context, reportTimeUnixMilli int64, id string) (*elasticache.CacheCluster, error) {
	tableName := "cloud-inventory-aws-elasticache-cache-clusters"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "arn")
	if err != nil {
		return nil, err
	}
	var resource *elasticache.CacheCluster
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsElastiCacheCacheClusterReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "elasticache", "cache_clusters")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsElastiCacheCacheClusterReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "elasticache", "cache_clusters")
}

func (dao *DynamoDBReaderDAO) ListAwsElasticLoadBalancingLoadBalancers(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*elasticloadbalancing.LoadBalancer, error) {
	tableName := "cloud-inventory-aws-elasticloadbalancing-load-balancers"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "load_balancer_name", nil)
	if err != nil {
		return nil, err
	}
	var resources []*elasticloadbalancing.LoadBalancer
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsElasticLoadBalancingLoadBalancer(ctx context.Context, reportTimeUnixMilli int64, id string) (*elasticloadbalancing.LoadBalancer, error) {
	tableName := "cloud-inventory-aws-elasticloadbalancing-load-balancers"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "load_balancer_name")
	if err != nil {
		return nil, err
	}
	var resource *elasticloadbalancing.LoadBalancer
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsElasticLoadBalancingLoadBalancerReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "elasticloadbalancing", "load_balancers")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsElasticLoadBalancingLoadBalancerReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "elasticloadbalancing", "load_balancers")
}

func (dao *DynamoDBReaderDAO) ListAwsElasticLoadBalancingV2LoadBalancers(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*elasticloadbalancingv2.LoadBalancer, error) {
	tableName := "cloud-inventory-aws-elasticloadbalancingv2-load-balancers"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "load_balancer_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*elasticloadbalancingv2.LoadBalancer
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsElasticLoadBalancingV2LoadBalancer(ctx context.Context, reportTimeUnixMilli int64, id string) (*elasticloadbalancingv2.LoadBalancer, error) {
	tableName := "cloud-inventory-aws-elasticloadbalancingv2-load-balancers"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "load_balancer_arn")
	if err != nil {
		return nil, err
	}
	var resource *elasticloadbalancingv2.LoadBalancer
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsElasticLoadBalancingV2LoadBalancerReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "elasticloadbalancingv2", "load_balancers")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsElasticLoadBalancingV2LoadBalancerReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "elasticloadbalancingv2", "load_balancers")
}

func (dao *DynamoDBReaderDAO) ListAwsElasticLoadBalancingV2TargetGroups(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*elasticloadbalancingv2.TargetGroup, error) {
	tableName := "cloud-inventory-aws-elasticloadbalancingv2-target-groups"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "target_group_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*elasticloadbalancingv2.TargetGroup
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsElasticLoadBalancingV2TargetGroup(ctx context.Context, reportTimeUnixMilli int64, id string) (*elasticloadbalancingv2.TargetGroup, error) {
	tableName := "cloud-inventory-aws-elasticloadbalancingv2-target-groups"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "target_group_arn")
	if err != nil {
		return nil, err
	}
	var resource *elasticloadbalancingv2.TargetGroup
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsElasticLoadBalancingV2TargetGroupReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "elasticloadbalancingv2", "target_groups")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsElasticLoadBalancingV2TargetGroupReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "elasticloadbalancingv2", "target_groups")
}

func (dao *DynamoDBReaderDAO) ListAwsIAMGroups(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*iam.Group, error) {
	tableName := "cloud-inventory-aws-iam-groups"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "group_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*iam.Group
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsIAMGroup(ctx context.Context, reportTimeUnixMilli int64, id string) (*iam.Group, error) {
	tableName := "cloud-inventory-aws-iam-groups"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "group_id")
	if err != nil {
		return nil, err
	}
	var resource *iam.Group
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsIAMGroupReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "iam", "groups")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsIAMGroupReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "iam", "groups")
}

func (dao *DynamoDBReaderDAO) ListAwsIAMPolicies(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*iam.Policy, error) {
	tableName := "cloud-inventory-aws-iam-policies"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "policy_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*iam.Policy
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsIAMPolicy(ctx context.Context, reportTimeUnixMilli int64, id string) (*iam.Policy, error) {
	tableName := "cloud-inventory-aws-iam-policies"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "policy_id")
	if err != nil {
		return nil, err
	}
	var resource *iam.Policy
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsIAMPolicyReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "iam", "policies")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsIAMPolicyReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "iam", "policies")
}

func (dao *DynamoDBReaderDAO) ListAwsIAMRoles(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*iam.Role, error) {
	tableName := "cloud-inventory-aws-iam-roles"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "role_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*iam.Role
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsIAMRole(ctx context.Context, reportTimeUnixMilli int64, id string) (*iam.Role, error) {
	tableName := "cloud-inventory-aws-iam-roles"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "role_id")
	if err != nil {
		return nil, err
	}
	var resource *iam.Role
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsIAMRoleReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "iam", "roles")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsIAMRoleReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "iam", "roles")
}

func (dao *DynamoDBReaderDAO) ListAwsIAMUsers(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*iam.User, error) {
	tableName := "cloud-inventory-aws-iam-users"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "user_id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*iam.User
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsIAMUser(ctx context.Context, reportTimeUnixMilli int64, id string) (*iam.User, error) {
	tableName := "cloud-inventory-aws-iam-users"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "user_id")
	if err != nil {
		return nil, err
	}
	var resource *iam.User
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsIAMUserReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "iam", "users")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsIAMUserReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "iam", "users")
}

func (dao *DynamoDBReaderDAO) ListAwsLambdaFunctions(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*lambda.Function, error) {
	tableName := "cloud-inventory-aws-lambda-functions"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "function_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*lambda.Function
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsLambdaFunction(ctx context.Context, reportTimeUnixMilli int64, id string) (*lambda.Function, error) {
	tableName := "cloud-inventory-aws-lambda-functions"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "function_arn")
	if err != nil {
		return nil, err
	}
	var resource *lambda.Function
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsLambdaFunctionReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "lambda", "functions")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsLambdaFunctionReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "lambda", "functions")
}

func (dao *DynamoDBReaderDAO) ListAwsRDSDBClusters(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*rds.DBCluster, error) {
	tableName := "cloud-inventory-aws-rds-db-clusters"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "db_cluster_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*rds.DBCluster
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsRDSDBCluster(ctx context.Context, reportTimeUnixMilli int64, id string) (*rds.DBCluster, error) {
	tableName := "cloud-inventory-aws-rds-db-clusters"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "db_cluster_arn")
	if err != nil {
		return nil, err
	}
	var resource *rds.DBCluster
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsRDSDBClusterReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "rds", "db_clusters")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsRDSDBClusterReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "rds", "db_clusters")
}

func (dao *DynamoDBReaderDAO) ListAwsRDSDBInstances(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*rds.DBInstance, error) {
	tableName := "cloud-inventory-aws-rds-db-instances"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "db_instance_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*rds.DBInstance
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsRDSDBInstance(ctx context.Context, reportTimeUnixMilli int64, id string) (*rds.DBInstance, error) {
	tableName := "cloud-inventory-aws-rds-db-instances"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "db_instance_arn")
	if err != nil {
		return nil, err
	}
	var resource *rds.DBInstance
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsRDSDBInstanceReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "rds", "db_instances")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsRDSDBInstanceReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "rds", "db_instances")
}

func (dao *DynamoDBReaderDAO) ListAwsRedshiftClusters(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*redshift.Cluster, error) {
	tableName := "cloud-inventory-aws-redshift-clusters"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "cluster_identifier", nil)
	if err != nil {
		return nil, err
	}
	var resources []*redshift.Cluster
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsRedshiftCluster(ctx context.Context, reportTimeUnixMilli int64, id string) (*redshift.Cluster, error) {
	tableName := "cloud-inventory-aws-redshift-clusters"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "cluster_identifier")
	if err != nil {
		return nil, err
	}
	var resource *redshift.Cluster
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsRedshiftClusterReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "redshift", "clusters")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsRedshiftClusterReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "redshift", "clusters")
}

func (dao *DynamoDBReaderDAO) ListAwsRoute53HostedZones(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*route53.HostedZone, error) {
	tableName := "cloud-inventory-aws-route53-hosted-zones"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "id", nil)
	if err != nil {
		return nil, err
	}
	var resources []*route53.HostedZone
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsRoute53HostedZone(ctx context.Context, reportTimeUnixMilli int64, id string) (*route53.HostedZone, error) {
	tableName := "cloud-inventory-aws-route53-hosted-zones"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "id")
	if err != nil {
		return nil, err
	}
	var resource *route53.HostedZone
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsRoute53HostedZoneReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "route53", "hosted_zones")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsRoute53HostedZoneReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "route53", "hosted_zones")
}

func (dao *DynamoDBReaderDAO) ListAwsS3Buckets(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*s3.Bucket, error) {
	tableName := "cloud-inventory-aws-s3-buckets"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "name", nil)
	if err != nil {
		return nil, err
	}
	var resources []*s3.Bucket
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsS3Bucket(ctx context.Context, reportTimeUnixMilli int64, id string) (*s3.Bucket, error) {
	tableName := "cloud-inventory-aws-s3-buckets"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "name")
	if err != nil {
		return nil, err
	}
	var resource *s3.Bucket
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsS3BucketReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "s3", "buckets")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsS3BucketReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "s3", "buckets")
}

func (dao *DynamoDBReaderDAO) ListAwsSNSTopics(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*sns.Topic, error) {
	tableName := "cloud-inventory-aws-sns-topics"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "topic_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*sns.Topic
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsSNSTopic(ctx context.Context, reportTimeUnixMilli int64, id string) (*sns.Topic, error) {
	tableName := "cloud-inventory-aws-sns-topics"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "topic_arn")
	if err != nil {
		return nil, err
	}
	var resource *sns.Topic
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsSNSTopicReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "sns", "topics")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsSNSTopicReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "sns", "topics")
}

func (dao *DynamoDBReaderDAO) ListAwsSNSSubscriptions(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*sns.Subscription, error) {
	tableName := "cloud-inventory-aws-sns-subscriptions"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "subscription_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*sns.Subscription
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsSNSSubscription(ctx context.Context, reportTimeUnixMilli int64, id string) (*sns.Subscription, error) {
	tableName := "cloud-inventory-aws-sns-subscriptions"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "subscription_arn")
	if err != nil {
		return nil, err
	}
	var resource *sns.Subscription
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsSNSSubscriptionReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "sns", "subscriptions")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsSNSSubscriptionReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "sns", "subscriptions")
}

func (dao *DynamoDBReaderDAO) ListAwsSQSQueues(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*sqs.Queue, error) {
	tableName := "cloud-inventory-aws-sqs-queues"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "queue_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*sqs.Queue
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsSQSQueue(ctx context.Context, reportTimeUnixMilli int64, id string) (*sqs.Queue, error) {
	tableName := "cloud-inventory-aws-sqs-queues"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "queue_arn")
	if err != nil {
		return nil, err
	}
	var resource *sqs.Queue
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsSQSQueueReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "sqs", "queues")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsSQSQueueReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "sqs", "queues")
}

func (dao *DynamoDBReaderDAO) ListAwsStorageGatewayGateways(ctx context.Context, reportTimeUnixMilli int64, accountID, region *string, limit, offset *int64) ([]*storagegateway.Gateway, error) {
	tableName := "cloud-inventory-aws-storagegateway-gateways"
	items, _, err := ListItems(ctx, dao.client, tableName, reportTimeUnixMilli, "gateway_arn", nil)
	if err != nil {
		return nil, err
	}
	var resources []*storagegateway.Gateway
	err = attributevalue.UnmarshalListOfMaps(items, &resources)
	if err != nil {
		return nil, err
	}
	return resources, nil
}

func (dao *DynamoDBReaderDAO) GetAwsStorageGatewayGateway(ctx context.Context, reportTimeUnixMilli int64, id string) (*storagegateway.Gateway, error) {
	tableName := "cloud-inventory-aws-storagegateway-gateways"
	item, err := GetItem(ctx, dao.client, tableName, reportTimeUnixMilli, id, "gateway_arn")
	if err != nil {
		return nil, err
	}
	var resource *storagegateway.Gateway
	err = attributevalue.UnmarshalMap(item, &resource)
	if err != nil {
		return nil, err
	}
	return resource, nil
}

func (dao *DynamoDBReaderDAO) GetAwsStorageGatewayGatewayReportTimes(ctx context.Context, reportDateUnixMilli int64) ([]int64, error) {
	return DistinctReportTimes(ctx, dao.client, reportDateUnixMilli, "aws", "storagegateway", "gateways")
}

func (dao *DynamoDBReaderDAO) GetReferencedAwsStorageGatewayGatewayReportTime(ctx context.Context, reportDateUnixMilli int64, timeSelection db.TimeSelection, timeReferenceUnixMilli int64) (*int64, error) {
	return GetReportTime(ctx, dao.client, reportDateUnixMilli, timeSelection, timeReferenceUnixMilli, "aws", "storagegateway", "gateways")
}

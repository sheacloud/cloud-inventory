//AUTOGENERATED CODE DO NOT EDIT
package db

import (
	"context"
	"github.com/sheacloud/cloud-inventory/pkg/aws/apigateway"
	"github.com/sheacloud/cloud-inventory/pkg/aws/apigatewayv2"
	"github.com/sheacloud/cloud-inventory/pkg/aws/backup"
	"github.com/sheacloud/cloud-inventory/pkg/aws/cloudtrail"
	"github.com/sheacloud/cloud-inventory/pkg/aws/cloudwatchlogs"
	"github.com/sheacloud/cloud-inventory/pkg/aws/dynamodb"
	"github.com/sheacloud/cloud-inventory/pkg/aws/ec2"
	"github.com/sheacloud/cloud-inventory/pkg/aws/ecs"
	"github.com/sheacloud/cloud-inventory/pkg/aws/efs"
	"github.com/sheacloud/cloud-inventory/pkg/aws/elasticache"
	"github.com/sheacloud/cloud-inventory/pkg/aws/elasticloadbalancing"
	"github.com/sheacloud/cloud-inventory/pkg/aws/elasticloadbalancingv2"
	"github.com/sheacloud/cloud-inventory/pkg/aws/iam"
	"github.com/sheacloud/cloud-inventory/pkg/aws/lambda"
	"github.com/sheacloud/cloud-inventory/pkg/aws/rds"
	"github.com/sheacloud/cloud-inventory/pkg/aws/redshift"
	"github.com/sheacloud/cloud-inventory/pkg/aws/route53"
	"github.com/sheacloud/cloud-inventory/pkg/aws/s3"
	"github.com/sheacloud/cloud-inventory/pkg/aws/sns"
	"github.com/sheacloud/cloud-inventory/pkg/aws/sqs"
	"github.com/sheacloud/cloud-inventory/pkg/aws/storagegateway"
	"time"
)

type AWSDAO interface {
	ApiGateway() ApiGatewayDAO
	ApiGatewayV2() ApiGatewayV2DAO
	Backup() BackupDAO
	CloudTrail() CloudTrailDAO
	CloudWatchLogs() CloudWatchLogsDAO
	DynamoDB() DynamoDBDAO
	EC2() EC2DAO
	ECS() ECSDAO
	EFS() EFSDAO
	ElastiCache() ElastiCacheDAO
	ElasticLoadBalancing() ElasticLoadBalancingDAO
	ElasticLoadBalancingV2() ElasticLoadBalancingV2DAO
	IAM() IAMDAO
	Lambda() LambdaDAO
	RDS() RDSDAO
	Redshift() RedshiftDAO
	Route53() Route53DAO
	S3() S3DAO
	SNS() SNSDAO
	SQS() SQSDAO
	StorageGateway() StorageGatewayDAO
}

type ApiGatewayDAO interface {
	ListRestApis(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*apigateway.RestApi, error)
	GetRestApi(ctx context.Context, reportTime time.Time, id string) (*apigateway.RestApi, error)
	PutRestApis(ctx context.Context, resources []*apigateway.RestApi) error
	GetRestApiReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedRestApiReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type ApiGatewayV2DAO interface {
	ListApis(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*apigatewayv2.Api, error)
	GetApi(ctx context.Context, reportTime time.Time, id string) (*apigatewayv2.Api, error)
	PutApis(ctx context.Context, resources []*apigatewayv2.Api) error
	GetApiReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedApiReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type BackupDAO interface {
	ListBackupVaults(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*backup.BackupVault, error)
	GetBackupVault(ctx context.Context, reportTime time.Time, id string) (*backup.BackupVault, error)
	PutBackupVaults(ctx context.Context, resources []*backup.BackupVault) error
	GetBackupVaultReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedBackupVaultReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListBackupPlans(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*backup.BackupPlan, error)
	GetBackupPlan(ctx context.Context, reportTime time.Time, id string) (*backup.BackupPlan, error)
	PutBackupPlans(ctx context.Context, resources []*backup.BackupPlan) error
	GetBackupPlanReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedBackupPlanReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type CloudTrailDAO interface {
	ListTrails(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*cloudtrail.Trail, error)
	GetTrail(ctx context.Context, reportTime time.Time, id string) (*cloudtrail.Trail, error)
	PutTrails(ctx context.Context, resources []*cloudtrail.Trail) error
	GetTrailReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedTrailReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type CloudWatchLogsDAO interface {
	ListLogGroups(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*cloudwatchlogs.LogGroup, error)
	GetLogGroup(ctx context.Context, reportTime time.Time, id string) (*cloudwatchlogs.LogGroup, error)
	PutLogGroups(ctx context.Context, resources []*cloudwatchlogs.LogGroup) error
	GetLogGroupReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedLogGroupReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type DynamoDBDAO interface {
	ListTables(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*dynamodb.Table, error)
	GetTable(ctx context.Context, reportTime time.Time, id string) (*dynamodb.Table, error)
	PutTables(ctx context.Context, resources []*dynamodb.Table) error
	GetTableReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedTableReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type EC2DAO interface {
	ListAddresses(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.Address, error)
	GetAddress(ctx context.Context, reportTime time.Time, id string) (*ec2.Address, error)
	PutAddresses(ctx context.Context, resources []*ec2.Address) error
	GetAddressReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedAddressReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListDhcpOptions(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.DhcpOptions, error)
	GetDhcpOptions(ctx context.Context, reportTime time.Time, id string) (*ec2.DhcpOptions, error)
	PutDhcpOptions(ctx context.Context, resources []*ec2.DhcpOptions) error
	GetDhcpOptionsReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedDhcpOptionsReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListImages(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.Image, error)
	GetImage(ctx context.Context, reportTime time.Time, id string) (*ec2.Image, error)
	PutImages(ctx context.Context, resources []*ec2.Image) error
	GetImageReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedImageReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListInstances(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.Instance, error)
	GetInstance(ctx context.Context, reportTime time.Time, id string) (*ec2.Instance, error)
	PutInstances(ctx context.Context, resources []*ec2.Instance) error
	GetInstanceReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedInstanceReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListInternetGateways(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.InternetGateway, error)
	GetInternetGateway(ctx context.Context, reportTime time.Time, id string) (*ec2.InternetGateway, error)
	PutInternetGateways(ctx context.Context, resources []*ec2.InternetGateway) error
	GetInternetGatewayReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedInternetGatewayReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListManagedPrefixLists(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.ManagedPrefixList, error)
	GetManagedPrefixList(ctx context.Context, reportTime time.Time, id string) (*ec2.ManagedPrefixList, error)
	PutManagedPrefixLists(ctx context.Context, resources []*ec2.ManagedPrefixList) error
	GetManagedPrefixListReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedManagedPrefixListReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListNatGateways(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.NatGateway, error)
	GetNatGateway(ctx context.Context, reportTime time.Time, id string) (*ec2.NatGateway, error)
	PutNatGateways(ctx context.Context, resources []*ec2.NatGateway) error
	GetNatGatewayReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedNatGatewayReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListNetworkAcls(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.NetworkAcl, error)
	GetNetworkAcl(ctx context.Context, reportTime time.Time, id string) (*ec2.NetworkAcl, error)
	PutNetworkAcls(ctx context.Context, resources []*ec2.NetworkAcl) error
	GetNetworkAclReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedNetworkAclReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListNetworkInterfaces(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.NetworkInterface, error)
	GetNetworkInterface(ctx context.Context, reportTime time.Time, id string) (*ec2.NetworkInterface, error)
	PutNetworkInterfaces(ctx context.Context, resources []*ec2.NetworkInterface) error
	GetNetworkInterfaceReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedNetworkInterfaceReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListPlacementGroups(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.PlacementGroup, error)
	GetPlacementGroup(ctx context.Context, reportTime time.Time, id string) (*ec2.PlacementGroup, error)
	PutPlacementGroups(ctx context.Context, resources []*ec2.PlacementGroup) error
	GetPlacementGroupReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedPlacementGroupReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListReservedInstances(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.ReservedInstances, error)
	GetReservedInstances(ctx context.Context, reportTime time.Time, id string) (*ec2.ReservedInstances, error)
	PutReservedInstances(ctx context.Context, resources []*ec2.ReservedInstances) error
	GetReservedInstancesReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedReservedInstancesReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListRouteTables(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.RouteTable, error)
	GetRouteTable(ctx context.Context, reportTime time.Time, id string) (*ec2.RouteTable, error)
	PutRouteTables(ctx context.Context, resources []*ec2.RouteTable) error
	GetRouteTableReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedRouteTableReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListSecurityGroups(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.SecurityGroup, error)
	GetSecurityGroup(ctx context.Context, reportTime time.Time, id string) (*ec2.SecurityGroup, error)
	PutSecurityGroups(ctx context.Context, resources []*ec2.SecurityGroup) error
	GetSecurityGroupReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedSecurityGroupReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListSubnets(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.Subnet, error)
	GetSubnet(ctx context.Context, reportTime time.Time, id string) (*ec2.Subnet, error)
	PutSubnets(ctx context.Context, resources []*ec2.Subnet) error
	GetSubnetReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedSubnetReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListTransitGatewayPeeringAttachments(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.TransitGatewayPeeringAttachment, error)
	GetTransitGatewayPeeringAttachment(ctx context.Context, reportTime time.Time, id string) (*ec2.TransitGatewayPeeringAttachment, error)
	PutTransitGatewayPeeringAttachments(ctx context.Context, resources []*ec2.TransitGatewayPeeringAttachment) error
	GetTransitGatewayPeeringAttachmentReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedTransitGatewayPeeringAttachmentReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListTransitGatewayRouteTables(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.TransitGatewayRouteTable, error)
	GetTransitGatewayRouteTable(ctx context.Context, reportTime time.Time, id string) (*ec2.TransitGatewayRouteTable, error)
	PutTransitGatewayRouteTables(ctx context.Context, resources []*ec2.TransitGatewayRouteTable) error
	GetTransitGatewayRouteTableReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedTransitGatewayRouteTableReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListTransitGatewayVpcAttachments(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.TransitGatewayVpcAttachment, error)
	GetTransitGatewayVpcAttachment(ctx context.Context, reportTime time.Time, id string) (*ec2.TransitGatewayVpcAttachment, error)
	PutTransitGatewayVpcAttachments(ctx context.Context, resources []*ec2.TransitGatewayVpcAttachment) error
	GetTransitGatewayVpcAttachmentReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedTransitGatewayVpcAttachmentReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListTransitGateways(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.TransitGateway, error)
	GetTransitGateway(ctx context.Context, reportTime time.Time, id string) (*ec2.TransitGateway, error)
	PutTransitGateways(ctx context.Context, resources []*ec2.TransitGateway) error
	GetTransitGatewayReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedTransitGatewayReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListVolumes(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.Volume, error)
	GetVolume(ctx context.Context, reportTime time.Time, id string) (*ec2.Volume, error)
	PutVolumes(ctx context.Context, resources []*ec2.Volume) error
	GetVolumeReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedVolumeReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListVpcEndpoints(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.VpcEndpoint, error)
	GetVpcEndpoint(ctx context.Context, reportTime time.Time, id string) (*ec2.VpcEndpoint, error)
	PutVpcEndpoints(ctx context.Context, resources []*ec2.VpcEndpoint) error
	GetVpcEndpointReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedVpcEndpointReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListVpcPeeringConnections(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.VpcPeeringConnection, error)
	GetVpcPeeringConnection(ctx context.Context, reportTime time.Time, id string) (*ec2.VpcPeeringConnection, error)
	PutVpcPeeringConnections(ctx context.Context, resources []*ec2.VpcPeeringConnection) error
	GetVpcPeeringConnectionReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedVpcPeeringConnectionReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListVpcs(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.Vpc, error)
	GetVpc(ctx context.Context, reportTime time.Time, id string) (*ec2.Vpc, error)
	PutVpcs(ctx context.Context, resources []*ec2.Vpc) error
	GetVpcReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedVpcReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListVpnGateways(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ec2.VpnGateway, error)
	GetVpnGateway(ctx context.Context, reportTime time.Time, id string) (*ec2.VpnGateway, error)
	PutVpnGateways(ctx context.Context, resources []*ec2.VpnGateway) error
	GetVpnGatewayReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedVpnGatewayReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type ECSDAO interface {
	ListClusters(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ecs.Cluster, error)
	GetCluster(ctx context.Context, reportTime time.Time, id string) (*ecs.Cluster, error)
	PutClusters(ctx context.Context, resources []*ecs.Cluster) error
	GetClusterReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedClusterReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListServices(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ecs.Service, error)
	GetService(ctx context.Context, reportTime time.Time, id string) (*ecs.Service, error)
	PutServices(ctx context.Context, resources []*ecs.Service) error
	GetServiceReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedServiceReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListTasks(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ecs.Task, error)
	GetTask(ctx context.Context, reportTime time.Time, id string) (*ecs.Task, error)
	PutTasks(ctx context.Context, resources []*ecs.Task) error
	GetTaskReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedTaskReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type EFSDAO interface {
	ListFileSystems(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*efs.FileSystem, error)
	GetFileSystem(ctx context.Context, reportTime time.Time, id string) (*efs.FileSystem, error)
	PutFileSystems(ctx context.Context, resources []*efs.FileSystem) error
	GetFileSystemReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedFileSystemReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type ElastiCacheDAO interface {
	ListCacheClusters(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*elasticache.CacheCluster, error)
	GetCacheCluster(ctx context.Context, reportTime time.Time, id string) (*elasticache.CacheCluster, error)
	PutCacheClusters(ctx context.Context, resources []*elasticache.CacheCluster) error
	GetCacheClusterReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedCacheClusterReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type ElasticLoadBalancingDAO interface {
	ListLoadBalancers(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*elasticloadbalancing.LoadBalancer, error)
	GetLoadBalancer(ctx context.Context, reportTime time.Time, id string) (*elasticloadbalancing.LoadBalancer, error)
	PutLoadBalancers(ctx context.Context, resources []*elasticloadbalancing.LoadBalancer) error
	GetLoadBalancerReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedLoadBalancerReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type ElasticLoadBalancingV2DAO interface {
	ListLoadBalancers(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*elasticloadbalancingv2.LoadBalancer, error)
	GetLoadBalancer(ctx context.Context, reportTime time.Time, id string) (*elasticloadbalancingv2.LoadBalancer, error)
	PutLoadBalancers(ctx context.Context, resources []*elasticloadbalancingv2.LoadBalancer) error
	GetLoadBalancerReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedLoadBalancerReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListTargetGroups(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*elasticloadbalancingv2.TargetGroup, error)
	GetTargetGroup(ctx context.Context, reportTime time.Time, id string) (*elasticloadbalancingv2.TargetGroup, error)
	PutTargetGroups(ctx context.Context, resources []*elasticloadbalancingv2.TargetGroup) error
	GetTargetGroupReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedTargetGroupReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type IAMDAO interface {
	ListGroups(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*iam.Group, error)
	GetGroup(ctx context.Context, reportTime time.Time, id string) (*iam.Group, error)
	PutGroups(ctx context.Context, resources []*iam.Group) error
	GetGroupReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedGroupReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListPolicies(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*iam.Policy, error)
	GetPolicy(ctx context.Context, reportTime time.Time, id string) (*iam.Policy, error)
	PutPolicies(ctx context.Context, resources []*iam.Policy) error
	GetPolicyReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedPolicyReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListRoles(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*iam.Role, error)
	GetRole(ctx context.Context, reportTime time.Time, id string) (*iam.Role, error)
	PutRoles(ctx context.Context, resources []*iam.Role) error
	GetRoleReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedRoleReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListUsers(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*iam.User, error)
	GetUser(ctx context.Context, reportTime time.Time, id string) (*iam.User, error)
	PutUsers(ctx context.Context, resources []*iam.User) error
	GetUserReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedUserReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type LambdaDAO interface {
	ListFunctions(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*lambda.Function, error)
	GetFunction(ctx context.Context, reportTime time.Time, id string) (*lambda.Function, error)
	PutFunctions(ctx context.Context, resources []*lambda.Function) error
	GetFunctionReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedFunctionReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type RDSDAO interface {
	ListDBClusters(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*rds.DBCluster, error)
	GetDBCluster(ctx context.Context, reportTime time.Time, id string) (*rds.DBCluster, error)
	PutDBClusters(ctx context.Context, resources []*rds.DBCluster) error
	GetDBClusterReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedDBClusterReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListDBInstances(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*rds.DBInstance, error)
	GetDBInstance(ctx context.Context, reportTime time.Time, id string) (*rds.DBInstance, error)
	PutDBInstances(ctx context.Context, resources []*rds.DBInstance) error
	GetDBInstanceReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedDBInstanceReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type RedshiftDAO interface {
	ListClusters(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*redshift.Cluster, error)
	GetCluster(ctx context.Context, reportTime time.Time, id string) (*redshift.Cluster, error)
	PutClusters(ctx context.Context, resources []*redshift.Cluster) error
	GetClusterReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedClusterReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type Route53DAO interface {
	ListHostedZones(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*route53.HostedZone, error)
	GetHostedZone(ctx context.Context, reportTime time.Time, id string) (*route53.HostedZone, error)
	PutHostedZones(ctx context.Context, resources []*route53.HostedZone) error
	GetHostedZoneReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedHostedZoneReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type S3DAO interface {
	ListBuckets(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*s3.Bucket, error)
	GetBucket(ctx context.Context, reportTime time.Time, id string) (*s3.Bucket, error)
	PutBuckets(ctx context.Context, resources []*s3.Bucket) error
	GetBucketReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedBucketReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type SNSDAO interface {
	ListTopics(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*sns.Topic, error)
	GetTopic(ctx context.Context, reportTime time.Time, id string) (*sns.Topic, error)
	PutTopics(ctx context.Context, resources []*sns.Topic) error
	GetTopicReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedTopicReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
	ListSubscriptions(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*sns.Subscription, error)
	GetSubscription(ctx context.Context, reportTime time.Time, id string) (*sns.Subscription, error)
	PutSubscriptions(ctx context.Context, resources []*sns.Subscription) error
	GetSubscriptionReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedSubscriptionReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type SQSDAO interface {
	ListQueues(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*sqs.Queue, error)
	GetQueue(ctx context.Context, reportTime time.Time, id string) (*sqs.Queue, error)
	PutQueues(ctx context.Context, resources []*sqs.Queue) error
	GetQueueReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedQueueReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}
type StorageGatewayDAO interface {
	ListGateways(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*storagegateway.Gateway, error)
	GetGateway(ctx context.Context, reportTime time.Time, id string) (*storagegateway.Gateway, error)
	PutGateways(ctx context.Context, resources []*storagegateway.Gateway) error
	GetGatewayReportTimes(ctx context.Context, reportDate time.Time) ([]string, error)
	GetReferencedGatewayReportTime(ctx context.Context, reportDate time.Time, timeSelection TimeSelection, timeReference time.Time) (*time.Time, error)
}

//AUTOGENERATED CODE DO NOT EDIT
package mongo

import (
	"context"
	"github.com/sheacloud/cloud-inventory/internal/db"
	"github.com/sheacloud/cloud-inventory/pkg/aws/ecs"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"time"
)

type MongoECSDAO struct {
	db *mongo.Database
}

func (dao *MongoECSDAO) ListClusters(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ecs.Cluster, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
	}
	if accountID != nil {
		filter = append(filter, bson.E{Key: "account_id", Value: *accountID})
	}
	if region != nil {
		filter = append(filter, bson.E{Key: "region", Value: *region})
	}

	var results []*ecs.Cluster
	cursor, err := dao.db.Collection("aws_ecs_clusters").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}

	return results, nil
}

func (dao *MongoECSDAO) GetCluster(ctx context.Context, reportTime time.Time, id string) (*ecs.Cluster, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
		bson.E{"cluster_arn", id},
	}

	var result *ecs.Cluster
	err := dao.db.Collection("aws_ecs_clusters").FindOne(ctx, filter).Decode(&result)

	return result, err
}

func (dao *MongoECSDAO) PutClusters(ctx context.Context, resources []*ecs.Cluster) error {
	if len(resources) == 0 {
		return nil
	}
	writes := make([]interface{}, len(resources))
	for i, resource := range resources {
		writes[i] = resource
	}
	_, err := dao.db.Collection("aws.ecs.clusters").InsertMany(ctx, writes)

	return err
}

func (dao *MongoECSDAO) GetClusterReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.db.Collection("aws_ecs_clusters"), reportDate)
}

func (dao *MongoECSDAO) GetReferencedClusterReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.db.Collection("aws_ecs_clusters"), reportDate, timeSelection, timeReference)
}

func (dao *MongoECSDAO) ListServices(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ecs.Service, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
	}
	if accountID != nil {
		filter = append(filter, bson.E{Key: "account_id", Value: *accountID})
	}
	if region != nil {
		filter = append(filter, bson.E{Key: "region", Value: *region})
	}

	var results []*ecs.Service
	cursor, err := dao.db.Collection("aws_ecs_services").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}

	return results, nil
}

func (dao *MongoECSDAO) GetService(ctx context.Context, reportTime time.Time, id string) (*ecs.Service, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
		bson.E{"service_arn", id},
	}

	var result *ecs.Service
	err := dao.db.Collection("aws_ecs_services").FindOne(ctx, filter).Decode(&result)

	return result, err
}

func (dao *MongoECSDAO) PutServices(ctx context.Context, resources []*ecs.Service) error {
	if len(resources) == 0 {
		return nil
	}
	writes := make([]interface{}, len(resources))
	for i, resource := range resources {
		writes[i] = resource
	}
	_, err := dao.db.Collection("aws.ecs.services").InsertMany(ctx, writes)

	return err
}

func (dao *MongoECSDAO) GetServiceReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.db.Collection("aws_ecs_services"), reportDate)
}

func (dao *MongoECSDAO) GetReferencedServiceReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.db.Collection("aws_ecs_services"), reportDate, timeSelection, timeReference)
}

func (dao *MongoECSDAO) ListTasks(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*ecs.Task, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
	}
	if accountID != nil {
		filter = append(filter, bson.E{Key: "account_id", Value: *accountID})
	}
	if region != nil {
		filter = append(filter, bson.E{Key: "region", Value: *region})
	}

	var results []*ecs.Task
	cursor, err := dao.db.Collection("aws_ecs_tasks").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}

	return results, nil
}

func (dao *MongoECSDAO) GetTask(ctx context.Context, reportTime time.Time, id string) (*ecs.Task, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
		bson.E{"task_arn", id},
	}

	var result *ecs.Task
	err := dao.db.Collection("aws_ecs_tasks").FindOne(ctx, filter).Decode(&result)

	return result, err
}

func (dao *MongoECSDAO) PutTasks(ctx context.Context, resources []*ecs.Task) error {
	if len(resources) == 0 {
		return nil
	}
	writes := make([]interface{}, len(resources))
	for i, resource := range resources {
		writes[i] = resource
	}
	_, err := dao.db.Collection("aws.ecs.tasks").InsertMany(ctx, writes)

	return err
}

func (dao *MongoECSDAO) GetTaskReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.db.Collection("aws_ecs_tasks"), reportDate)
}

func (dao *MongoECSDAO) GetReferencedTaskReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.db.Collection("aws_ecs_tasks"), reportDate, timeSelection, timeReference)
}

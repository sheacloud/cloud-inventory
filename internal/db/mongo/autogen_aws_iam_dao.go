//AUTOGENERATED CODE DO NOT EDIT
package mongo

import (
	"context"
	"github.com/sheacloud/cloud-inventory/internal/db"
	"github.com/sheacloud/cloud-inventory/pkg/aws/iam"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"time"
)

type MongoIAMDAO struct {
	db *mongo.Database
}

func (dao *MongoIAMDAO) ListGroups(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*iam.Group, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
	}
	if accountID != nil {
		filter = append(filter, bson.E{Key: "account_id", Value: *accountID})
	}
	if region != nil {
		filter = append(filter, bson.E{Key: "region", Value: *region})
	}

	var results []*iam.Group
	cursor, err := dao.db.Collection("aws_iam_groups").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}

	return results, nil
}

func (dao *MongoIAMDAO) GetGroup(ctx context.Context, reportTime time.Time, id string) (*iam.Group, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
		bson.E{"group_id", id},
	}

	var result *iam.Group
	err := dao.db.Collection("aws_iam_groups").FindOne(ctx, filter).Decode(&result)

	return result, err
}

func (dao *MongoIAMDAO) PutGroups(ctx context.Context, resources []*iam.Group) error {
	if len(resources) == 0 {
		return nil
	}
	writes := make([]interface{}, len(resources))
	for i, resource := range resources {
		writes[i] = resource
	}
	_, err := dao.db.Collection("aws.iam.groups").InsertMany(ctx, writes)

	return err
}

func (dao *MongoIAMDAO) GetGroupReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.db.Collection("aws_iam_groups"), reportDate)
}

func (dao *MongoIAMDAO) GetReferencedGroupReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.db.Collection("aws_iam_groups"), reportDate, timeSelection, timeReference)
}

func (dao *MongoIAMDAO) ListPolicies(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*iam.Policy, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
	}
	if accountID != nil {
		filter = append(filter, bson.E{Key: "account_id", Value: *accountID})
	}
	if region != nil {
		filter = append(filter, bson.E{Key: "region", Value: *region})
	}

	var results []*iam.Policy
	cursor, err := dao.db.Collection("aws_iam_policies").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}

	return results, nil
}

func (dao *MongoIAMDAO) GetPolicy(ctx context.Context, reportTime time.Time, id string) (*iam.Policy, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
		bson.E{"policy_id", id},
	}

	var result *iam.Policy
	err := dao.db.Collection("aws_iam_policies").FindOne(ctx, filter).Decode(&result)

	return result, err
}

func (dao *MongoIAMDAO) PutPolicies(ctx context.Context, resources []*iam.Policy) error {
	if len(resources) == 0 {
		return nil
	}
	writes := make([]interface{}, len(resources))
	for i, resource := range resources {
		writes[i] = resource
	}
	_, err := dao.db.Collection("aws.iam.policies").InsertMany(ctx, writes)

	return err
}

func (dao *MongoIAMDAO) GetPolicyReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.db.Collection("aws_iam_policies"), reportDate)
}

func (dao *MongoIAMDAO) GetReferencedPolicyReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.db.Collection("aws_iam_policies"), reportDate, timeSelection, timeReference)
}

func (dao *MongoIAMDAO) ListRoles(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*iam.Role, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
	}
	if accountID != nil {
		filter = append(filter, bson.E{Key: "account_id", Value: *accountID})
	}
	if region != nil {
		filter = append(filter, bson.E{Key: "region", Value: *region})
	}

	var results []*iam.Role
	cursor, err := dao.db.Collection("aws_iam_roles").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}

	return results, nil
}

func (dao *MongoIAMDAO) GetRole(ctx context.Context, reportTime time.Time, id string) (*iam.Role, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
		bson.E{"role_id", id},
	}

	var result *iam.Role
	err := dao.db.Collection("aws_iam_roles").FindOne(ctx, filter).Decode(&result)

	return result, err
}

func (dao *MongoIAMDAO) PutRoles(ctx context.Context, resources []*iam.Role) error {
	if len(resources) == 0 {
		return nil
	}
	writes := make([]interface{}, len(resources))
	for i, resource := range resources {
		writes[i] = resource
	}
	_, err := dao.db.Collection("aws.iam.roles").InsertMany(ctx, writes)

	return err
}

func (dao *MongoIAMDAO) GetRoleReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.db.Collection("aws_iam_roles"), reportDate)
}

func (dao *MongoIAMDAO) GetReferencedRoleReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.db.Collection("aws_iam_roles"), reportDate, timeSelection, timeReference)
}

func (dao *MongoIAMDAO) ListUsers(ctx context.Context, reportTime time.Time, accountID, region *string, limit, offset *int64) ([]*iam.User, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
	}
	if accountID != nil {
		filter = append(filter, bson.E{Key: "account_id", Value: *accountID})
	}
	if region != nil {
		filter = append(filter, bson.E{Key: "region", Value: *region})
	}

	var results []*iam.User
	cursor, err := dao.db.Collection("aws_iam_users").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &results)
	if err != nil {
		return nil, err
	}

	return results, nil
}

func (dao *MongoIAMDAO) GetUser(ctx context.Context, reportTime time.Time, id string) (*iam.User, error) {
	filter := bson.D{
		bson.E{"report_time", reportTime},
		bson.E{"user_id", id},
	}

	var result *iam.User
	err := dao.db.Collection("aws_iam_users").FindOne(ctx, filter).Decode(&result)

	return result, err
}

func (dao *MongoIAMDAO) PutUsers(ctx context.Context, resources []*iam.User) error {
	if len(resources) == 0 {
		return nil
	}
	writes := make([]interface{}, len(resources))
	for i, resource := range resources {
		writes[i] = resource
	}
	_, err := dao.db.Collection("aws.iam.users").InsertMany(ctx, writes)

	return err
}

func (dao *MongoIAMDAO) GetUserReportTimes(ctx context.Context, reportDate time.Time) ([]string, error) {
	return DistinctReportTimes(ctx, dao.db.Collection("aws_iam_users"), reportDate)
}

func (dao *MongoIAMDAO) GetReferencedUserReportTime(ctx context.Context, reportDate time.Time, timeSelection db.TimeSelection, timeReference time.Time) (*time.Time, error) {
	return GetReportTime(ctx, dao.db.Collection("aws_iam_users"), reportDate, timeSelection, timeReference)
}
